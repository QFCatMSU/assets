[
  {
    "objectID": "tutorials/future_tutorials.html",
    "href": "tutorials/future_tutorials.html",
    "title": "Quarto Visual Tutorial",
    "section": "",
    "text": "Git/GitHub usage\nSetup\n\nCSS injection\nVSCode: render externally\n\nRendering\n\nbackground tasks\n\nAdd a new lesson\n\ncreate a new lesson\ninit lesson\n\nstarter code\ncopy old lesson\n\nsave lesson\n\nElement in webpage\n\nheaders (and what they mean)\nparagraphs\ncodeblocks\nnumbered/bullet lists\n\nStyling\n\nb,i,u,\nhighlights and notes\n\nSpacing\n\nControl-Space for extra line/ spaces\n\nadd images\n\nresizing\nadd caption (figure)\ndifferences between VSCode, Quarto\n\ndropping image renames – can drop in file manager then add to page\n\nreferencing\n\nLinks\n\ninside/ouside project\nother class lesson\nsections (2 ways)\n\nby Header\nadd name sec-# and ref by figure\n\ndownload\nemail links ??\n\nCode (block)\n\nhighlighting\ntab names\ncopying\nadd caption (figure)\nreferencing\nlanguage (R, Python, Java…)\n\nuse default if you do not want highlighting (cannot leave blank)\n\n\nEquations\n\ninline and display (Latex)\nusing EquateIO\nnumbering\ncaptioning/ referencing\n\nVideos\n\nFrom Mediaspace\n\nTables\n\ncannot merge cells (email Quarto re this)\n\nBibliography\n\nZotero"
  },
  {
    "objectID": "tutorials/GroupCalendar/GroupCalendar.html",
    "href": "tutorials/GroupCalendar/GroupCalendar.html",
    "title": "New QFC Group Calendar",
    "section": "",
    "text": "These instructions are linked on the Calendar every Sunday. Click on images to resize them."
  },
  {
    "objectID": "tutorials/GroupCalendar/GroupCalendar.html#location-outlook",
    "href": "tutorials/GroupCalendar/GroupCalendar.html#location-outlook",
    "title": "New QFC Group Calendar",
    "section": "1 Location (Outlook)",
    "text": "1 Location (Outlook)\nThe new QFC Calendar is automatically put into your Outlook Calendars. It will be under the Groups category named QFC.\n \nThis view is from the new Outlook (you should update to the new Outlook):\n\n\n\nLocation of QFC Calendar in Outlook\n\n\nNote: If you only want to see QFC events, then uncheck every other calendar"
  },
  {
    "objectID": "tutorials/GroupCalendar/GroupCalendar.html#event-categories",
    "href": "tutorials/GroupCalendar/GroupCalendar.html#event-categories",
    "title": "New QFC Group Calendar",
    "section": "2 Event Categories",
    "text": "2 Event Categories\nThere are three types of QFC events and they are color coded:\n\nStaff Availability (blue)\nConference Room (orange)\nInformational (green)\n\n \nUnfortunately, Outlook does not yet allow you to change category names on Group Calendars (you can do this on individual calendars) so we have to deal with the awkward category colors."
  },
  {
    "objectID": "tutorials/GroupCalendar/GroupCalendar.html#creating-a-new-event",
    "href": "tutorials/GroupCalendar/GroupCalendar.html#creating-a-new-event",
    "title": "New QFC Group Calendar",
    "section": "3 Creating a new event",
    "text": "3 Creating a new event\nIn Outlook calendar, click on New Event and this windows will appear:\n\n\n\nCreating a new QFC Group event\n\n\nMake sure you:\n\nchange the calendar to QFC (your_email@msu.edu)\nchange the category color\nadd something to the description that tell which kind of event this is (so we are not fully dependent on the awkward color categories)\n\n\n3.1 Event emails and notifications\nOnly people explicitly added to the Invite attendees section will get emails/notifications about the event. For everyone else, the event will just appear on the group calendar.\n\n\n3.2 Changing event category (color)\nIf you need to change the category color of the event, you can right-click on the event and click Categorize:\n\n\n\nChanging the event category (color)"
  },
  {
    "objectID": "tutorials/GroupCalendar/GroupCalendar.html#qfc-calendar-on-teams",
    "href": "tutorials/GroupCalendar/GroupCalendar.html#qfc-calendar-on-teams",
    "title": "New QFC Group Calendar",
    "section": "4 QFC calendar on Teams",
    "text": "4 QFC calendar on Teams\nThe QFC Group Calendar is also linked on the QFC Teams page:\n\n\n\nThe QFC Group Calendar in the Teams page\n\n\nWhen you click on QFC Group calendar, it opens your Outlook calendar with the QFC Group calendar checked. You can add events and edit the calendar here."
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html",
    "title": "Quick Setup",
    "section": "",
    "text": "Git/GitHub works a little bit better if the project is not on a cloud folder (e.g., OneDrive, Google Drive)\nYou can create a project in a empty folder and then add the files afterwards\nPreviously installed Git software (e.g., GitHub Desktop) could cause issues\nThis lesson assumes that you have an RStudio Project and a GitHub repository URL\nInclude how to email when a Post is sent to the repository",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#install-git-on-your-computer",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#install-git-on-your-computer",
    "title": "Quick Setup",
    "section": "1 Install Git on your computer",
    "text": "1 Install Git on your computer\nMake sure RStudio is closed while Git is being installed.\n \nWindows installation: go to this page and click on Download 2.XX.X for Windows\nMac installation: go to this page and download the Binary Installer\n \nYou can use the default installation settings.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#get-a-github-account",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#get-a-github-account",
    "title": "Quick Setup",
    "section": "2 Get a GitHub account",
    "text": "2 Get a GitHub account\nGo to https://github.com and sign up for an account.  Email your account ID to belinsky@msu.edu.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#configure-git-on-your-computer",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#configure-git-on-your-computer",
    "title": "Quick Setup",
    "section": "3 Configure Git on your computer",
    "text": "3 Configure Git on your computer\nWe will use the RStudio Terminal tab, located in the bottom-left corner next to the Console tab (Figure 1) to set up the username and email that Git attaches to the metadata of your project.  You can choose any (valid or invalid) username and email – they are not related to a login.\n\n\n\n\n\n\nFigure 1: The Terminal Tab in RStudio\n\n\n\nIn the Terminal tab put in two commands:\ngit config --global user.name \"your_userName\" \ngit config --global user.email \"your_email\"",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#add-git-to-your-rstudio-project",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#add-git-to-your-rstudio-project",
    "title": "Quick Setup",
    "section": "4 Add Git to your RStudio Project",
    "text": "4 Add Git to your RStudio Project\nTo add Git to your RStudio Project\n\nOpen your project in RStudio\nClick Tools -&gt; Version Control -&gt; Project Setup\nIn the Version control system dropdown menu, select Git\n\n\n\n\n\n\n\nFigure 2: Adding Git to your RStudio Project\n\n\n\n\nSay Yes to initializing a new repository for the project\nRestart R by clicking Session -&gt; Restart R",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#link-your-rstudio-project-to-the-github-repository",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#link-your-rstudio-project-to-the-github-repository",
    "title": "Quick Setup",
    "section": "5 Link your RStudio Project to the GitHub repository",
    "text": "5 Link your RStudio Project to the GitHub repository\nFor this section, you can use your own GitHub repository URL or one supplied to you by the instructor.\n \nNote: In Windows, Control-V does not paste in a Terminal but right-click -&gt; Paste works\n \nIn the RStudio Terminal tab, type or copy/paste, and press enter after each line.  Make sure you put in your GitHub repository URL in the second line:\ngit add -A && git commit -m \"added Git\"\ngit remote add origin \"https://github.com/myUserName/myRepository.git\"\n\n\n\ngit push -u origin master\n\n\nFigure 3: Three lines to type in Terminal that links your RStudio Project to a GitHub repository\n\n\n\n\n5.1 If you made a mistake…\nIf you made a mistake with typing the three lines above then type the following line in the Terminal:\ngit remote rm origin\nand then repeat the three lines.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#authenticating-with-github",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#authenticating-with-github",
    "title": "Quick Setup",
    "section": "6 Authenticating with GitHub",
    "text": "6 Authenticating with GitHub\nAfter you enter the third line, there is a chance you will have to authenticate with GitHub:\n\n\n\n\n\n\nFigure 4: GitHub asking for authentication\n\n\n\nWhen you click Sign in with your browser, your default browser will open to the GitHub login page.\n \nAfter you login you will get an Authentication Successful window:\n\n\n\n\n\n\nFigure 5: The Authentication Successful window",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#sending-project-changes-to-github",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#sending-project-changes-to-github",
    "title": "Quick Setup",
    "section": "7 Sending project changes to GitHub",
    "text": "7 Sending project changes to GitHub\nChanges to your Project on your computer are not automatically saved to GitHub.  You have to accept (Commit) and send (Push) the changes to GitHub.  Before doing these steps, you have to make changes to your project – this means add, remove, or modify files in your Project.\n \nThe images below show an example project where three files were modified: test1.r, test2.r, and testData.csv\n\n7.1 Accept (Commit) changes to your project\n1) Press the Commit button in the Git tab. In the tab you will see all the project files that have been modified (added/removed/changed):\n\n\n\n\n\n\nFigure 6: Git tab and the Commit button\n\n\n\n\n \n2) The Review Changes window appears. Select every file (Figure 6) in the left window. Be patient, the checkboxes sometimes take a few seconds to switch states.\n\n3) Add a Commit message. This is a short description of the changes you made to the RStudio Project in this Commit.\n \n4) Press the Commit button.  You have now accepted the changes to your Project.\n\n\n\n\n\n\nFigure 7: Accepting the changes (i.e., creating a new Commit) for your project\n\n\n\n5) Close the Git Commit window (that appears after you press the Commit button)\n \n6) Close the Review Changes Window\n\n\n7.2 Sending (Push) the changes to GitHub\nTo send the changes to GitHub, you need to perform a Push. You can Push in the Git tab by clicking on the green up arrow:\n\n\n\n\n\n\nFigure 8: The green up-arrow that sends changes to GitHub\n\n\n\n \nA window will come up giving the results of the Push with a brief description of the changes. You can close the window.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#getting-email-notification-when-a-push-occurs",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#getting-email-notification-when-a-push-occurs",
    "title": "Quick Setup",
    "section": "8 Getting email notification when a Push occurs",
    "text": "8 Getting email notification when a Push occurs\nIn the GitHub repository for your project:\n\nclick on Settings\nclick on Email notifications (left side, near bottom, under Integrations) \n\n \nYou can only put in 2 email addresses – make one of them belinsky@msu.edu.\n\n\n\n\n\n\nFigure 9: Adding email notifications when a new Commit is Pushed to the repository",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#sending-an-message-using-issues",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#sending-an-message-using-issues",
    "title": "Quick Setup",
    "section": "9 Sending an message (using Issues)",
    "text": "9 Sending an message (using Issues)\nGitHub is not designed to be a messaging system.  In fact, it is designed to avoid giving members too many messages – so, there is no direct way to send a message.\n \nThe best way to send a message is to start an Issue and add the person’s GitHub ID to the Issue. This will send a email to the user.\n \nIn the GitHub repository for your project:\n\nclick on Issues\nclick on @ to add a GitHub ID to the message\n\n \nYou can only the GitHub ID of people who are members of the repository.\n\n\n\n\n\n\nFigure 10: Sending a message to a GitHub user using Issues",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#downloading-a-project-from-github",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#downloading-a-project-from-github",
    "title": "Quick Setup",
    "section": "10 Downloading a project from GitHub",
    "text": "10 Downloading a project from GitHub\nIf you are not collaborating on a project and do not care about update, then the easiest way to get a project is to download directly from the GitHub page.\n \nIn the GitHub repository for your project:\n\nclick on Code\nclick on green Code button\nclick Download Zip\n\n \nOf course, you will have to unzip the project!\n\n\n\n\n\n\nFigure 11: Download the project from GitHub",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#inviting-users-to-your-repository",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#inviting-users-to-your-repository",
    "title": "Quick Setup",
    "section": "11 Inviting users to your repository",
    "text": "11 Inviting users to your repository\nTo invite a user (or, as GitHub calls them, collaborator) to your repository:\n\nGo to the GitHub home page for your repository and click Settings\nClick Manage Access\nClick Invite a Collaborator\n\nYou can use either the person’s GitHub ID or their email address associated with their GitHub ID\n\n\n \n\n\n\n\n\n\nFigure 12: Inviting a user to your GitHub Repository\n\n\n\nAn email will be sent to the collaborator, and they can click on Accept Invitation in the email.  They will also get a notification in GitHub and they call accept the invitation there.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/Git-GitHub-Quick-Setup.html#issue-cannot-push-commits-until-you-pull",
    "href": "tutorials/Git/Git-GitHub-Quick-Setup.html#issue-cannot-push-commits-until-you-pull",
    "title": "Quick Setup",
    "section": "12 Issue: Cannot Push Commits until you Pull",
    "text": "12 Issue: Cannot Push Commits until you Pull\nThis issue happens when:\n\nYou try to Push your new Commits to the GitHub repository but\nthe GitHub repository has Commits that you have not Pulled\n\n \nIn other words, Git will not allow you to upload (Push) your updates to the GitHub repository until you have downloaded (Pull) the latest Commits from the GitHub Repository.  You need to have the all the current chapter in the project before you can add a new one.\n\n12.1 Error Messages\n\n\n\n&gt;&gt;&gt; C:/Program Files/Git/bin/git.exe push origin HEAD:refs/heads/master\nTo https://github.com/qfcatmsu/githubstarter\n! [rejected] HEAD -&gt; master (fetch first)\nerror: failed to push some refs to 'https://github.com/qfcatmsu/githubstarter'\nhint: Updates were rejected because the «remote contains work that you do»\nhint: «not have locally». This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n\nFigure 13: The error message when you try to Push when there are Commits you need to Pull first\n\n\n\nThe message is telling you that there are Commits on the GitHub Repository that you do not have yet. In other words, someone else has Pushed Commits to the repository since you last Pulled the project.\n \nNote: typing git pullin the Terminal does the same thing as pressing the down blue arrow in the Git tab\n\n\n12.2 Solution\nThe solution here is to Pull the changes from the repository.  And when you Pull you could get a conflict issue…",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "Quick Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html",
    "href": "tutorials/Git/07-Conflicts.html",
    "title": "07: Issues and Conflicts",
    "section": "",
    "text": "Show example of using the Terminal to find files in conflict\nCreate a hands-on example for the lesson\nTalk about how deleting a file works in collaboration",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#purpose",
    "href": "tutorials/Git/07-Conflicts.html#purpose",
    "title": "07: Issues and Conflicts",
    "section": "1 Purpose",
    "text": "1 Purpose\nThe main goal of this lesson is to present the most common issues stemming from conflicts between your local Git repository and the GitHub repository, and how to resolve them, when you are working collaboratively on a GitHub repository\n \nA peripheral goal is to show how these issues are actually Git’s way of isolating conflicts to an individual collaborator’s computer.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#single-contributor-repositories",
    "href": "tutorials/Git/07-Conflicts.html#single-contributor-repositories",
    "title": "07: Issues and Conflicts",
    "section": "2 Single-contributor repositories",
    "text": "2 Single-contributor repositories\nUp until this point we have been dealing with the relatively simple Git situations where one person creates Commits on their computer and then Pushes the Commits to a GitHub repository. In this case, the repository is just a backup of the person’s local repository and this scenario rarely causes any issues.\n \nWe can look at all the Commits in a repository by clicking on History in the Git tab, which is the clock icon.  This will bring up the repository’s History.  In single-contributor repositories the History will look something like this:\n\n\n\n\n\n\nFigure 1: The list of all the Commits in your project\n\n\n\nThe History is linear where each node (line) represents each time the contributor (in this case, only Charlie) Pushed his Commits to the GitHub Repository.\n \nWhen you Push, you are sending all your new Commits to the Github repository (i.e., Commits that the GitHub Repository does not have). After a successful Push, your local computer and the GitHub repository will have the exact same Commits.\n \n&lt;show example of a history with multiple collaborators&gt;",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#multiple-contributor-collaborative-repositories",
    "href": "tutorials/Git/07-Conflicts.html#multiple-contributor-collaborative-repositories",
    "title": "07: Issues and Conflicts",
    "section": "3 Multiple-contributor – collaborative repositories",
    "text": "3 Multiple-contributor – collaborative repositories\nWhen working collaboratively, multiple people are creating Commits on their local computer and Pushing them to the GitHub Repository.  Because Git/GitHub is not automated, every collaborator needs to Pull the new Commits (i.e., Commits Pushed by other people) from the GitHub Repository.  When you Pull, the GitHub repository sends you the newest Commits (i.e., Commits that your collaborators Pushed to the GitHub Repository).  Just like a successful Push, a successful Pull means that the project on your computer and the GitHub repository have the exact same Commits.\n \nThis is the hub-spoke model in Figure 2 (hence, the name GitHub) where the GitHub Repository is the central hub that everyone communicates directly with.  It is in this handshaking between GitHub and the various local computers that we run into many issues.\n\n\n\n\n\n\nFigure 2: The Git Repository is the central location of the project (hub-spoke model)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#merging-commits",
    "href": "tutorials/Git/07-Conflicts.html#merging-commits",
    "title": "07: Issues and Conflicts",
    "section": "4 Merging Commits",
    "text": "4 Merging Commits\nWhen multiple people are collaborating on a project in a GitHub repository, they are all effectively working on the same chapter of the book.  This is because everyone is working off of the same book (project) with the same chapters (Commits) and everyone is creating the next chapter (the next Commit).\n \nIn other words, if the book has 15 chapters then every collaborator, on their own computer, is creating a chapter 16.  Git’s job (and the real magic behind Git) is to merge all of the chapter 16s into one cohesive chapter 16.  Most of the time Git can do this in the background.  Every once in a while, Git cannot merge the various chapter 16s and there is a conflict. \n \nAll the issue mentioned in this lesson are Git’s way of funneling conflicts to a local computer and understanding how Git funnels conflicts is vital to understanding how Git works.\n \nNote: Each collaborator’s new Commit is actually a new project branch – we will deal with branches in another lesson.\n\n4.1 When conflicts occur\nGit can successfully merge Commits from different computer if the files changed in the Commits were all different (i.e., the collaborators were all working on different files).  Git just combines are the file changes into one Commit.  Git can even merge changes when multiple people have edited the same file – as long as the edits are on different lines and the structure of the file remains closely the same.\n\n\n\n\n\n\nFigure 3: A successful merge\n\n\n\nWhen multiple people edit the same lines in the same file of the same Commit you have a conflict.\n \nWe are going to discuss, and give resolutions for, the four main issues people get when collaborating in Git.  These issues are the result of processes designed to isolate conflicts to a local Git repository.\n\n\n4.2 Four issues and cryptic error messages\nThe four issues are:\n\nYou cannot Push Commits to GitHub unless you have Pulled the latest Commits from GitHub\nYou cannot Pull Commits from GitHub if the Commits contains changes to files that you have also changed but not committed (yeah, that is a mouthful!)\nA Pull Commit contains a conflict with an un-Pushed Commit on your computer\nYou cannot Push Commit if you have an unresolved conflict\n\n \nUnfortunately, Git does not present the user with easy to understand error messages.  The following is a typical message and it occurs with issue #1:\n\n\n\n\n\n\nFigure 4: A typical, and not always helpful, error message from Git\n\n\n\nIt is important to understand what these error messages are saying and googling them online can often put you in a minefield!\n \nNote: From this point on in this lesson, the error messages will be presented as text instead of an image.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#issue-1-cannot-push-commits-until-you-pull",
    "href": "tutorials/Git/07-Conflicts.html#issue-1-cannot-push-commits-until-you-pull",
    "title": "07: Issues and Conflicts",
    "section": "5 Issue 1: Cannot Push Commits until you Pull",
    "text": "5 Issue 1: Cannot Push Commits until you Pull\nThe first issue happens when:\n\nYou try to Push your new Commits to the GitHub repository… but\nthe GitHub repository has Commits that you have not Pulled\n\n \nIn other words, the book in the GitHub repository has chapters that your local Git repository does not have.\n \nYou need to have the latest version of the repository before you can modify it.  Git will not allow you to upload (Push) your updates to the GitHub repository until you have downloaded (Pull) the latest Commits from the GitHub Repository.  \n\n5.1 Error Messages\n\n\n\n&gt;&gt;&gt; C:/Program Files/Git/bin/git.exe push origin HEAD:refs/heads/master\nTo https://github.com/qfcatmsu/githubstarter\n! [rejected] HEAD -&gt; master (fetch first)\nerror: failed to push some refs to 'https://github.com/qfcatmsu/githubstarter'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n\nFigure 5: The error message when you try to Push when there are Commits you need to Pull first\n\n\n\nThe cryptic error message is telling you that there are Commits on the GitHub Repository that you do not have yet. In other words, someone else has Pushed Commits to the repository since you last did a Pull.\n\n\n5.2 Solution\nThe solution here is to Pull the changes from the repository.  And when you Pull you could get Issue 2…\n \nNote: typing git pull in the Terminal does the same thing as pressing the down blue arrow in the Git tab",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#issue-2-cannot-pull-because-of-uncommitted-files",
    "href": "tutorials/Git/07-Conflicts.html#issue-2-cannot-pull-because-of-uncommitted-files",
    "title": "07: Issues and Conflicts",
    "section": "6 Issue 2: Cannot Pull because of uncommitted files",
    "text": "6 Issue 2: Cannot Pull because of uncommitted files\nGit will not let you Pull new Commits if the new Commits have changes to files that:\n\nyou have also modified on your local repository and\nyou have not committed the changes (i.e., the modified files are in the Staging Area)\n\n \nChanges to files that are uncommitted are, to Git, in a vague state.  Git will not allow you to leave changed files in a vague state if those files have also been changed by other collaborators on the GitHub repository.\n\n6.1 Error Message\n\n\n\n\n\n\nFigure 6: The Pulled Commits contain changes to files that you have also changed but not committed\n\n\n\n\n\n\n&gt;&gt;&gt; C:/Program Files/Git/bin/git.exe pull\nerror: Your local changes to the following files would be overwritten by merge:\n   scripts/test1.r\n   scripts/test2.r\nPlease commit your changes or stash them before you merge.\nAborting\n\n\nFigure 7: Error message saying you need to commit your changes before Pulling new Commit\n\n\n\nThe local changes are your uncommitted changes (i.e., files in Staging Area).  Merge refers to the attempt to include the changes from the new Commit to your local project.  In Figure 6, the newest Commits have changes to test1.r and test2.r – but there are also changes to test1.r and test2.r in the local project that are still in the Staging Area (i.e., not Committed).\n \nBasically, Git is telling you the latest GitHub Commits can potentially conflict with your uncommitted changes and you either need to commit or undo your changes.\n\n\n6.2 Solutions\nThere are three solutions to this problem:\n\nCommit your changes to the file\n\nRecommended, but this could cause a conflict (Issue 3) because it means the same file has been modified in two different places\n\nRevert your changes\n\nEasiest solution, but you will lose all changes to your files since last Commit – only do this if you are sure you don’t want the file changes\nTo Revert: right-click on the file in the Staging Area and click Revert…\n\nStash your changes\n\nAdvanced approach that requires the Terminal and is not covered in this class.  Stashing allows you to keep your changes by storing them in an alternate version of your project.  You can continue to work on the main version of the project.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#issue-3-pull-caused-conflict",
    "href": "tutorials/Git/07-Conflicts.html#issue-3-pull-caused-conflict",
    "title": "07: Issues and Conflicts",
    "section": "7 Issue 3: Pull caused conflict",
    "text": "7 Issue 3: Pull caused conflict\nA conflict can occur when the same file is modified in both:\n\nA Commit that you just Pulled from the GitHub Repository\nA Commit on your computer that you have yet to Push to the GitHub Repository\n\n\n7.1 Error Message\n\n\n\n&gt;&gt;&gt; C:/Program Files/Git/bin/git.exe pull\nAuto-merging scripts/test1.r\nCONFLICT (content): Merge conflict in scripts/test1.r\nAutomatic merge failed; fix conflicts and then commit the result.\n\n\nFigure 8: Error message saying that there is a conflict in a file that was just Pulled\n\n\n\nYou must resolve this conflict.  If you do not resolve this conflict, then you will not be able to Push or Pull any more Commits to or from the Github Repository.  This is Git funneling the conflict to you.\n\n\n7.2 Viewing a file in conflict\nThe conflicted file will be listed in the Staging Area with a yellow U. Git adds markers to the conflicted file in your Git Repository to show where the conflicts are in both versions of the file (your version and the Pulled version).  You can see the conflicted areas of the file in the Git Review Changes window (this is also called the Git Diff) and in the file viewer window:\n\n\n\n\n\n\nFigure 9: A file with unresolved conflicts in the Git Review Changes window\n\n\n\n\n\n7.3 How conflicts are displayed (the markers)\nThere are lines added by Git, called markers, to delineate where the conflicts are.\n \nThere are two conflict areas in Figure 9 :\n\nline 2\nlines 7 and 8\n\n \nThe start of both conflicts is given by the marker:\n &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nand the end is given by the marker:\n &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (the 40 digit Git Commit SHA)\nIn between are the two versions of the conflicting lines is the marker:\n ==========\nPutting it all together:\n &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; HEAD\n\nThe local version of the lines in conflict\n ==========      \n\nThe GitHub Repository version of the lines in conflict\n &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; (40-digit SHA)   \n\n\n7.4 Editing the conflicted file to remove the conflict\nIn the file editor, the conflicted file looks like this:\n\n\n\n\n\n\nFigure 10: The same file in the editor tab\n\n\n\nYour job is to fix the conflicted lines and remove the markers.  Once you have done that you can save the file, Stage it, Commit it, and Push to GitHub.  This will become the official new version of the file in the latest Commit.\n \nWARNING!\nGit will accept any changes you make as long as you get rid of the markers.  Git does not double-check to see if you did a good job merging the conflicted lines, Git just assumes you knew what you were doing when you Committed the change.  So, be a good collaborator here and be careful!",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#issue-4-cannot-push-or-pull-if-there-is-an-unresolved-conflict",
    "href": "tutorials/Git/07-Conflicts.html#issue-4-cannot-push-or-pull-if-there-is-an-unresolved-conflict",
    "title": "07: Issues and Conflicts",
    "section": "8 Issue 4: Cannot Push or Pull if there is an unresolved conflict",
    "text": "8 Issue 4: Cannot Push or Pull if there is an unresolved conflict\nWhen you are in a conflict state, you will get an error when you try to Push or Pull Commits.  Git will not allow you to Push or Pull when any file is in conflict.\n\n8.1 Error message on Push\nIf you try to Push a Commit and you did not resolve all the conflicts, you will get this message:\n\n\n\n&gt;&gt;&gt; C:/Program Files/Git/bin/git.exe commit -F C:/Users/Charlie/AppData/Local/Temp/RtmpOgnoHW/git-commit-message-3e302184454d.txt\nerror: Committing is not possible because you have unmerged files.\nhint: Fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'\nhint: as appropriate to mark resolution and make a commit.\nfatal: Exiting because of an unresolved conflict.\nU scripts/test1.r\n\n\nFigure 11: Error when trying to Push while your project is in conflict\n\n\n\nIn this case, Git is telling you that you still need to resolve the conflict in test1.r.\n\n\n8.2 Error message on Pull\nYou can get 2 error messages if you try to Pull while in conflict.  The error depends on whether the conflicted file(s) are staged (checked) or unstaged (unchecked):\n \nError when trying to Pull and there is an unresolved conflict with a staged file:\n&gt;&gt;&gt; C:/Program Files/Git/bin/git.exe pull\nerror: You have not concluded your merge (MERGE_HEAD exists).\nhint: Please, commit your changes before merging.\nfatal: Exiting because of unfinished merge.\nError when trying to Pull and there is an unresolved conflict with an unstaged file:\n&gt;&gt;&gt; C:/Program Files/Git/bin/git.exe pull\nerror: Pulling is not possible because you have unmerged files.\nhint: Fix them up in the work tree, and then use 'git add/rm &lt;file&gt;'\nhint: as appropriate to mark resolution and make a commit.\nfatal: Exiting because of an unresolved conflict.\nEither way you need to fix the conflict, Commit the fixed file(s), and Push the Commit.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#which-files-are-in-conflict",
    "href": "tutorials/Git/07-Conflicts.html#which-files-are-in-conflict",
    "title": "07: Issues and Conflicts",
    "section": "9 Which files are in conflict",
    "text": "9 Which files are in conflict\nYou can use the Terminal to find out which files are in conflict.\n \nThis will list all the conflict markers in all files in your project:\ngit diff --check\nThis will list just the files that have conflict markers in them:\ngit diff --name-only --diff-filter=U",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#application",
    "href": "tutorials/Git/07-Conflicts.html#application",
    "title": "07: Issues and Conflicts",
    "section": "10 Application",
    "text": "10 Application\nGive a scenario where a conflict would occur and explain how the four issues mentioned in this lesson isolate the conflict to a local computer.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/07-Conflicts.html#extension-a-successful-merge-of-files",
    "href": "tutorials/Git/07-Conflicts.html#extension-a-successful-merge-of-files",
    "title": "07: Issues and Conflicts",
    "section": "11 Extension: A successful merge of files",
    "text": "11 Extension: A successful merge of files\nGit will try to merge files that have been modified in multiple places and Git will usually succeed if different lines were modified.\n \nHere is the message you will get when you Pull and Git successfully merges the conflicted files on its own:\n\n\n\n&gt;&gt;&gt; C:/Program Files/Git/bin/git.exe pull\nFrom https://github.com/qfcatmsu/githubstarter\nba13ace..b07eb63 master -&gt; origin/master\n«Merge made by the 'recursive' strategy.»\nscripts/test1.r | 4 ++++\n1 file changed, 4 insertions(+)\n\n\nFigure 12: File changes that were resolved using a recursive strategy!\n\n\n\nThe recursive strategy is basically Git going line-by-line in the code and figuring out that the changes occurred in different parts of the file – so they do not conflict.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "07: Issues and Conflicts"
    ]
  },
  {
    "objectID": "tutorials/Git/05-Diff.html",
    "href": "tutorials/Git/05-Diff.html",
    "title": "05: Diff",
    "section": "",
    "text": "Explain how a Diff will only be between two versions of a file because Git will never allow there to be more (refer back to funneling conflicts)\nCheck Diff between any 2 versions of a file",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "05: Diff"
    ]
  },
  {
    "objectID": "tutorials/Git/05-Diff.html#purpose",
    "href": "tutorials/Git/05-Diff.html#purpose",
    "title": "05: Diff",
    "section": "1 Purpose",
    "text": "1 Purpose\nExplore how Git shows how files change between Commits – as shown in the Git Diff.  The Diff is often used when dealing with file conflicts.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "05: Diff"
    ]
  },
  {
    "objectID": "tutorials/Git/05-Diff.html#the-staging-area",
    "href": "tutorials/Git/05-Diff.html#the-staging-area",
    "title": "05: Diff",
    "section": "2 The Staging Area",
    "text": "2 The Staging Area\nWhen you the Git tab in an RStudio Project, what you see is the Staging Area.  The Staging Area lists all files (not in .gitignore) that have uncommitted changes.  This means the file is new or was modified, deleted, or renamed since the last it was committed.  Checking a file is called Staging the file and it means that the changes to this file will be written to the next Commit.\n\n\n\n\n\n\nFigure 1: Files in the Staging Area (unchecked=unstaged, checked=staged)\n\n\n\nNote: If you click on Commit, the exact same Staging Area will appear in the top-left corner\n\n2.1 Right and left-side status codes\nUnstaged files show a status on the right-side of the Status column (Figure 1).  When the file is checked, the file is Staged and the code switches to the left-side of the Status.  If the file has been renamed or the file is new, then the Status code will change.\n \nNote: the ? Status code is the only code shown on both sides when the new file is Unstaged.  I consider this to be a minor bug – to be consistent, the ? code should only be on the right-side.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "05: Diff"
    ]
  },
  {
    "objectID": "tutorials/Git/05-Diff.html#file-options-in-staging-area",
    "href": "tutorials/Git/05-Diff.html#file-options-in-staging-area",
    "title": "05: Diff",
    "section": "3 File options in Staging Area",
    "text": "3 File options in Staging Area\nWhen a file is in the Staging Area, you can also right-click on it and get the following four options:\n\nDiff: shows the changes to the files since it was last committed\nRevert…: undoes changes to file\nIgnore…: adds the file to .gitignore\nOpen File: opens file in viewer (if the file was not deleted)\n\n\n\n\n\n\n\nFigure 2: Right-click options for a file in the Staging Area – the two Staging Areas are equivalent\n\n\n\nWe are going to take these options in reverse order, which is roughly the order of complexity and importance.\n\n3.1 Open File\nOpen File just opens the file in the File Viewer (top-left window in RStudio). The Open File option will be available to you even if the file has been deleted but it will give you an error if you try to open a deleted file.\n\n\n3.2 Ignore… (this option is not recommended)\nIgnore adds the file to .gitignore meaning that changes to the file will not be reflected in your Git Project (i.e., the book).\n \nHowever, if you want to ignore a file, it is best to edit the .gitignore file in the Project Folder.\n \nFor example, to ignore test2.r in the scripts folder, add this line to .gitignore:\nscripts/test2.r\n\n3.2.1 Issues with the right-click, Ignore… option\nThe right-click, Ignore option will create a new .gitignore file in the folder that the file is in.\n \nSo, if you want to ignore test2.r in the scripts folder, this option will create a .gitignore file in scripts and add the following line:\ntest2.r\nThis works but it is easier to maintain all of your ignores in one .gitignore file – that is why I recommend manually editing the .gitignore in the Project Folder over using the right-click option.\n\n\n3.2.2 How to ignore a file that has already been indexed (advanced)\nThe above instructions only work if test2.r has never been written to a chapter (i.e., never been committed). If you want to ignore a file that has already been committed, you have to first remove the file from the index using the Terminal:\ngit rm \"data/doNotWantThis.R\" -f\nMore information is here (the second option):\nhttps://stackoverflow.com/questions/45400361/why-is-gitignore-not-ignoring-my-files\n\n\n\n3.3 Revert\nRevert will undo all of the changes to the file since it was last committed to the book. Effectively, Revert replaces the file with the version of the file that existed when you last wrote the file into your book. The main reason to use Revert is when there is a file conflict, which is much more likely to happen when you are collaborating with others (a subject for a later lesson)–however, this is useful if you know you made changes that you do not like and just want a simple way to undo those changes. \n\n\n3.4 Diff\nDiff will show you all of the changes made to the content of your file since the last time the file was committed. Or, if this is the first time the file is committed, then it will show all the content of the file (i.e., the difference is the whole file). Diffs are shown in the bottom section of the Review Changes windows – right window in Figure 2 .  Commits are at the core of Git and Diff is at the core of Commits.\n \nDiff is what is written to a chapter whenever the content of a file changes. For the rest of this lesson, we are going to take a much deeper dive into how Diff works…",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "05: Diff"
    ]
  },
  {
    "objectID": "tutorials/Git/05-Diff.html#understanding-the-diff",
    "href": "tutorials/Git/05-Diff.html#understanding-the-diff",
    "title": "05: Diff",
    "section": "4 Understanding the Diff",
    "text": "4 Understanding the Diff\nAs a reminder, there are four types of file changes that are written to a chapter:\n\nFile is added (Diff shows added lines)\nFile is removed (Diff shows removed lines)\nFile is renamed\nFile is modified (Diff shows added and removed lines)\n\n \nGit goes line-by-line in your script and determines what lines have been added or removed. When you are dealing with file conflicts (next lesson), Diff indicates where the conflicts are occurring. For now, we are going to learn how to read the Diff.\n\n4.1 Adding a file (all lines added)\nIn this example, I added a file named test4.r to the scripts folder. The file has the following 6 lines:\naaa\nbbb\nccc\nddd\neee\nfff\nAfter you Stage the file in the Staging Area (i.e., the file has been checked), the Diff section (bottom part of window) will show all the lines in the file highlighted in green. The green highlighted lines just say that the line was added. Since this is a new file, all the lines in it were added.\n\n\n\n\n\n\nFigure 3: Looking at Diff when a file is added\n\n\n\n\n\n4.2 Removing a file (all lines removed)\nIf test4.r gets deleted, Diff will indicate this by showing every line highlighted in red.  This is basically the same as saying that every line in the file got deleted.\n\n\n\n\n\n\nFigure 4: Looking at Diff when a file is deleted\n\n\n\n\n\n4.3 File is renamed\nIn this case, test4.r gets renamed to test5.r. Before Staging the changes Git sees test4.r as a deleted file and test5.r as an unknown file.  This is because test5.r has never been indexed so Git does not know to relate the files yet.\n\n\n\n\n\n\nFigure 5: A renamed file in the Staging area before Staging\n\n\n\nAfter Staging (i.e., the files have been checked), Git sees the file as renamed, and the Diff shows all the lines highlighted in green.  Note: the author finds the green highlighting to be weird as this is not a new file and the lines have not been added – I would assume the lines would have no highlighting.\n\n\n\n\n\n\nFigure 6: A renamed file after Staging – the Diff area shows all the lines highlighted in green\n\n\n\n\n\n4.4 Modifying a file – lines added and deleted\nMost of the time, we are writing file modifications to the chapters. This almost always means that lines are being added and deleted (i.e., you will see red and green highlighted lines in the Diff).\n \nThere are two general rules here:\n\nIf a line has been modified, Git sees this as an old line being deleted and a new line being added\nGit remembers the order of the original lines so, if lines are put in between, Git will adjust \n\n \nLet’s change\naaa\nbbb\nccc\nddd\neee\nfff\nInto:\nbbb\n111\ncccc\n222\nddd\nfff\neee\n333\nHere is what the Diff looks like in Git:\n\n\n\n\n\n\nFigure 7: A modified file in the Diff – lines have been added (green) and deleted (red)\n\n\n\nWe are going to take a step back and look at simpler examples and get back to this one, but for now, I want you to see the features of the Diff:\n\nthe first column is the line number in the file that was previously committed\nthe second column is the line number in the file that has been staged\na white background means that Git determined that the line did not change (even if the line number did)\na red background means that Git determined the line was deleted\na green background means that Git determined the line was added\n\n \n\n\n\n1   aaa  (red - deleted)\n2 1 bbb  (white - no change - but line was moved)\n3   ccc  (red - deleted)\n  2 111  (green - added)\n  3 cccc (green - added)\n  4 222  (green - added)\n4 5 ddd  (white - no change - but line was moved)\n5   eee  (red - deleted)\n6 6 fff  (white - no change - line stayed the same)\n  7 eee  (green - added)\n  8 333  (green - added)\n\n\nFigure 8: A different visual representation of the Diff",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "05: Diff"
    ]
  },
  {
    "objectID": "tutorials/Git/05-Diff.html#diff-changes",
    "href": "tutorials/Git/05-Diff.html#diff-changes",
    "title": "05: Diff",
    "section": "5 Diff changes",
    "text": "5 Diff changes\nIn this section, we are going to look at how Diff reflects individual changes to a file. The examples we will look at are:\n\nAdding a line\nRemoving a line\nModifying a line\nSwitching two lines\n\n\n5.1 Adding a line\nLet’s change:\naaa\nbbb\nccc\nddd\neee\nfff\nInto:\naaa\nbbb\nccc\n«111»\nddd\neee\nfff\n\n\n\n\n\n\nFigure 9: Diff with one line added to file\n\n\n\nGit sees that line 4 (111) was added to the file and shades that line green.  Git also sees that the lines underneath line 4 were unchanged even though their position was changed. The Diff reflects the line number change but the lack of shading indicates that the content of the lines below line 4 did not change.\n\n\n5.2 Removing a line\nLet’s change\naaa\nbbb\n«ccc»\nddd\neee\nfff\nInto:\naaa\nbbb\nddd\neee\nfff\n\n\n\n\n\n\nFigure 10: Diff with one line removed from file\n\n\n\nGit sees that line 3 (ccc) was removed from the file and shades that line red. Git also sees that the lines underneath line 3 were unchanged even though their position was changed. Like before, Diff reflects the line number change, but the lack of shading indicates that the content of the lines below line 3 did not change.\n\n\n5.3 Modifying a line\nLet’s change:\naaa\nbbb\nccc\nddd\neee\nfff\nInto:\naaa\nbbb\n«ccc1»\nddd\neee\nfff\n\n\n\n\n\n\nFigure 11: Diff with one line modified from file\n\n\n\nIn this case, the Diff shows a line that was deleted (ccc) and a line that was added (ccc1). Whenever there is a change to a line, Git assumes the line got deleted and was replaced with a new line. This is true even if the line only changed by 1 character.\n\n\n5.4 Switching lines\nLet’s change\naaa\nbbb\nccc\nddd\neee\nfff\nInto:\naaa\nbbb\n«ddd»\n«ccc»\neee\nfff\n\n\n\n\n\n\nFigure 12: Diff with two lines switched\n\n\n\nThis example best shows how Git thinks about changes. The Diff shows that three things have happened:\n\nLine 3 (ccc) was deleted\nLine 4 (ddd) was moved to line 3\nLine 4 (ccc) was added\n\n \nEven though the content of the deleted line 3 and the added line 4 are exactly the same (ccc), Git does not see these as the same lines.\n \nGit looks at the order of the lines and saw that ddd was moved up from line 4 to line 3. Git assumed at that point that ccc was deleted. The ccc that comes after ddd is seen by Git as an added line.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "05: Diff"
    ]
  },
  {
    "objectID": "tutorials/Git/05-Diff.html#returning-to-the-complex-diff-example",
    "href": "tutorials/Git/05-Diff.html#returning-to-the-complex-diff-example",
    "title": "05: Diff",
    "section": "6 Returning to the complex Diff example",
    "text": "6 Returning to the complex Diff example\nLet’s go back to the example in Section 4.4 . The Diff here shows that multiple lines in the file were changed and it also shows what both versions of the file looked like.\n \nThe first columns shows that there were six lines in the previous version of the file: \n\nLines 1, 3, and 5 were deleted (red)\nLines 2, 4, and 6 were kept (white)\n\n \nThe second column shows that there were eight lines in the new version of the file:\n\nLines 2, 3, 4, 7, and 8 were all added (green)\nLines 1, 5, and 6 come from the previous versions lines 2, 4, and 6\n\n \nWhen line 3 was changed from ccc to cccc Git sees this as:\n\nline 3 (previous version) was deleted\nline 3 (new version) was added\n\nAny change to a line means that Git will think the line was deleted and a new line was added.\n \nWhen line 5 eee was moved to line 7 below line 6 fff, Git saw this as:\n\nline 5 (previous version) was deleted\nline 7 (new version) was added\n\nIf the lines in the previous version change order, the upper lines will be seen as deleted by Git.\n\n\n\n\n\n\nFigure 13: The Diff showing two versions of a file and the changes between them",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "05: Diff"
    ]
  },
  {
    "objectID": "tutorials/Git/05-Diff.html#application",
    "href": "tutorials/Git/05-Diff.html#application",
    "title": "05: Diff",
    "section": "7 Application",
    "text": "7 Application\nA) What will the Diff look like if you change:\ncheeseAns = readline(\"What is the best cheese in the world?\");\n\nif(cheeseAns == \"swiss\")\n{\n  cat(\"Swiss is so bland\");\n}\nelse if(cheeseAns == \"cheddar\")\n{\n  cat(\"Cheddar is good, but there is better.\");\n}\nelse if(cheeseAns == \"Muenster\")\n{\n  cat(\"Ah, yes, you are a true cheese aficionado!\");\n}\nelse\n{\n  cat(\"Sorry, I did not understand your response!\");\n}\nto this (only the order of the else ifs has changed):\ncheeseAns = readline(\"What is the best cheese in the world?\");\n\nif(cheeseAns == \"swiss\")\n{\n  cat(\"Swiss is so bland\");\n}\nelse if(cheeseAns == \"Muenster\")\n{\n  cat(\"Ah, yes, you are a true cheese aficionado!\");\n}\nelse if(cheeseAns == \"cheddar\")\n{\n  cat(\"Cheddar is good, but there is better.\");\n}\nelse\n{\n  cat(\"Sorry, I did not understand your response!\");\n}\nB) Create a folder named appAnswers in your Project Folder and put your answer in this folder\n \nC) Push your changes to GitHub and notify belinsky@msu.edu that the changes are there",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "05: Diff"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html",
    "href": "tutorials/Git/03-Push_Pull.html",
    "title": "03: Push and Pull",
    "section": "",
    "text": "show Terminal commands\nCollab with self section\nWorkshop:\n\nempty files do not go into book",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#purpose",
    "href": "tutorials/Git/03-Push_Pull.html#purpose",
    "title": "03: Push and Pull",
    "section": "1 Purpose",
    "text": "1 Purpose\nTo understand how repositories get synced between Git and GitHub.  To do this we are going to create a copy of your repository so you can quickly and easily test out the collaboration feature.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#tasks",
    "href": "tutorials/Git/03-Push_Pull.html#tasks",
    "title": "03: Push and Pull",
    "section": "2 Tasks",
    "text": "2 Tasks\n\nPush changes to your GitHub repository\n\nModify (add, remove, edit) any file in your RStudio Project (Section 4.1)\nAdd a commit message (Section 4.3)\nCommit changes to Project (Section 4.4)\nPush changes to GitHub (Section 4.5)\n\nPull changes from a GitHub repository\n\nGet URL of your GitHub repository (Section 5.1)\nCreate a new RStudio Project and link it to your GitHub Repository (Section 5.2)\nMake change to the original Git repository and Push to GitHub (Section 6)\nPull changes from GitHub to the copy of your repository (Section 6.1)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#rstudio-projects-git-repositories-and-github-repositories",
    "href": "tutorials/Git/03-Push_Pull.html#rstudio-projects-git-repositories-and-github-repositories",
    "title": "03: Push and Pull",
    "section": "3 RStudio Projects, Git repositories, and GitHub repositories",
    "text": "3 RStudio Projects, Git repositories, and GitHub repositories\nIt is important to distinguish the difference between these three objects that are all related to your project\n \n\nRStudio Project:  A *.RProj file is attached to an RStudio Project folder.  This makes the project folder the Working Directory in R and every file inside the project folder (and subfolders) is a part of the RStudio Project.\nGit repository: A Git repository is attached to a project folder but not every file inside the folder has to be a part of the repository.  A .gitignore file is placed in the folder and it list all files that are excluded from the repository.  There is also a hidden .git folder added that contains the history of your project (don’t touch this!)\nGitHub repository: A Git repository that is put on GitHub.  A GitHub repository is used to both share your Git repository and to collaborate with others (i.e., they can clone your GitHub repository to a Git repository on their computer)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#sec-commit_push",
    "href": "tutorials/Git/03-Push_Pull.html#sec-commit_push",
    "title": "03: Push and Pull",
    "section": "4 Sending changes to GitHub",
    "text": "4 Sending changes to GitHub\nThe first thing we are going to do is change the files in your Git repository/RStudio Project and sync those changes to the GitHub repository created in the last lesson.\n \nThis process is much more complicated than syncing to a cloud folders (e.g., Google Drive, OneDrive), which automate the syncing of your folders and files.  Git does not automate anything – you need to explicitly tell Git to sync your project.\n \nThis might seem painful at first but it is because Git  is a powerful program with advanced versioning capabilities that go far beyond cloud folders.  Extension: Versioning\n \nThe steps for syncing your project change to a GitHub are (note: the bold terms are Git-specific terms):\n\nMake changes (add/modify/delete) to files in your project (Unstaged Changes) \nApprove the changes you have made (Staging)\nAdd information about the changes you have made (Commit Message)\nSave the approved changes to the Git repository (Commit)\nSend changes to the GitHub repository (Push)\nVerify the changes on GitHub\n\n\n4.1 Make changes to your project (add, delete, or modify)\nThe images below (Figure 1) shows an example project in which the following files were added:\n\ntest1.r and test2.r was added to the scripts folder\ntestData.csv was added to the data folder  \n \n\nLooking at the Git tab, you will see the three files that have been modified:\n\n\n\n\n\n\nFigure 1: Git tab and the Commit button\n\n\n\n\n4.1.1 Git and folders\nOne thing to notice is that the three files modified in the Git tab (Figure 1) have their folder name attached. In Git, folders are part of the file name.\n \nIn other words, Git does not see a folder named scripts that has two files named test1.r and test2.r.\nInstead, Git sees two files named scripts/test1.r and scripts/test2.r\n\n\n\n4.2 Approve changes Unstaged –&gt; Staged\nTo approve all of the changes you have made, press the Commit button in the Git tab and the Review Changes window appears. Check all the files (Figure 2) in the left window. Be patient, the checkboxes sometimes take a few seconds to switch states. Extension: Approving (staging) a large number of files\n \nGit calls the approval process staging.  You do not have to approve every file change.  In future lessons, we will talk about the reasons to not approve changes you have made to files.\n\n\n\n\n\n\nFigure 2: Creating a new Commit for your project\n\n\n\n\n\n4.3 Add information about these change (Commit Message)\nInformation about the changes is put into the Commit message textbox (Figure 2).  The message should be a short description of the changes you have made and this message gets saved along with the file changes.  The Commit message act as documentation, like script comments, and can be viewed when looking at the history of the project (something we will do in a later lesson).\n \nYou should not skip this step when you are working on a large project as it can be really helpful to see this documentation later on.\n\n\n4.4 Save the approved changes (Commit)\nEverything in Git is centered around the Commit and in the next lesson we will go in great detail about what a Commit is.  Right now your RStudio Project has changes that your Git repository does not.  The Commit brings your Git repository up-to-date.\n \nClick the Commit button in the Review Changes window (Figure 2) and a Git Commit window similar to this (Figure 3) will appear that gives a summary of the changes:\n\n\n\n\n\n\nFigure 3: The Git Commit window that appears after you click Commit.\n\n\n\nYou can close the Git Commit and Review Changes windows\n \nExtension: Using the Terminal to send Commits to GitHub\n\n\n4.5 Sending the newest Commits to GitHub (Push)\nAt this point, the changes to your Git repository (i.e., the Commit) exists only on your computer. Your GitHub repository and your Git repository are not in sync (i.e., they do not have the same version of your project). To sync your Git repository to GitHub, you need to send the latest Commit.  This is done with a Push. You can Push in the Git tab by clicking on the green up arrow:\n\n\n\n\n\n\nFigure 4: Pushing to GitHub\n\n\n\nA window will come up giving the results of the Push with a brief description of the changes. You can close the window.\n \nYou will usually Push new project Commits right after you create them; however, this is sometimes not possible (e.g., you don’t have an internet connection), or not desirable (e.g., you have changes you do not want to share with collaborators). You can Push new project Commits at a later time.\n \nExtension: Broken Authentication (Git Push hangs)\n\n\n4.6 Verifying the change on GitHub\n02-GitHub_Setup.html#sec-verifyGitHub",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#linking-rstudio-projects-and-github-repositories",
    "href": "tutorials/Git/03-Push_Pull.html#linking-rstudio-projects-and-github-repositories",
    "title": "03: Push and Pull",
    "section": "5 Linking RStudio Projects and GitHub repositories",
    "text": "5 Linking RStudio Projects and GitHub repositories\nThe main reason to link a Git repository to a GitHub Repository is to sync your project between multiple locations using the GitHub Repository as the central location (e.g., your hub).  The best way to understand how this works is to practice syncing between locations.\n \nSince most people reading this are working on their own, we are going to sync your project to two different locations on your own computer.  Creating two copies of your project allows you to test Git’s collaboration features by yourself. As far as Git and GitHub are concerned, the two copies of your Project might as well be on two separate computers that are 10,000 miles apart.\n\n5.1 Syncing your project from GitHub\nIn the last lesson, we synced an existing RStudio Project to a new GitHub Repository. To do that, we needed to send Git commands through the command-line interface and we did that using the Terminal in RStudio.\ngit add -A && git commit -m \"added Git\"\ngit remote add origin \"https://github.com/myUserName/myRepository.git\"\ngit push -u origin master\nIn this lesson, we are going to create a new RStudio Project and sync it to an existing GitHub repository.  It is actually easier to do this!\n \nFor this to work, you need the URL of your GitHub repository, which is always in this form:\nhttps://github.com/&lt;myUserName&gt;/&lt;myRepository&gt;.git\n\n\n5.2 Link to an existing GitHub Repository \nWe are going to create an RStudio Project that is also a Git repository and link it to a GitHub repository.  This process can be used to link any GitHub repository in RStudio.\n \n&lt; You can put the second copy of your RStudio Project anywhere on your computer except inside the first RStudio Project. – move later &gt;\n \nTo create a new RStudio Project/Git repository and sync your existing GitHub repository to it:\n\nOpen up RStudio\nClick File -&gt; New Project… (a Create Project window appears)\nClick Version Control\nClick Git (a Clone Git Repository window appears)\n\n\n\n\n\n\n\nFigure 5: Git Version Control option in RStudio\n\n\n\n\nIn the Clone Git Repository Window\n\nRepository URL: paste your GitHub URL here\nProject directory name: the local project name, it defaults to the name of the repository and becomes the name of the Project Folder for your RStudio Project\n\nnote: You can change the name – Git does not care if your RStudio Project and Git repository have different names\n\nCreate project as subdirectory of: click Browse and select the folder location for the Project Folder that will contain the repository.\n\nIn Figure 6, I put it on my Desktop/GitHub folder.\nThis is not your project folder, this is the folder that contains your project folder.\n\nclick Create Project\n\n\n \n\n\n\n\n\n\nFigure 6: The Clone Git Repository window\n\n\n\nAfter you click Create Project, a window will appear that tells you all the files that are being synced (it will flash by quickly) and then RStudio will open to the new RStudio Project.\n\n\n5.3 Two copies of your RStudio Project\nAt this point you should have two copies of your Git repository on your computer.  Both of these copies are linked to the same GitHub repository.  Again, you would not normally do this but it allows you to practice syncing to-and-from a GitHub repository on your own.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#sec-update",
    "href": "tutorials/Git/03-Push_Pull.html#sec-update",
    "title": "03: Push and Pull",
    "section": "6 Updating your Git and GitHub repositories",
    "text": "6 Updating your Git and GitHub repositories\nIn this section you are going to make changes to one copy of your Git repository, send the changes (Push) to GitHub, and the receive the changes (Pull) at the other copy of your Git repository.\n \nTo make changes to your project (add, delete or, modify files), repeat the first five steps in Section 4\n \nAfter step 5, the new Commit with the changes you have made to your Git repository have been sent to GitHub.\n \nNote: in the following section we will update your second project with the changes on GitHub.  This process would be exactly the same if the project folder was on another computer.\n\n6.1 Getting updates (Pull) from GitHub\nWhen a GitHub repository gets updated, the updates are not automatically downloaded to your local repository.  In Git, actions like requesting updates need to be explicitly stated.\n\nOpen up the copy of your Git repository, which currently has an older version of your project.\n \nTo get the updates (i.e., latest Commits), you need to send a request.  Git calls this request a Pull and you perform a Pull by clicking on the blue down arrow in the Git tab:\n\n\n\n\n\n\nFigure 7: Pulling from GitHub\n\n\n\n\n\n6.2 Results of a Pull request\nA window will come up giving the results of the Pull. If there are no updates, the window will say: Already up to date. You can close the window.\n \nIn Figure 8, the results show that 3 files were changed as a result of the Pull.  The number after the file name is how many lines were changed and + and - tell you whether something was added or deleted.  You can click Close.\n\n\n\n\n\n\nFigure 8: The results of a Pull command\n\n\n\n\n\n6.3 Importance of pulling project changes\nWhen you are working collaboratively on a project in a GitHub repository, it is best to to get the latest version of the project by doing a Pull before you make any changes.  You (almost always) want to make sure you are working on the latest version of the project.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#the-complexity-of-git",
    "href": "tutorials/Git/03-Push_Pull.html#the-complexity-of-git",
    "title": "03: Push and Pull",
    "section": "7 The complexity of Git",
    "text": "7 The complexity of Git\nThe first few lesson were designed to get you using Git and GitHub.  The next few lesson will take a deeper dive into what is going on behind the scenes.  One of the main goals of Git is to isolate the problems that occur when multiple people are working asynchronously on the same file.  If you working collaboratively on a project then understanding how Git works will keep you out of a lot of trouble.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#application",
    "href": "tutorials/Git/03-Push_Pull.html#application",
    "title": "03: Push and Pull",
    "section": "8 Application ",
    "text": "8 Application \nA) For the Git/GitHub sandbox repository: &lt;make sure this is the one I have been added to&gt;\n\ndelete one file from the repository\nmodify another file in the repository\nrename a file\nadd a file\n\n \nB) Commit the changes to your repository with a Commit message that clearly states all the changes you made.\n \nC) Push the changes to GitHub\nnote: if Push fails, it is probably because the instructor forgot to add you the repository.  Politely email him a reminder of this fact…",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#extension-approving-staging-a-large-number-of-files",
    "href": "tutorials/Git/03-Push_Pull.html#extension-approving-staging-a-large-number-of-files",
    "title": "03: Push and Pull",
    "section": "9 Extension: Approving (staging) a large number of files",
    "text": "9 Extension: Approving (staging) a large number of files\nRStudio’s Git tab can be very slow with staging a large number of files.  If all you want to do is stage every single changed file and there are a lot of files then it is probably quicker to go into the Terminal tab and type:\n$ git add -A\nThis will quickly stage every changed file in your Git tab.\n \nRStudio versions previous to 2025.05 have a bug in which staging a large number of files can cause RStudio to hang in Windows.  If this happens, you need to delete the index.lock file inside the .git folder in your project folder.  The .git folder is hidden.  You can view it in RStudio’s Files tab by clicking More -&gt; Show hidden files.  After deleting index.lock, you can go to the Terminal and type git All -A to avoid the problem.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#files-added-to-rstudio-projects-by-git",
    "href": "tutorials/Git/03-Push_Pull.html#files-added-to-rstudio-projects-by-git",
    "title": "03: Push and Pull",
    "section": "10 Files added to RStudio Projects by Git",
    "text": "10 Files added to RStudio Projects by Git\nWhen you create an RStudio Project and add Git to it, two files are created in the Project Folder (Figure 9): .gitignore and *.RProj (RProj was explained in &lt;lesson1??&gt;)\n \nNote: If your File Manager is set to view hidden files and folders then you will also see two folders: .git and .RProj.user – you do not need to do anything with these folders.\n\n\n\n\n\n\nFigure 9: .gitignore and *.RProj – in RStudio Files tab and Windows folder viewer\n\n\n\n\n10.1 .gitignore (added by Git)\n.gitignore is a text document that lists all folders and files that are ignored when syncing your RStudio Project to the GitHub Repository. In other words, folders and files listed in .gitignore are not uploaded to the GitHub repository.\n \nSome reasons for not sharing folders and files are that they:\n\nonly have meaning on the local computer (e.g., history files or temporary files)\nare generated by the scripts and do not need to be synced (e.g., images or simulated data – you do not want to keep uploading and downloading simulated data).\n \n\n.gitignore starts with four files (Figure 10). \n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\n\n\n\n\n\n\nFigure 10: The .gitignore file\n\n\n\n\n10.1.1 Editing .gitignore\nYou can edit .gitignore in RStudio (or any other text-editor).\n \nI recommend adding two lines to .gitignore (Note: * is a wildcard character):\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\n~*\ndoNotSync/\n\n*: filenames that start with a tilde  ( ~ ) – these are temporary files\n\ndoNotSync: anyone who syncs this project can create a doNotSync folder that will remain local-only\n \nOther files you might want to include:\n\nimages and videos: *.jpg, *.png, *.mp4 (especially if your code generates these files)\n \n\nNote: .gitignore is a project file – so everyone who sync a project uses the same .gitignore.  \nignoring files on one instance of your project",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#extension-broken-authentication-git-push-hangs",
    "href": "tutorials/Git/03-Push_Pull.html#extension-broken-authentication-git-push-hangs",
    "title": "03: Push and Pull",
    "section": "11 Extension: Broken Authentication (Git Push hangs)",
    "text": "11 Extension: Broken Authentication (Git Push hangs)\nThe Push can only happen if you have successfully authenticated your computer with GitHub (from last lesson).\n \nIt is rare but this authentication can break and the only sign that the authentication is broken is that the Push will just hang without an error message.\n \nThe easiest solution to fix a broken authentication is to:\n\nclose RStudio completely\nreinstall Git and Git Configuration Manager (GCM)\nopen your RStudio Project and retry the Push\n \n\nThis should reset the authentication and ask you for your GitHub password.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#extension-using-the-terminal-to-send-commits-to-github",
    "href": "tutorials/Git/03-Push_Pull.html#extension-using-the-terminal-to-send-commits-to-github",
    "title": "03: Push and Pull",
    "section": "12 Extension: Using the Terminal to send Commits to GitHub",
    "text": "12 Extension: Using the Terminal to send Commits to GitHub\nThe process to send project changes to GitHub is somewhat convoluted due to there being many options that are beyond this lesson.\n \nSo, most of the time you just want to:\n\nCreate a new Commit of your project with all the file and folder changes\nSend the new Commit to GitHub\n\n \nThis can also be done by typing the following in RStudio’s Terminal tab:\ngit add -A && git commit -m \"Put a commit message here\"\n\n12.1 Create the shortcut (only need to do once per computer)\nYou can create a shortcut, which I call acpush\n \nIn the Terminal tab of RStudio type (or copy/paste). \ngit config --global alias.acpush '!f() { git add -A && git commit -m \"$@\" && git push; }; f'\n\n\n12.2 Using the acpush shortcut\nThe above command created an alias in Git called acpush.  acpush creates a new Commit of your project with all file changes, attaches the commit message,  and pushes the new Commit to GitHub.\n \nTo use acpush, in the Terminal tab type:\ngit acpush \"Your new commit message\"\nand you can skip using the Git tab whenever you just want to Commit all changes and send the Commit to GitHub",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#ignoring-files-on-one-instance-of-your-project",
    "href": "tutorials/Git/03-Push_Pull.html#ignoring-files-on-one-instance-of-your-project",
    "title": "03: Push and Pull",
    "section": "13 ignoring files on one instance of your project",
    "text": "13 ignoring files on one instance of your project\n.gitignore is meant to be the same for every instance of your project, whether it is on GitHub or other computers. For this reason, Git will not allow you to ignore .gitignore. When you change .gitignore, you are changing it for every instance of your project.\n \nIf you want to ignore files specific to your instance of the project beyond what is in .gitignore then you need to edit the file:\n&lt;Root Folder&gt;/.git/info/exclude\n \n.git is a hidden folder – you can see it in the RStudio Files tab by clicking More -&gt; Show Hidden Files\n \nYou can add folders and files to the end of the exclude file just like you would in .gitignore:\n\n\n\n# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n# *.[oa]\n# *~\n\n\nFigure 11: exclude file before it is edited – you can add folders and files starting at line 7",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#extension-versioning",
    "href": "tutorials/Git/03-Push_Pull.html#extension-versioning",
    "title": "03: Push and Pull",
    "section": "14 Extension: Versioning",
    "text": "14 Extension: Versioning\nBehind the scenes of both GitHub is Git. Git is a powerful version control system. Versions are like snapshots of your project, and these snapshots both provide a retrievable history for your project and can be shared between multiple platforms.\n \nGit does not store a copy of each version of your project, Git stores the changes between the versions. This is a subtle point to keep in the back of your head – it becomes increasingly important as you get more advanced with Git.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#extension-pulls",
    "href": "tutorials/Git/03-Push_Pull.html#extension-pulls",
    "title": "03: Push and Pull",
    "section": "15 Extension: Pulls",
    "text": "15 Extension: Pulls\nUp until now, all changes to your project have occurred on your computer. If new Commits were made elsewhere and pushed to GitHub then you need to Pull the newest Commit(s) from GitHub.\n \nPull gets the newest Commits from your project from your GitHub repository and saves it to your RStudio Project.\n \nYou need to do a Pull when:\n\nSomebody else sent a new Commit to the GitHub repository (e.g., your instructor might add some comments)\nYou sent a new project Commit from another computer\n \n\nNote: Even if neither of the above is true, it is a good idea to get into the habit of doing a Pull before you start working. If you are working in a team, this is imperative.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/03-Push_Pull.html#extension-downloading-github-repositories",
    "href": "tutorials/Git/03-Push_Pull.html#extension-downloading-github-repositories",
    "title": "03: Push and Pull",
    "section": "16 Extension: Downloading GitHub repositories",
    "text": "16 Extension: Downloading GitHub repositories\nIf you just want to download a Project that is in a GitHub repository and you do not care about updates then you can:\n\nGo to the page of the GitHub repository\n\nYou can use the GitHub repository you just creates or go to https://github.com/qfcatmsu/githubtest\n\nClick on the green Code button and choose Download ZIP\nSave the Zip file to your computer and unzip\nIf it is an RStudio Project, then double click on the .Rproj file to open (in this case, gitHubTest.Rproj)\n \n\nThis is a simple way to share your GitHub repository with people who are not your collaborators and do not care about the history/versions of your project.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "03: Push and Pull"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html",
    "href": "tutorials/Git/01-Git_Setup.html",
    "title": "01: Git Repositories",
    "section": "",
    "text": "Add terminology section\nput headless installation as extension\nAdd extension about deleting GitHub credentials in Windows\ngitignore: .DS_Store (Mac)\ngitattributes normalize text: auto (CR/LF issue)\nadd main git branch to config\n\nadd git init -b main\nalt: say\n\nWorkshop:\n\nGit is Linux based\nMain branch setup (add to git config ?)\n\ngit config –global init.defaultBranch main\n\nStaging area as a term",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#purpose",
    "href": "tutorials/Git/01-Git_Setup.html#purpose",
    "title": "01: Git Repositories",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nInstall Git and Git Credential Manager (GCM)\nAdd Git to your RStudio Project\nUnderstand the .gitignore file\n\n\n1.1 Prerequisites\n\nYou have installed a recent version of R and RStudio\n\nFor RStudio it is highly recommended to have at least version 2025.04 as RStudio fixed a major bug in their Git interface on Windows in that version\n\nYou have an RStudio Project\nYou can view hidden files and folders and see all file extensions (not required, but helpful)\n\n\n\n1.2 Tasks\n\nInstall and configure Git and Git Credential Manager (Section 4)\nGet a GitHub ID (Section 5)\nConfigure Git username and email (Section 6)\nCreate a Git repository in your RStudio Project folder (Section 7)\nEdit .gitignore (Section 8.1)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#what-is-git",
    "href": "tutorials/Git/01-Git_Setup.html#what-is-git",
    "title": "01: Git Repositories",
    "section": "2 What is Git",
    "text": "2 What is Git\nGit is versioning software – you use Git on your computer to create a retrievable history of your project.  With this project history, you can bring back previous versions of files or your entire Project.  Git calls this complete history a repository. For this class, we will use Git with an RStudio Project. However, Git can be used with any project.\n \nWhile Git is very powerful tool, it is not intuitive and there is a pretty high-barrier to entry – especially if you want to use it safely.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#rstudio-terminal-tab-to-configure-git",
    "href": "tutorials/Git/01-Git_Setup.html#rstudio-terminal-tab-to-configure-git",
    "title": "01: Git Repositories",
    "section": "3 RStudio Terminal tab to configure Git",
    "text": "3 RStudio Terminal tab to configure Git\nThe RStudio Terminal tab, located in the bottom-left corner next to the Console tab (Figure 1), is a very useful tool that is used to send system commands and it also be used to send Git commands.\n \nThe Terminal tab is the same as the Terminal app in Mac and the Command Prompt in Windows. We are going to use the Terminal tab multiple times to install, set up, and use Git.\n\n\n\n\n\n\nFigure 1: The Terminal Tab in RStudio\n\n\n\nTrap: The Console Tab and Terminal Tab",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#sec-installGit",
    "href": "tutorials/Git/01-Git_Setup.html#sec-installGit",
    "title": "01: Git Repositories",
    "section": "4 Installing Git and the Git Configuration Manager (GCM)",
    "text": "4 Installing Git and the Git Configuration Manager (GCM)\nThe Git Credential Manager (GCM) handles the authentication between Git and online places that store Git repositories like Azure, Bitlocker, and GitHub.\n \nThe section provides instructions for installing and setting up Git and GCM on different operating systems.\n\n4.1 Windows\nClick here to download and install Git, with the Git Configuration Manager built-in – click on Download for Windows (version as of March 2025 is 2.49.0)\n\nMake sure RStudio is closed while Git is being installed.\nYou can use all the default installation settings \n\n \nThe Git installer also installs and configures the Git Configuration Manager.\n\n\n4.2 Mac\nBefore you install Git on Mac, you need to install Homebrew. Homebrew is a very useful tool for programmers as it gives easy access to packages not included with Mac.\n \nGo to the homebrew page: https://brew.sh/\nCopy the command under Install Homebrew in the Terminal and execute.\n \nThe command as of March 2025 is:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nBut this could change. It is safest to just go to the Homebrew page and copy the link.\n\n4.2.1 Install Git and GCM using Homebrew\nInstall Git in the Terminal:\nbrew install Git\nInstall Git Credential Manager in the Terminal:\nbrew install --cask git-credential-manager\n\n\n\n4.3 Linux Mint/ Ubuntu\nThese instructions have been tested on Ubuntu and Linux Mint machines that have a GUI interface. They will probably work on most Debian-based machines. All installation is done through the Terminal.\n\n4.3.1 Install Git\nThe three line below (1) links you to the repository that has the newest version of Git – as opposed to the version that comes with your Linux distribution, (2) update the repository, and (3) install the newest version of Git.\nsudo add-apt-repository ppa:git-core/ppa \napt update \napt install git\n\n\n4.3.2 Install Git Credential Manager (GUI only)\nDownload the Debian (*.deb) Git-Credential-Manager:\nhttps://github.com/git-ecosystem/git-credential-manager/releases/latest\n \nUnpack the deb file:\nsudo dpkg -i &lt;path/to/*.deb&gt;\nIf the download went to the Downloads folder then this command will work:\nsudo dpkg -i ~/Downloads/gcm-linux*.deb\n\n\n4.3.3 Setup Git Credentials (GUI only)\nConfigure the Git Credential Manager for Git\ngit-credential-manager configure\nStore your authentication with secretservice\ngit config --global credential.credentialStore secretservice\n\n\n4.3.4 Install Git Credential Manager (headless – extension)\nThe standard way to setup GCM requires a GUI interface. These instructions provide a way to set up the GCM through only a Terminal. Authentication will require another device where you can access a browser or the GitHub app. These instructions probably work on most Debian-based machines.\n \nYou are going to directly download the GCM tar file from the GitHub page. The instructions below are for version 2.6.1, which is the newest version as of March 2025. Adjust the numbers for newer version.\n \nDownload Git Credential Manager\nwget https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.6.1/gcm-linux_amd64.2.6.1.tar.gz\nGo to the folder where you downloaded the GCM and unzip GCM to a folder of your choice:\ntar xavf gcm-linux_amd64.2.6.1.tar.gz -C /path/to/install/folder\nGo to the folder where you unzipped GCM and make the file executable:\nchmod +x git-credential-manager\nNow execute the GCM:\n./git-credential-manager configure\n\n\n4.3.5 Setup Git Credentials (headless)\nConfigure the Git Credential Manager for Git\ngit-credential-manager configure\nKeep your authentication in cache\ngit config --global credential.credentialStore cache",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#sec-gitHubID",
    "href": "tutorials/Git/01-Git_Setup.html#sec-gitHubID",
    "title": "01: Git Repositories",
    "section": "5 GitHub Account",
    "text": "5 GitHub Account\nIf you do not have a GitHub account then go to http://github.com and sign up for an account. For this class, it is OK to just use a free account. Educators, students, and non-profit workers can get a professional account for free.\n \nWe will do a lot more with GitHub next lesson. For this lesson, the GitHub account is only needed to configure Git on your computer.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#sec-configureGit",
    "href": "tutorials/Git/01-Git_Setup.html#sec-configureGit",
    "title": "01: Git Repositories",
    "section": "6 Configure Git in RStudio",
    "text": "6 Configure Git in RStudio\nTo use Git for your project, you need to configure Git on your computer with a username and email. The username and email are used to identify who made what changes in the project history, important when you are collaborating with others on a project. Use your GitHub ID as the username and the email associated with your GitHub account.\n \nIn the Terminal, set the Git user name and password – replace userName and userEmail with your username and email:\ngit config --global user.name \"userName\"   \ngit config --global user.email \"userEmail\"\n\n\n\n\n\n\nFigure 2: The Terminal Tab in RStudio with the two commands above (your prompt might look different)\n\n\n\n\n6.1 Viewing the configured values (optional)\nYou can check the username and email by executing these lines in the Terminal tab:\ngit config user.name\ngit config user.email\nAfter executing the two above command, your Terminal tab should look similar to this:\n\n\n\nCharlie@Charlie-QFC MINGW64 /c/Users/Charlie/Desktop/GitHub Tests/FundProgUsingR\n$ git config user.name\nbelinskyc\n\nCharlie@Charlie-QFC MINGW64 /c/Users/Charlie/Desktop/GitHub Tests/FundProgUsingR\n$ git config user.email\nbelinsky@msu.edu\n\n\nFigure 3: Testing the git configuration using the RStudio Terminal tab",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#sec-gitRepo",
    "href": "tutorials/Git/01-Git_Setup.html#sec-gitRepo",
    "title": "01: Git Repositories",
    "section": "7 Add Git to your RStudio Project folder",
    "text": "7 Add Git to your RStudio Project folder\nWe are now going to add a Git repository to the same folder as your RStudio Project.  The Git repository exists locally on your computer – later on we will sync it to GitHub.\n \nFirst, make sure you are in your RStudio Project!\n \nTo add Git to your RStudio Project folder, type in the Terminal:\ngit init -b main\nAnd then restart RStudio\n \nNote: git init only works if the Terminal is currently at your project folder directory. If you changed the directory, you can get back to the correct directory by clicking: Tools -&gt; Terminal -&gt; Go to Current Directory\n \nExtension: Alternate way to add git to RStudio Project\nExtension: Permanently make the default branch main\n\n7.1 RStudio and Git\nWhen you add Git to an RStudio Project folder, a Git tab will appear in the upper-right window. RStudio’s built-in Git interface handles most of the commonly performed Git functions.\n\n\n\n\n\n\nFigure 4: The Git tab has been added to the RStudio Project\n\n\n\n\n\n7.2 Project folders and Git Repositories\nLet’s look inside the project folder in the RStudio Files tab (note: you can see the same thing in your operating system’s file explorer).  By default, the Files tab will not show hidden files, we can change that by clicking on More -&gt; Show Hidden Files (Figure 5).\n \nRStudio adds a folder (.RProj.user) and a file (*.RProj) to your project folder.  This is what makes this project folder an RStudio Project.\n \nSimilarly, Git adds files to the project folder to make it a Git repository.\n \nThe two objects that get added by Git are:\n\n.gitignore: this file is used to indicate files you do not want to be a part of the repository (i.e., files that are not shared nor versioned)\n.git: this folder is hidden and contains the history of your project – do not edit or delete this!\n\n \nYour project folder is now both an RStudio Project and a Git Repository.\n\n\n\n\n\n\nFigure 5: Files added to the project folder by RStudio and Git\n\n\n\n\n\n7.3 Files in a Git repository\nA Git repository is attached to a folder, just like an RStudio Project.  In an RStudio Project, everything inside the project folder (and its subfolders) is a part of the RStudio Project.  This is not true of Git repositories.  Files inside the project folder are not part of the repository until they are explicitly added to the repository (more details in future lessons).\n \n.gitignore is used to declare files inside the project folder that you do not want to be a part of the Git repository.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#choosing-files-you-do-not-want-to-share-.gitignore",
    "href": "tutorials/Git/01-Git_Setup.html#choosing-files-you-do-not-want-to-share-.gitignore",
    "title": "01: Git Repositories",
    "section": "8 Choosing files you do not want to share (.gitignore)",
    "text": "8 Choosing files you do not want to share (.gitignore)\n.gitignore is a text document that lists all folders and files that are ignored when versioning/sharing your project.  In other words, the folders and files in .gitignore exist in your project folder but they do not exist in your Git repository and they will not be uploaded to GitHub.\n \nSome reasons for not sharing folders and files are that they:\n\nare temporary files\nare put in by RStudio or the operating system and do not affect the project\nare files generated by the scripts\nare large files that you do not want uploaded (e..g., simulated data, images)\n\n \n.gitignore starts with four lines (Figure 6). \n.Rproj.user \n.Rhistory \n.RData \n.Ruserdata\n\n\n\n\n\n\nFigure 6: The .gitignore file\n\n\n\n\n8.1 Editing .gitignore\nYou can edit .gitignore in RStudio (or any other text-editor).\n \nHere is an example .gitignore (Note: * is a wildcard character):\n.Rproj.user \n.Rhistory \n.RData \n.Ruserdata _* \ndoNotShare/ \n*.tmp \ntest1/*.jpg \n/test2/data/weatherData.csv\nweatherData2.csv\nThe above .gitignore is ignoring:\n\n_*: filenames that start with a underscore ( _ )\ndoNotShare: all doNotShare folders\n*.tmp: all files with extension .tmp\ntest1/*.jpg: all jpg files inside anytest1 folder (and subfolders)\n/test2/weatherData.csv: ignores a single file (weatherData.csv) inside the folder test2\n\nthe slash at the beginning means the root folder – this will only ignore files in the test2 folder inside the root folder\n\nweatherData2.csv: ignores any file named weatherData2.csv\n\n\n\n8.2 more about gitignore\n.gitignore is a Git repository file and everyone who syncs a project uses the same .gitignore – and, no, you cannot use .gitignore to ignore .gitignore.\n \nOnce you have versioned a file, it becomes a part of your Git repository and will be shared on GitHub.  This cannot be undone using .gitignore.  This means you need to consider .gitignore before you start creating versions of your project (i.e., now).\n \nnote: there are other ways to remove files from GitHub but they are complicated",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#application",
    "href": "tutorials/Git/01-Git_Setup.html#application",
    "title": "01: Git Repositories",
    "section": "9 Application",
    "text": "9 Application\n\nCreate a .gitignore that ignores:\n\nall .bmp files\nall files in the start folder in the root folder\ntmp files in the scripts folder only\n\nZip RStudio Project and send to belinsky@msu.edu",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#trap-the-console-tab-and-terminal-tab",
    "href": "tutorials/Git/01-Git_Setup.html#trap-the-console-tab-and-terminal-tab",
    "title": "01: Git Repositories",
    "section": "10 Trap: The Console Tab and Terminal Tab",
    "text": "10 Trap: The Console Tab and Terminal Tab\nJust a warning: The Console tab and the Terminal tab are next to each other and look very similar. It is very easy to confuse the two and put commands into the wrong tab.\n \n\nThe Console tab is an R Console – for commands that are specific to your R scripts.\nThe Terminal tab is the same as the Terminal in Mac or the Command Prompt in Windows – it is for sending system commands.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/01-Git_Setup.html#extension-alternate-way-to-add-git-to-rstudio-project",
    "href": "tutorials/Git/01-Git_Setup.html#extension-alternate-way-to-add-git-to-rstudio-project",
    "title": "01: Git Repositories",
    "section": "11 Extension: Alternate way to add git to RStudio Project",
    "text": "11 Extension: Alternate way to add git to RStudio Project\nTo add a Git repository to your RStudio Project folder\n\nOpen your project in RStudio\nClick Tools -&gt; Version Control -&gt; Project Setup \n\nThis opens the Project Options window\n\n\n\n\nIn the Version control system dropdown menu, select Git\nAdding Git to your RStudio Project\nSay Yes to initializing a new repository for the project\nYou will be prompted torestart RStudio – click Yes.\n\nYou can also manually restart by clicking Session -&gt; Restart R\n\n\n\n\n\n\n\n\nFigure 7: Add Git to your RStudio Project",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "01: Git Repositories"
    ]
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "",
    "text": "Charlie Belinsky\nQuantitative Fisheries Center\nMichigan State University\nbelinsky@msu.edu\n248-383-5611\n \nNote: Mac installation of this software is much more involved – contact Charlie for instructions.\n \nThe project is maintained on Github."
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#author",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#author",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "",
    "text": "Charlie Belinsky\nQuantitative Fisheries Center\nMichigan State University\nbelinsky@msu.edu\n248-383-5611\n \nNote: Mac installation of this software is much more involved – contact Charlie for instructions.\n \nThe project is maintained on Github."
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#overview",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#overview",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "2 Overview",
    "text": "2 Overview\nThese procedures in the document install the following software and was tested on 5/20/2025:\n\nR 4.5.0\nRtools 45 (for the CPP compilers)\nRStudio 2025.05.0 Build 496\nTMB package for R 1.9.17\nADMB 13.1\nEmacs 27.2 (Emacs versions 28 and up will not work)\nEmacs configuration files\n\nThese files provide the syntax highlighting in Emacs for both ADMB and TMB and set up the Environment\n\nadmb2r.cpp in the ADMB folder\n\n \nAppendix 1: User Environment PATH\n\n2.1 Admin access to your computer\nThe installation procedures will do the following thatmight require more administrative access to your computer than your user account has:\n\nInstall programs (R, RStudio, Rtools, ADMB, Emacs)\nInstall programs directly to the C: drive (ADMB, RTools)\nInstall programs not validated by Microsoft (ADMB)\nRun a batch file (PATH.bat)"
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#viewing-hidden-files-and-extensions-in-windows-optional",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#viewing-hidden-files-and-extensions-in-windows-optional",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "3 Viewing hidden files and extensions in Windows (optional)",
    "text": "3 Viewing hidden files and extensions in Windows (optional)\nThis section is useful for this installation and for any programming you do on your computer.\nNote: images in this document can be resized by clicking on them\n \n1) Open a File Explorer window and in…\nWindows 10: Click View ➔ Options ➔ Change folder and search options\n\n\n\n\n\n\nFigure 1: Accessing folder options in Windows 10\n\n\n\nWindows 11: click 3 dots ( … ) ➔ Options\n\n\n\n\n\n\nFigure 2: Accessing folder options in Windows 11\n\n\n\n2) Both Windows 10 and 11:\n\nClick View tab\nCheck Show hidden files…\nUncheck Hide extensions for known file types\nclick OK\n\n\n\n\n\n\nFigure 3: Showing hidden files and hiding extensions"
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#software-installation",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#software-installation",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "4 Software Installation",
    "text": "4 Software Installation\nYou can use the default installation options for all applications.\n \nSteps 1-4 are only needed for TMB, step 5 is only needed for ADMB, steps 6 and 7 are needed for both ADMB and TMB.\n1) Download and Install R (you need to have at least version 4.3)\n \n2) Download and install Rtools (you need to have at least version 43 and the version must match your R version)\n\nClick on Rrools4X Installer in Installing Rtools4X section\n\n \n3) Download and install RStudio (you need to have a version from 2022 or later)\n \n4) Open RStudio and install the TMB package\n\nIn RStudio: Tools ➔ Install Packages… ➔ type TMB in Packages textbox ➔ Install\nClose RStudio after installing package\n\n \n5) Download and install ADMB-13.1-windows.exe\n\nAlternatively, you can download ADMB-12.3-windows.exe (under Windows header)\nWhen installing, you will likely get a Windows protected your PC screen, if so:\n\nclick More info\nclick Run anyway\n\n\n \n6) Download and install emacs-27.2-x86_64-installer.exe\n \n7) Go to ADMB-TMB-Install GitHub page\n\nClick on green Code button and choose Download Zip\n\nThis will download a zipped file named ADMB-TMB-Install-main.zip\n\nUnzip ADMB-TMB-Install-main.zip (right-click, Extract All then Extract). \nExecute (double-click) Path.bat\n\nYou will likely get a Windows protected your PC screen, if so:\n\nclick More info\nclick Run anyway\n\n\nIf this does not work you can do this: Appendix 2: manually copy configuration files and admb2r.cpp (this link also includes more about the files)\n\n \n8) Restart computer\n\nAs far as I know, this step is not needed – but I keep it here just to be safe."
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#have-emacs-open-tpl-files-by-default-optional",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#have-emacs-open-tpl-files-by-default-optional",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "5 Have Emacs open TPL files by default (optional)",
    "text": "5 Have Emacs open TPL files by default (optional)\n\nRight-click on any *.tpl file\n\nthere is one in the folder you just extracted ➔ examples ➔ simple ➔ simple.tpl\n\nChoose Open With\nWindows 10:\n\nAt bottom, click Choose an app on your PC\nThe Path is: C:\\Program Files\\Emacs\\x86_64\\bin\\runemacs.exe\nClick Open\nClick Always\n\nWindows 11:\n\ngo to bottom and click on Choose another\nAt bottom, click Choose an app on your PC\nThe Path is: C:\\Program Files\\Emacs\\x86_64\\bin\\runemacs.exe\nClick OK\n\n\n \nNote: the same procedures will work if you want emacs to be the default program for CPP files"
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#testing-out-admb",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#testing-out-admb",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "6 Testing out ADMB",
    "text": "6 Testing out ADMB\n\nIn folder you just unzipped, double-click emacs ➔ examples ➔ simple ➔ simple.tpl\nOpen simple.tpl in Emacs\nClick Translate (button 1), Build (button 2), and Run (button 3)\n\nMake sure you wait for steps to complete\n\nIf the Emacs panels look like this after Run, then ADMB is properly installed:\n\n\n\n\n\n\n\nFigure 4: Translate, Build, and Run buttons in ADMB.  This view is from ADMB 12.3 – the view from 13.1 is slightly different"
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#testing-out-tmb",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#testing-out-tmb",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "7 Testing out TMB",
    "text": "7 Testing out TMB\n\nIn folder you just unzipped, double-click emacs ➔ examples ➔ mini ➔ mini.cpp\nOpen mini.cpp in Emacs\nClick Clean (button 1), Compile (button 2), and Run (button 3)\n\nMake sure you wait for each step to complete\nCompile take a minute or two\n\nIf the Emacs panels look like this after Run, then TMB is properly installed:\n\n\n\n\n\n\n\nFigure 5: Clean, Compile, and Run buttons in TMB\n\n\n\n\n7.1 Package inconsistency error\nIf you see this message when compiling a TMB program:\nWarning message:\nIn checkMatrixPackageVersion() : Package version inconsistency detected.\nTMB was built with «Matrix version 1.5.4.1»\nCurrent «Matrix version is 1.5.4»\nPlease re-install 'TMB' from source using install.packages('TMB', type = 'source') or ask CRAN for a binary version of 'TMB' matching CRAN's 'Matrix' package\nusing C++ compiler: 'G__~1.EXE (GCC) 12.2.0'\nDo not follow the instructions given.  Instead just update or reinstall the outdated package (in this case, Matrix).  This is only necessary if the the script does not work because of the outdated package."
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#appendix-1-user-environment-path",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#appendix-1-user-environment-path",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "8 Appendix 1: User Environment PATH",
    "text": "8 Appendix 1: User Environment PATH\nThe User Environment PATH variable is not needed anymore.  I added this to the emacs configuration files.\n \nHowever, there is still a chance that the User Environment PATH has been set by a previously installed program and that PATH could interfere with ADMB and TMB’s operation.  This is most likely only going to be true if you previously installed ADStudio.\n \nYou can see the User Environment PATH by doing a Windows search for Environment and choosing Edit the system environment variables.\n \nThat will open the System Properties window on the Advanced tab– click on the Environment… button:\n\n\n\n\n\n\nFigure 6: The Advanced System Properties tab\n\n\n\nThen double-click on Path in the User variables section:\n\n\n\n\n\n\nFigure 7: Path variables\n\n\n\nDelete any references to older versions of ADMB, TMB, or ADStudio.  You can also safely delete the references to the current ADMB version – they are not needed."
  },
  {
    "objectID": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#appendix-2-manually-copy-configuration-files-and-admb2r.cpp",
    "href": "tutorials/ADMB-TMB/ADMB-TMB-Install.html#appendix-2-manually-copy-configuration-files-and-admb2r.cpp",
    "title": "ADMB/TMB Full Installation for Windows",
    "section": "9 Appendix 2: manually copy configuration files and admb2r.cpp",
    "text": "9 Appendix 2: manually copy configuration files and admb2r.cpp\nThe extracted folder ADMB-TMB-Install-main contains:\n\nAn executable file called PATH.bat (which installs the folders and files below)\nA folder called emacsConfigFiles that gets installed to the emacs folder when PATH.bat is executed\nA folder called Examples, which contains ADMB and TMB scripts that are used in this document to test the installation.\nadmb2r.cpp – a commonly used ADMB script file that is not included with ADMB\n\n \nPATH.bat is a batch file that copies the emacs configuration files and admb2r.cpp to the correct locations.\n \nThe following are instructions to manually copy the files – this is only needed if PATH.bat does not work.\n\n9.1 Copy emacs configuration files\nInside ADMB-TMB-Install-main, there is a folder named emacsConfigFiles.  You need to copy the contents inside the emacsConfigFiles folder (a file named .emacs and a folder named emacs) to the user’s appdata folder.\n \nThe easiest way to get to the user’s appdata folder is to type %appdata% in a File Explorer window and hit enter.  Or, you can go directly to the folder: C:\\Users\\&lt;yourUserName&gt;\\AppData\\Roaming.  Move both the emacs folder and .emacs file to this folder:\n\n\n\n\n\n\nFigure 8: Location to copy the emacs configuration files\n\n\n\n\n\n9.2 Copy admb2r.cpp\nThe file admb2r.cpp is used in ADMB scripts but it does not come with ADMB.\n \nYou can add it to ADMB by copying admb2r.cpp from the ADMB-TMB-Install-main folder to the following locations:\n\nc:\\ADMB-13.1\\include\nc:\\ADMB-13.1\\include\\contrib  (I am not sure it is necessary to copy it here)\n\n \nNote: If you are using a different version of ADMB then replace 13.1 with the version you are using"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Assests",
    "section": "",
    "text": "rs_theme_light\ngit tutorial\nQFC_Styles.js\nQFC_Styles.css"
  },
  {
    "objectID": "index.html#quarto",
    "href": "index.html#quarto",
    "title": "Assests",
    "section": "",
    "text": "rs_theme_light\ngit tutorial\nQFC_Styles.js\nQFC_Styles.css"
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html",
    "title": "00: RStudio Projects Setup",
    "section": "",
    "text": "Include checklist\nMention Projects tab near top-left corner\nWorkshop:\n\nProject on GitHub - Unzip project\nsetwd() is a session variables",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#purpose",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#purpose",
    "title": "00: RStudio Projects Setup",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nInstall, setup, and test R and RStudio\nProvide a basic overview of how RStudio works and its relationship to R\nExecute, using the Source button, an R script\n\n\n1.1 Special note about images in the class\nRStudio is a rapidly evolving program, and it would be too much work to maintain all the images so that they reflect the newest version of RStudio and its visual likeness.  Some of the images in this class reflect older versions of RStudio and there are minor changes that I have made to the code that I did not believe warrant putting in new images. I have tried to make sure these differences change nothing functionally.  Inevitably, something will fall through the cracks – so please, contact me if there is a problem!",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#questions-or-comments",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#questions-or-comments",
    "title": "00: RStudio Projects Setup",
    "section": "2 Questions or comments",
    "text": "2 Questions or comments\nIf you have any questions or comments about the material in this lesson, feel free to email them to the instructor, Charlie Belinsky, at belinsky@msu.edu.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#viewing-file-extensions-and-hidden-files",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#viewing-file-extensions-and-hidden-files",
    "title": "00: RStudio Projects Setup",
    "section": "3 Viewing file extensions and hidden files",
    "text": "3 Viewing file extensions and hidden files\nBy default, Windows and Mac hides file extensions from you (e.g., your Word document file is listed in the file manager as stuff instead of stuff.docx).  This is not convenient when you are programming as you are working with many file types (e.g., *.txt, *.r, *.csv) and, many times, the only difference between the name of two files is the extension.  For instance, you might have two files called weather.r and weather.csv in your folder – without file extensions they are both listed as weather.\n \nAlso, when you are programming, there are files you will need to access that are hidden by default by the operating system.\n \nThis section is optional, but I would highly recommend you learn how to view all files and file extensions – it will greatly assist you when programming.\n\n3.1 Viewing in newer versions of Windows 11\nThis is easy to to do in newer versions of Windows 11:\n\nOpen the File Explorer\nClick View -&gt; Show\nCheck File name extensions and Hidden items\n\n\n\n\n\n\n\nFigure 1: Change settings to view all file extensions on Windows 11\n\n\n\n\n\n3.2 Viewing in Windows 10 and older Windows 11 versions\nThis feature is a bit buried in these Window versions.\n \n\nOpen any File Explorer window (i.e., your folder viewer)\nIn menu bar\n\nWindows 10: click View -&gt; Options -&gt; Change folder and search options\nWindows 11: click 3 dots ( · · · ) -&gt; Options\n\nIn Folder Options window (Figure 2), go to the View tab\nUncheck Hide extensions for known file types\nCheck Show hidden files, folder, and drives\nClick OK\n\n\n\n\n\n\n\nFigure 2: Viewing in older versions of Windows\n\n\n\n\n\n3.3 Viewing in Mac\nFile Extensions:\n\nOpen Finder\nClick on Finder -&gt; Preferences…\nIn Finder Preferences window click on the Advanced tab\nCheck Show all filename extensions\n\n \nHidden files:\n\nYou can temporarily see hidden files in the Finder by pressing Command-Shift-Dot ( . ). \nYou can use the Terminal to permanently show hidden files as described on this webpage but this is not recommended unless you are comfortable with Terminal commands.\n\n\n\n\n\n\n\nFigure 3: Change settings to view all file extensions on a Mac",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#install-r-and-rstudio-on-your-computer",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#install-r-and-rstudio-on-your-computer",
    "title": "00: RStudio Projects Setup",
    "section": "4 Install R and RStudio on your computer",
    "text": "4 Install R and RStudio on your computer\nWe are going to install R and RStudio on your computer. R is a programming language and RStudio provides a structured environment for the R programming language, similar to the way Microsoft Word provides a structured environment for document editing. RStudio is patterned on other popular programming environments like Microsoft’s Visual Studio.\n \nOn Windows the default installation can be used for R and RStudio. For Mac, installation is trickier.\n\n4.1 Install or update R (need version 4.4 or higher)\nThe R for Windows download is here. Click on Download R 4.#.# for Windows.\n \nThe R for Mac download is here.  \n\nThere are two versions of R for Mac \n\nR-4.#.#-arm64.pkg: for Macs with Apple-based processors (M1, M2, M3…), all Macs from 2021 on use Apple-based processors\nR-4.#.#.pkg: for older Macs with Intel-based processors\n\nThe installer will tell you If you pick the wrong pkg file – there is no harm except a bit of wasted time.\n\n \nAnd for those of you using Linux – the R for Linux download instructions are here.\n\n\n4.2 Install or update RStudio\nYou need version 2023.12 or higher for this class and you should have 2025.04 or higher if you are using Git.\n \nYou can download the RStudio Installer here. Download the appropriate file for your computer under Installers, open the file, and use the default installation options.\n\n4.2.1 Special instructions for Mac users\nFor Mac users there are some extra complexities:\n\nYou might be asked to install Command Line Developer Tools while installing RStudio. Go ahead and install the developer tools.\n \nThe download for RStudio is called RStudio-202X.XX.dmg.  Double-clicking the file will open the window below (Figure 4).  In the window, drag the RStudio file to the Applications folder\n\n\n\n\n\n\n\nFigure 4: Opening RStudio DMG file\n\n\n\nIf you already have RStudio installed, you will be asked if you want to replace the old version – go ahead and Replace it.\n \n\nAfter installation, unmount the RStudio device in the Finder by clicking the eject button (Figure 5)\n\n\n\n\n\n\n\nFigure 5: Unmounting the RStudio device (very important!)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#installing-an-r-package",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#installing-an-r-package",
    "title": "00: RStudio Projects Setup",
    "section": "5 Installing an R package",
    "text": "5 Installing an R package\nGGPlot2, is a widely used package that does not come with R – so we are going to install the GGPlot2 package using RStudio.\n \nTo install the package GGPlot2 using RStudio (Figure 6):\n\nClick Tools -&gt; Install Packages…\nIn the Install Packages window, type GGPlot2 in the Packages textbox\nClick Install\n\n \nGGPlot2 requires many other packages (its dependencies) – and RStudio will install those packages along with GGPlot2.  Be patient, as this could take a little time.\n\n\n\n\n\n\nFigure 6: Installing the GGPlot2 Package in RStudio\n\n\n\n \nExtension: Different ways to install packages",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#rstudio-projects-and-project-folders",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#rstudio-projects-and-project-folders",
    "title": "00: RStudio Projects Setup",
    "section": "6 RStudio Projects and Project Folders",
    "text": "6 RStudio Projects and Project Folders\nMost of the work you do in R involves scripts, data files, and other types of files (e.g., shapefiles).  All these files together make up your project and they exist within a Project Folder, which is the folder on your computer that contains all the files and subfolders for your project. It is very important that you keep all files associated with a project within a Project Folder.\n \nIn this class we will be using RStudio to create, edit, and execute R scripts.  In RStudio, there is a feature called RStudio Projects, which is a Project Folder, that makes it much easier to move, share, and host your project on GitHub.  You need to keep all of your class work in an RStudio Project.\n\n6.1 Create a new RStudio Project\nTo create a new RStudio Project, which is also your project folder:\n\nopen RStudio\nclick File -&gt; New Project \nIn the Create Project window click New Directory\nIn the Project Type window click New Project\n\n\n\n\n\n\n\nFigure 7: Creating a new RStudio Project\n\n\n\n \nIn the Create New Project window:\n\nThe Directory name is the name of the Project Folder that will contain your whole RStudio Project\nThe Project Folder will be created in the folder listed in the second textbox (Create project as subdirectory of:)\n\n \nIn Figure 8, the Project Folder is named My_Project and is in the Desktop folder.  Note: you can name the folder whatever you want and put it in any folder location.\n\n\n\n\n\n\nFigure 8: Creating a directory for the RStudio Project\n\n\n\n \nExtension: RStudio Project in an existing directory\n\n\n6.2 RStudio Project Files Tab\nThe Files tab (bottom-right corner) in RStudio is a File Manager, and it allows you to do many things that you can do in your operating systems File Manager (called File Explorer in Windows and Finder in Mac). The Files tab can be used to open, add, remove, or rename files and folders. When we first create the RStudio Project, the Files tab will be set to the Project Folder (Figure 9, C:/Users/Charlie/Desktop/My_Project) and there is one file in the folder: My_Project.Rproj.\n \nWhenever you create an RStudio Project, an .Rproj file is added to the Project Folder. This main purpose of this file is to designate this folder as the working directory for your project.  Double-clicking on the .Rproj file in your File Manager will open your Project in RStudio (just like double-clicking a .docx file opens the file in Word).\n\n\n\n\n\n\nFigure 9: Files tab opened to the Project Folder\n\n\n\n\n\n6.3 Viewing hidden files in RStudio\nBy default, the Files tab shows file extension but it does not show hidden files.  If you click on More -&gt; Show Hidden Files, you will see the hidden folder .Rproj.user – this is not a folder you will use in this class.\n \n\n\n\n\n\n\nFigure 10: Showing hidden files\n\n\n\nExtension: *.RProj and .Rhistory\n\n\n6.4 Add Subfolders\nWe will use the Files tab in RStudio (bottom-right tab) to create two subfolders: scripts and data.\n \nTo add two folders named scripts and data:\n\nClick on New Folder in the Files tab\nEnter scripts in the textbox and click OK\nRepeat the last two steps to add a folder called data\n\n\n\n\n\n\n\nFigure 11: Adding folders using the Files tab in RStudio\n\n\n\n\n\n6.5 Add files to the project\nWe are going to download two files and add them to your new RStudio Project.\n\nRSProj_Setup.r: put this file in your scripts directory\nRSProj_Setup.csv: put this file in your data directory\n\n\n\n6.6 Opening File Manager from Files tab\nThe Files tab can do a lot of things that File Explorer/Finder can do – but not everything.  For instance, you cannot drag and drop files in the Files tab like you can in File Explorer/Finder.\n \nYou can open up a File Explorer/Finder window to the same folder by clicking More… -&gt; Show Folder in New Window.\n\n\n\n\n\n\nFigure 12: The Files tab in RStudio and the File Manager\n\n\n\n\n\n6.7 RStudio Project File Manager\nYou should now be running RStudio, opened to the RStudio Project that you just created.  If you click on the Files tab in the lower-right corner, you will see all the folders and files within your RStudio Project (linked to your Project Folder). You will also see your project name in the upper-right corner (in this case, My_Project).\n\n\n\n\n\n\nFigure 13: RStudio opened with an RStudio Project (named My_Project)\n\n\n\nThe *.RProj files is here and you might also see a file named .RHistory. These are not files you will need to use right away but you can learn more about them at Extension: *.RProj and .Rhistory.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#rstudio-basics",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#rstudio-basics",
    "title": "00: RStudio Projects Setup",
    "section": "7 RStudio Basics",
    "text": "7 RStudio Basics\nNow we are going to execute the script file, RSProj_Setup.R, that we just downloaded to your RStudio Project’s scripts folder.\n \nRSProj_Setup.R takes weather data from the other downloaded file, RSProj_Setup.csv and creates boxplots showing how Wind Direction and Wind Speed relate to the Change In Temperature.\n \nWe are executing the script to test your setup and help you become familiar with the RStudio environment. If you are taking the GGPlot class, the code in RSProj_Setup.R is something you will learn throughout the course.\n\n7.1 Open your RStudio Project\nThere are multiple ways to open an RStudio Project – three of them are:\n\nOpen your Project Folder in File Explorer (Windows) or Finder (Mac) window and double-click the &lt;Project_Name&gt;.Rproj file\nIn RStudio, click File -&gt; Open Project… -&gt; navigate to the Project Folder and click the *&lt;Project_Name&gt;.Rproj file\nIn RStudio, click File -&gt; Recent Projects -&gt; choose the RStudio Project you just created\n\n\n\n7.2 Open a script file in your Project\nTo open the script file either:\n\nIn Files tab, go to the scripts folder and click on RSProj_Setup.R or\nIn RStudio click File -&gt; Open File -&gt; and then find  RSProj_Setup.R in the scripts folder and click Open.\n\n \nAfter opening the script file, you should see something that looks like this (Figure 14) on your screen:\n\n\n\n\n\n\nFigure 14: Opening your first script in RStudio\n\n\n\nThe script will only execute if it is opened inside your RStudio Project.\n\n\n7.3 Setting up RStudio tabs for scripts\nWhen we are editing and executing an R script, we generally have the following RStudio tabs open (Figure 15):\n\nFile Viewer – text viewer and editor for the opened script files (upper-left corner)\nConsole – displays information about the execution of your script file (lower-left corner)\nEnvironment – displays data points, or variables, from the execution of your script file (upper-right corner)\nPlots – plots produced by the execution of your script file are displayed here (lower-right corner)\n\n \nThe fourth (lower-right corner) tab is on Files, so we switched the tab to Plots:\n\n\n\n\n\n\nFigure 15: The Tabs most commonly used in RStudio\n\n\n\n \nNote: the Help tab in the lower-right corner is something you might find useful. Extension: The Help Tab\n\n\n7.4 Common buttons used in RStudio\nThe script file, RSProj_Setup.r, is a fully functioning script that takes temperature and wind data from the Comma Separated Value (CSV) file, RSProj_Setup.csv, and plots out the data. I am going to use this program to demonstrate a few of the useful buttons in RStudio.\n \nThe one button you will use most in R is Source, which executes your whole script.  Press the Source button to execute the script (Figure 16).\n \nNote: If you have already used R, there is a good chance you highlight lines of code and click Run to execute just those lines.  We are not using this method in this class.  For this class, you should always use Source to execute your code.  For more information go to Extension: Run vs. Source\n\n\n\n\n\n\nFigure 16: Running (Sourcing) the script\n\n\n\nAfter the script is run:\n\nThe Environment tab displays values for the data (variables) in the script (e.g., weatherData, windLabels).\nThe Console tab displays information about the execution of the script.\nThe Plot tab displays the box plots.  If there are multiple plots, you can use the arrow buttons to switch between the plots.\n\n\n\n7.5 Cleaning up the RStudio windows\nThere many times where you want to clean up the windows, which can get very crowded with information from old script executions.\n\nTo clean the Environment, Plot, and Console tabs use the brush button (Figure 16).\n\n\n\n\n\n\n\nFigure 17: Cleaning out the windows\n\n\n\n \nIf you click Source again, the Environment, Plot, and Console tabs will once again be populated with data from the script.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#application",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#application",
    "title": "00: RStudio Projects Setup",
    "section": "8 Application",
    "text": "8 Application\n\nIn your RStudio Project, create a new script file (File -&gt; New File -&gt; R Script)\nCopy and paste this lesson’s script, RSProj_Setup1.r, to the new script.\nChange the colors in the boxplot (edit lines 17-21)\n\nHere is a comprehensive list of color names you can use in R\n\nSave the script as app01.r, and to your script folder\n\n \nIf you have any questions regarding this application, feel free to email them to Charlie Belinsky at belinsky@msu.edu.\n\n8.1 Questions to answer\nAnswer the following in comments inside your application script:\n\nWhat was your level of comfort with the lesson/application?\nWhat areas of the lesson/application confused or still confuses you?\nWhat are some things you would like to know more about that is related to, but not covered in, this lesson?\n\n\n\n8.2 Turn in on GitHub\nSave the script as app00.r in your scripts folder, Push the changes to your GitHub repository, create an Issue in GitHub that says you have finished the application and assign the issue to belinskyc.\n\n\n8.3 Zip your Project Folder\nIn your File Manager (not in RStudio), right-click on the Project Folder and in:\n\nWindows 10:\n\nClick Send to\nClick Compressed (zipped) folder\n\nWindows 11:\n\nClick Compress to Zip file\n\nMac:\n\nClick Compress “&lt;Project Folder&gt;”\n\n\nFor all operating systems, a zipped file named &lt;Project Folder&gt;.zip with all the Project Folders’ contents is created in the same folder. You can email the zip file.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#extension-color-schemes",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#extension-color-schemes",
    "title": "00: RStudio Projects Setup",
    "section": "9 Extension: Color Schemes",
    "text": "9 Extension: Color Schemes\nI am not a big fan of the default color scheme in RStudio.  It does not create enough differentiation between the different components of a script.  For instance, comments (red arrows) are in green and quoted items (blue arrows) are in just a slightly different green (Figure 18).\n\n\n\n\n\n\nFigure 18: The text color for comments and quotes\n\n\n\n\n9.1 Changing the color scheme\nA good color scheme can really help a programmer by allowing them to quickly identify parts of a script and common errors, like misplaced quotes.\n \nRStudio offers many color schemes – you can change the color scheme by:\n\nclicking on Tools in the main menu (circled in Figure 19)\nchoose Global Options\nWhen the Global Options window open (in Figure 19), click on Appearance\n\n\n\n\n\n\n\nFigure 19: Color schemes for RStudio (note: the Editor font might be different in your window – that is OK)\n\n\n\n \nThe image above shows the Xcode color scheme ( Figure 19).  I prefer Xcode because it does a good job differentiating the different aspects of the script. Notice how the comments (in green) are now clearly distinguished from the quotes (in red).\n \nYou can choose from around 20 themes in the Editor theme window and you can change the theme anytime without affecting anything else.\n\n\n9.2 Adding more color to differentiate output\nThere are a couple more helpful options in RStudio that use color to distinguish components of your code and the output in the Console tab.\n \nTo make these changes go to\nTools -&gt; Global Options… -&gt; Code -&gt; Display and check:\n\nHighlight R function calls\n\n \nTools -&gt; Console and check:\n\nShow syntax highlighting in console input\n\n\n\n\n\n\n\nFigure 20: Console Window changes",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#extension-stop-rstudio-from-automatically-adding-matching-parenthesis-and-quotes",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#extension-stop-rstudio-from-automatically-adding-matching-parenthesis-and-quotes",
    "title": "00: RStudio Projects Setup",
    "section": "10 Extension: Stop RStudio from automatically adding matching parenthesis and quotes",
    "text": "10 Extension: Stop RStudio from automatically adding matching parenthesis and quotes\nA common complaint I have gotten from my students is they hate the way RStudio tries to be “helpful” by automatically adding matching parenthesis or quotes when the user types in a parenthesis or start quote.\n \nYou can turn off this feature by:\n\ngoing to Tools -&gt; Global Options… -&gt; Code  -&gt; Editing\nuncheck Insert matching parens/quotes\nset Surround selection on text insertion to Never\n\n\n\n\n\n\n\nFigure 21: Stop RStudio from automatically ending your parenthesis and quotes.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#extension-rstudio-project-in-an-existing-directory",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#extension-rstudio-project-in-an-existing-directory",
    "title": "00: RStudio Projects Setup",
    "section": "11 Extension: RStudio Project in an existing directory",
    "text": "11 Extension: RStudio Project in an existing directory\nTo create a new RStudio Project inside a directory that already exists (has scripts and data)\n\nopen RStudio\nclick File -&gt; New Project \nIn the Create Project window click Existing Directory\nBrowse to the folder you want to be the Project working directory and click Create Project\n\n \nRStudio will add a *.RProj file to the folder – this is what makes the folder an RStudio Project.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#extension-working-directories-in-r-and-rstudio-why-rstudio-projects",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#extension-working-directories-in-r-and-rstudio-why-rstudio-projects",
    "title": "00: RStudio Projects Setup",
    "section": "12 Extension: Working directories in R and RStudio (why RStudio Projects)",
    "text": "12 Extension: Working directories in R and RStudio (why RStudio Projects)\nThis topic is, in this author’s opinion, one of the most frustrating topic in R.  Compared to other programming languages (e.g., C++. Python, Javascript), R handling of working directories makes it harderto share projects.\n \nA working directory is the folder location used when one file is looking for another file.  It is best shown by its use-case: a script file that is reading in information from another file – this file can be a data file or another script file.\n \nFor example, let’s say we have a script file called weather.r and it is pulling in data from the file weather2020.csv.  weather.r needs to first find the folder location for weather2020.csv before it can access the file.  To do this, weather.r needs a path to weather2020.csv.  This path can be thought of as map directions between two points – and the working directory is the starting point.\n \nFor the vast majority of programming languages, there is no concept of a working directory.  The process of files calling other files works like google maps – a route is specified between the two files starting with the folder the caller (e.g., weather.r) is in and ending where the callee (e.g., weather.csv) is. The path between the two files is called a relative file path. \n\n12.1 R’s default handling of working directories\nIn R, the starting point, or working directory, is fixed for all R files opened in a session (called a session variable).  Using the google maps analogy, this is like saying the map starting point is fixed for everyone – it does not matter where you actually are located.  You can change the working directory in your script using setwd() but this changes the working directories for all R files in the session.  In other words, you are simply changing the starting point to a new location and all files will now use that location.\n\n\n12.2 Absolute file paths (a bad fix to the problem)\nOne way to get around working directories is to use an absolute file path.  So, instead of mapping between weather.R and weather.csv, you just give the file path for weather.csv on your computer (called the absolute file path).\n \nThis will look something like: c:\\Users\\RStudent\\Documents\\WeatherProj\\Data\\weather.csv\n \nDoing this means you do not have to worry about working directories.  But this solution breaks as soon as you move files on your computer or move them to another computer.  The reason is that the file path changes.  Absolute file paths make it almost impossible to share file and should not be used.\n\n\n12.3 How RStudio Projects handle working directory (the least-worst option)\nAn RStudio Project sets the working directory to the Project Folder.  So, for weather.r to find weather.csv inside an RStudio Project, it just needs to know where weather.csv is located relative to the project folder.  Most likely this will be something like: Data\\weather.csv. This makes it far easier to share your project because the path to weather.csv will be the same on any computer.\nWhile I believe this is by far the best method for handling working directory issues, it comes with a major caveat:You need to open script files from within the RStudio Project.  Opening the project sets the working directory for all script files used in the session.  If you a file outside of the Project session, then the working directory is not set by the project.\n\n\n12.4 The default working directory\nA working directory is not defined for a file, it is defined for a session.  So, all files within that session will have the same working directory.  IF you change the working directory in one file, you change it for every file within the session.  This leads to awkward behavior where one R file can change the behavior of another R file within the same session by using setwd().",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#extension-different-ways-to-install-packages",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#extension-different-ways-to-install-packages",
    "title": "00: RStudio Projects Setup",
    "section": "13 Extension: Different ways to install packages",
    "text": "13 Extension: Different ways to install packages\nHere are three different ways in RStudio to install packages used in your script\n\n13.1 Use the RStudio menu\nTo install packages using the RStudio menu:\n\nClick Tools -&gt; Install Packages…\nIn the Install Packages window, type the package name in the Packages textbox (RStudio will give suggestions based on what you have typed)\n\nnote: you can type in multiple packages using spaces to separate them\n\nClick Install\n\n\n\n13.2 Use the Console tab\nIn R, we can install packages using install.packages().  So, if you wanted to install GGPlot2, you would type:\ninstall.packages(\"GGPlot2\")\nNote: you can install multiple packages at once if you put the names in a vector:\ninstall.packages(c(\"GGPlot2\", \"gridExtra\", \"tidyverse\")\nThe Console tab in RStudio is an R interface, and you could type in the above line to install the GGPlot2 package.\n\n\n\n\n\n\nFigure 22: Using the RStudio Console to install a package\n\n\n\n\n\n13.3 Have RStudio install the packages\nRStudio looks through your script and will prompt you to install packages used in your script that you do not have installed. With a click, RStudio installs all needed packages and dependencies.\n\n\n\n\n\n\nFigure 23: RStudio looking for packages needed by the script– click Install and RStudio installs the required package(s)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#extension-the-help-tab",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#extension-the-help-tab",
    "title": "00: RStudio Projects Setup",
    "section": "14 Extension: The Help tab",
    "text": "14 Extension: The Help tab\nThe Help tab is essentially an intelligent online search through the R documentation.  So, if you type plot in the search bar and hit enter, the R plot help page from the online documentation will appear.  Note: you could have done the same thing by typing ?plot in the Console tab.\n\n\n\n\n\n\nFigure 24: The R plot help page in the online documentation.\n\n\n\n \nThe page that appears in the Help tab (Figure 24) is this page: https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/plot.html\n \nhttps://stat.ethz.ch is where the official documentation for R is located.  So, you will see this website appear quite often when you do an internet search for something R related.\n \nIn a future lesson we will use the Help tab to find information about GGPlot functions.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#extension-run-vs.-source",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#extension-run-vs.-source",
    "title": "00: RStudio Projects Setup",
    "section": "15 Extension: Run vs. Source",
    "text": "15 Extension: Run vs. Source\nTechnically speaking, the difference between Run and Source is:\n\nSource will execute all the code in a script file.\nRun will execute either:\n\nThe code that is highlighted (if code is highlighted) OR\nThe command that the cursor is on (if the command is on more than one line) OR\nThe whole line the cursor is on\n\n\n \nThe real difference lies in a historical discussion of scripting vs. programming, which is a discussion beyond this class.  Suffice to say, R was originally intended to be more like an advanced calculator than a programming language. The script files would contain multiple lines of code that could be execute independently and in any order (think of these as buttons on a calculator).  The user could click a “button” to pull in data, click another “button” to run statistical analysis on the data, and click a third “button” to output the analysis.  This is what the Run button does.\n \nHowever, as R has grown, the focus has shifted towards developing well-structured code just like any modern programming language (e.g., Python, C, Java). This means executing the script as a whole instead of in parts.  This is what Source does.  Executing your script as a whole instead of in parts has many advantages as the code is easier to debug, easier to share, and much better organized – because you are forced to organize it. In the not-so-humble opinion of this author, learning to treat your script as a whole is a vital part of learning how to program.  For this reason, we will always be using the Source button in this class.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/00-RStudioProjectsSetup.html#extension-create-a-standalone-r-script",
    "href": "tutorials/Git/00-RStudioProjectsSetup.html#extension-create-a-standalone-r-script",
    "title": "00: RStudio Projects Setup",
    "section": "16 Extension: Create a standalone R script",
    "text": "16 Extension: Create a standalone R script\nThere are two ways to create script file in RStudio:\n\nA standalone script\nAs part of an RStudio Project\n\n \nMany people use the first method.  In this class we exclusively use the second method.  The first method of creating a script file is fine for testing something out.  The second method is far better for organizing larger projects and sharing your code with others.\n \nThe reason the second method is better is because a project consist of many file that need to talk each-other.  Script files will call other scripts file or read in data from data files.  In order to makes this work, the script files need to know how to find the other files. In an RStudio Project, this is easy because the working directory is always the Project Folder of your project – and all files in the project are contained within the Project Folder.  So, you just need to look for the file relative to the Project Folder.\n \nR Programmers often get around the lack of a Project Folder/defined working directory by setting the working directory in code using setwd().  This can work locally but becomes problematic when files are shared or moved.  Whereas, RStudio Project always maintain their folder structure.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "00: RStudio Projects Setup"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html",
    "href": "tutorials/Git/02-GitHub_Setup.html",
    "title": "02: GitHub Repositories",
    "section": "",
    "text": "workshop:\n\nbook analogy\nhub-spoke diagram\ncolor codes\npushing multiple chapters\nindex.lock (only old RStudio)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html#purpose",
    "href": "tutorials/Git/02-GitHub_Setup.html#purpose",
    "title": "02: GitHub Repositories",
    "section": "1 Purpose",
    "text": "1 Purpose\n\nTo link an RStudio Project to a GitHub repository using Git\n\n\n1.1 Prerequisites\n\nAn RStudio Project with Git\nGitHub account\n\n\n\n1.2 Tasks\n\nCreate a GitHub repository (Section 3.2)\nSync your Git repository to GitHub (Section 4)\n&lt;do a SACP here?&gt;\nInvite a user to your repository and give them Write access (Section 6)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html#git-vs.-github",
    "href": "tutorials/Git/02-GitHub_Setup.html#git-vs.-github",
    "title": "02: GitHub Repositories",
    "section": "2 Git vs. GitHub",
    "text": "2 Git vs. GitHub\nGit and GitHub are two terms that are often conflated.\n \nGit is versioning software – you use Git on your computer to create a history of your project, which we will so in the next lesson.\n \nGitHub is an online software development platform where you can store, sync, and share your Git repository.  When combined, Git and GitHub make a very powerful project-management system.\n \nNote: Git and GitHub can be used independent of each-other.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html#github-repository",
    "href": "tutorials/Git/02-GitHub_Setup.html#github-repository",
    "title": "02: GitHub Repositories",
    "section": "3 GitHub repository",
    "text": "3 GitHub repository\nA GitHub repository is an online storage location that syncs with the Git repository on your computer.  We will create a GitHub repository that links to the Git repository created in last lesson.\nNote: The GitHub repository does not contain an exact copy of your project – we will get to this in later lessons.\n \nTo link your existing Git repository to a GitHub repository:\n\nGet a GitHub account (if you do not have one)\nCreate a GitHub repository – this is your online project folder\nGet the URL from the GitHub repository you just created\n\n\n3.1 Get a GitHub account\nIf you do not have a GitHub account then go to http://github.com and sign up for an account. For this class, it is OK to just use a free account. Educators, students, and non-profit workers can get a professional account for free.\n\n\n3.2 Creating a GitHub repository\nWhen logged in to GitHub (Figure 1):\n\nClick on the + at the top-right and choose New Repository\nChoose a repository name\nChoose whether you want the repository to be Public or Private (this can be changed later)\n\nPublic means that anyone with the repository link can view (but not edit) your files\nPrivate means that only users you add in Settings -&gt; Manage Access can view the repository (more in Inviting users to your repository)\n\nClick Create Repository\n\n\n\n\n\n\n\nFigure 1: Creating a new repository in GitHub\n\n\n\n\n\n3.3 Getting the URL for the repository\nTo link a Git repository with this GitHub repository, you will need the URL for the GitHub repository. After you create the new repository, a window will appear (Figure 2) with the URL at the top in the Quick Setup section. Copy this URL and save it – you will use it in the next section.\n\n\n\n\n\n\nFigure 2: The URL for the GitHub repository you just created\n\n\n\n\n\n3.4 GitHub repository format\nIf you lose the Quick Setup page then the URL is going to be the part of the URL circled below:\n\n\n\n\n\n\nFigure 3: The URL for your GitHub repository\n\n\n\nThe GitHub repository link is the URL that takes you to the online project.  A GitHub repository link is always in this format:\n\nhttps://github.com//.git\n\n \nSo, if my GitHub username is QFCatMSU and my repository name is gitHubTest then the link is (yes, this repository exists):\n\nhttps://github.com/qfcatmsu/githubtest.git\n\n \nNotes: .git is optional and capital/lowercase does not matter",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html#sec-link",
    "href": "tutorials/Git/02-GitHub_Setup.html#sec-link",
    "title": "02: GitHub Repositories",
    "section": "4 Linking your Git repository to a GitHub repository",
    "text": "4 Linking your Git repository to a GitHub repository\nIn this section we are going to link a Git repository (attached to an RStudio Project) on your computer with an online GitHub Repository.  The GitHub repository will be the online version of your Git repository and can be shared or used to collaborate.\n \nWarning: The following only works if the GitHub repository is empty.\n\n4.1 Terminal commands to link to a GitHub repository\nThere are three lines in the RStudio Terminal tab you need to type in (or copy) to link your Git repository to the GitHub repository. Note: In Windows, Control-V does not paste inside the Terminal, but right-click -&gt; Paste works\n \n1) The first adds (add) the first version of your project and writes (commit) the version to your repository with the message “added Git”.\ngit add -A && git commit -m \"added Git\"\n2) The second line connects (remote add) your Git repository to your GitHub repository (origin).  Replace the URL in quotes with the URL for your GitHub repository.\ngit remote add origin \"https://github.com/myUserName/myRepository.git\"\n3) The third line sends (Push) your project to the GitHub repository (origin).  There is a good chance that GitHub will ask you to authenticate at this point using the GCM (Section 4.2) &lt;does main work here?\ngit push -u origin master\nIf you get an error in these steps, you probably need to reset the link shown here: Fixing an incorrect link to a GitHub repository\n\n\n4.2 Authenticating with GitHub (all GUI machines)\nGitHub asks for authentication the first time you modify a GitHub repository on each computer:\n\n\n\n\n\n\nFigure 4: GitHub asking for authentication\n\n\n\nWhen you click Sign in with your browser, your default browser will open to the GitHub login page.\n \nAfter you login you will get an Authentication Successful window:\n\n\n\n\n\n\nFigure 5: The Authentication Successful window\n\n\n\n\n4.2.1 Authenticating on Linux (GUI)\nYou might also be asked to setup a password to the keyring that stores your Git credentials.\n\nAdvantage: It adds security\nDisadvantage: you will have to type in this password every time you Push to a GitHub repository\n\n\n\n4.2.2 Authenticating on Linux (headless)\nWhen you Push to GitHub you will be asked to authenticate on another device:\n\nUse Authentication Method #1: Device Code\nOn another device, go to https://github.com/login/device\nLogin if you need to\nYou will get an 8-digit code on the other device – type that code in the Terminal\n\n \nYou GitHub authentication will be stored in cache for a certain amount of time (i.e., you will need to reauthenticate when that time is up). The default amount of time is 15 minutes. You can change the default time:\ngit config --global credential.helper \"cache --timeout=3600\"\nnote: time is in seconds so this is 1 hour",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html#sec-verifyGitHub",
    "href": "tutorials/Git/02-GitHub_Setup.html#sec-verifyGitHub",
    "title": "02: GitHub Repositories",
    "section": "5 Verifying the change on GitHub",
    "text": "5 Verifying the change on GitHub\nLet’s go to your GitHub account to verify that the project files are there (Figure 6):\n\nLog in to GitHub\nOn the left side, there is a section called Repositories. \nClick on the repository called &lt;your-user-name&gt;/&lt;your-repository-name&gt;\nChoose the Code tab (you are probably already on it)\n\n \nYou should notice that the files changed in the newest Commit have your Commit message attached (my Commit message: “A description you made…”) and the last commit for these files is recent (in this case: 7 minutes).\n\n\n\n\n\n\nFigure 6: GitHub after a new Commit was pushed\n\n\n\n\n5.1 Editing files in GitHub (a warning…)\nYou can edit/create/delete folders and files in GitHub. I would strongly recommend against this at this point. This can have consequences that require a better understanding of Git and GitHub than this class provides.  Instead, make all edits to your project on your computer and send (Push) it to GitHub – this is covered in the next lesson.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html#sec-invite",
    "href": "tutorials/Git/02-GitHub_Setup.html#sec-invite",
    "title": "02: GitHub Repositories",
    "section": "6 Inviting users to your repository",
    "text": "6 Inviting users to your repository\nTo invite a user (or, as GitHub calls them, collaborator) to your repository:\n\nGo to the GitHub home page for your repository and click Settings\nClick Collaborators and teams\nClick Add people\n\nYou can use either the person’s GitHub ID or their email address associated with their GitHub ID\n\n\n\n\n\n\n\n\nFigure 7: Inviting a user to your GitHub Repository\n\n\n\nAn email will be sent to the collaborator, and they can click on Accept Invitation in the email. &lt;alternatively, can they go the page directly and accept? Yes&gt;\n\n6.1 Responding to the GitHub repository invite\nWhat happens after you send an invite to another GitHub user can be a bit strange because:\n\nGitHub will email an invite to the collaborator, but will not notify the user on their GitHub account\nIf the user clicks the invite link on the email and they are not logged in to GitHub, they will see a 404 error and be prompted to log in – then they can accept the invitation\n\n\n\n6.2 Access rights on GitHub Repositories\nPersonal (i.e., free) GitHub repositories have limited access options. On a personal account, everyone you invite as a collaborator has editing rights on your repository.\n \nIf you want more control over access rights then you either need to:\n\nCreate a GitHub repository under an organization account. Educational institutions and non-profit organizations can get a free organization account – for instance, the QFC has a GitHub account. The process, however, is not simple.\nUpgrade your account, which you can do as a student for free as part of the Student Developer Kit – this includes a lot of software you probably will not use\nPay for GitHub Pro",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html#application",
    "href": "tutorials/Git/02-GitHub_Setup.html#application",
    "title": "02: GitHub Repositories",
    "section": "7 Application",
    "text": "7 Application\nAdd the instructor (GitHub user: belinskyc) to the GitHub repository you just created and give belinskyc Write access.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/02-GitHub_Setup.html#fixing-an-incorrect-link-to-a-github-repository",
    "href": "tutorials/Git/02-GitHub_Setup.html#fixing-an-incorrect-link-to-a-github-repository",
    "title": "02: GitHub Repositories",
    "section": "8 Fixing an incorrect link to a GitHub repository",
    "text": "8 Fixing an incorrect link to a GitHub repository\nThis section is only needed if the URL for the GitHub Repository was incorrectly typed or got changed.\n \nIf after you typed in the three lines in the Terminal, you received this message:\nfatal: remote origin already exists\nThen you first need to remove the current GitHub repository (i.e., the origin):\ngit remote rm origin\nThis cleans up the whole operation so you can start fresh.  After this, you need to redo the steps in Section 4.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "02: GitHub Repositories"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html",
    "href": "tutorials/Git/04-Commits.html",
    "title": "04: Commits",
    "section": "",
    "text": "Git repositories are centered around the Git Commits.  In this lesson, we will develop an intuitive understanding of how Git Commits works.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#purpose",
    "href": "tutorials/Git/04-Commits.html#purpose",
    "title": "04: Commits",
    "section": "",
    "text": "Git repositories are centered around the Git Commits.  In this lesson, we will develop an intuitive understanding of how Git Commits works.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#what-is-git",
    "href": "tutorials/Git/04-Commits.html#what-is-git",
    "title": "04: Commits",
    "section": "2 What is Git?",
    "text": "2 What is Git?\nFunctionally, Git is version control software; however, Git does not create versions of your project by taking snapshots or copies of your project. Instead what Git does is more analogous to writing a book about your project, where the Commits are the chapters in the book.\n \nIn order to use Git effectively, you need to understand how these chapters (Commits) act as version-control software. Using the analogy of a book, we are going to provide a conceptual understanding of how Git works.\n \nNote: Git is version-control software, GitHub is online storage.  So, GitHub is the online storage for the book created by Git – and your computer is the local storage for the book.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#what-is-a-repository",
    "href": "tutorials/Git/04-Commits.html#what-is-a-repository",
    "title": "04: Commits",
    "section": "3 What is a repository ",
    "text": "3 What is a repository \nA Git repository is always attached to a project folder.  The “book” about the project, including all the Commits, is contained in the hidden .git folder inside your project folder. In many ways, the .git folder is the Git repository.\n \nIf this is an RStudio Project, then the Project Folder also:\n\ncontains an *.Rproj file\nis the Working Directory for your project\n \n\nNote: a project technically does not include the project folder itself, only what is inside the folder.  This means that you can name the Project Folder whatever you want.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#using-git-is-like-writing-a-book",
    "href": "tutorials/Git/04-Commits.html#using-git-is-like-writing-a-book",
    "title": "04: Commits",
    "section": "4 Using Git is like writing a book",
    "text": "4 Using Git is like writing a book\nWhen you use Git on a project folder, you are essentially writing a book about your project. The book does not contain everything inside your project folder – you can be selective about what gets included in the book and when it gets included.\n \nAt the broad level, the book created by Git contains two things:\n\nAn index, which lists every file in the project that is mentioned in the book.\nChapters that contain information about file changes –  these are the Commits\n \n\nNote: for now we are treating the Project as linear (i.e., a book) – later we will deal with branches and merges that add a non-linear aspect to the project. However, the concepts of index and chapters still apply.\n\n4.1 The index\nThe index contains a list of every file mentioned in the book along with the chapters the files are mentioned in.\n \nNot every file in your project will be in the index. Generally speaking, the files not included in the index are the files that collaborators do not need.\n \nSome reasons a project file will not be in this book is:\n\nThe file contains local information only (e.g., your RStudio Project settings, the R history file)\nThe file is data generated by executing a script (i.e., the person downloading your project can generate the data themselves)\nThe file is a test or temporary file\n \n\nNote: .gitignore contains a list of files that are not included in the book (i.e., the files that do not get indexed)\n\n\n4.2 The chapters (Commits)\nThe Commits are the chapters of the book.  A Commit contains an introduction (the Commit Message) and changes to the files in your project.\n \nThese changes in the chapters (Commits) include:\n\nFiles added to project – the chapter will contain the file name and the content of the new file\nFiles removed from project\nFiles renamed – the chapter will contain the old and new name of the file\n\nRemeber that folders in Git are part of the file name, so a folder name change in Git would be a file name change for every file in the folder.\n\nFiles modified (the most common) – the chapter will contain the content that was changed in the file\n\n \nYou do not have to include every file change in a project to a Commit. You might decide that changes to certain files are not ready to be committed yet (e.g., the changes are still in beta) – and include the file changes in a later chapter.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#how-the-book-acts-as-version-control-software",
    "href": "tutorials/Git/04-Commits.html#how-the-book-acts-as-version-control-software",
    "title": "04: Commits",
    "section": "5 How the book acts as version control software",
    "text": "5 How the book acts as version control software\nThe big thing to understand about Git is that Git does not store files – Git stores changes to files (in the .git folder).\n \nSo, if you create a file called cheese.r, add a bunch of code to it, and Commit the file…\n \nGit will:\n\nadd cheese.r to the book index\nput an entry in the chapter (i.e., Commit) that says cheese.r was created\nput the content of cheese.r in the chapter – since this is the first entry for cheese.r, the content of the whole script is written to the chapter\nadd this chapter to the cheese.r link in the index\n\n\n\n\n\n\n\nFigure 1: Git adding a new file, cheese.r, and its content to a chapter (Commit)\n\n\n\n \nLater on, you realize you made mistake on line 12:\nelse if(cheeseAns == \"M«eu»nster\")\nAnd change the line to:\nelse if(cheeseAns == \"M«ue»nster\")\nand Commit the file to a new chapter…\n \nGit will:\n\nput an entry in the new chapter that says something to the effect of:\n\ncheese.r line 12 replaced with else if(cheeseAns == “Muenster”)\n\nadd this chapter to the cheese.r link in the index\n \n\nThe image below shows the line change by putting the deleted line 12 in red and the new line 12 in green\n\n\n\n\n\n\nFigure 2: Git writing the modification to cheese.r in a chapter (Commit)\n\n\n\nNote: Chapters (i.e., Commits) usually contain information about the changes to many files – as we will see when we get to the RStudio example.\n\n5.1 How Git creates “versions” of a file\nThe index for your book gives all the chapters that contain information about the file cheese.r. With this information, Git can reconstruct the file cheese.r to any point in time when cheese.r was committed to a chapter. Git does this by reading all the chapters that contain information about cheese.r up until the chapter that reflects the point in time you want cheese.r restored to.\n \nGit works great for text files (e.g., scripts) as text files tend to be small and changes to scripts tend to be iterative; however, Git does not work well with media files (e.g., images, videos). Extension: Why Git is bad for media files\n\n\n5.2 How Git creates “versions” of your project\nA single chapter (i.e., Commit) does not contain enough information to recreate your project.  However, reading the book up until and through the chapter does have the necessary information to recreate your project.\n \nIn other words, if you want to restore your project to the 15th chapter (i.e., 15th Commit) then Git will read the whole book up until chapter 15.  Git will reconstruct all the files that existed in your project in those chapters using the information in those chapters. The result is a project that is in the same state as the project in chapter 15.\n \nNote: Actually, Git reads the book backwards. In other words, Git starts with the newest chapter and undoes changes as it read the chapters in reverse order. This just happens to be more computationally efficient and is a subtle detail that will not affect anything until you get really advanced with Git.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#staging-and-commits-in-rstudio",
    "href": "tutorials/Git/04-Commits.html#staging-and-commits-in-rstudio",
    "title": "04: Commits",
    "section": "6 Staging and Commits in RStudio",
    "text": "6 Staging and Commits in RStudio\nYou do not have to Commit every file change.  You can keep some of your file changes local-only permanently (i.e., never Commit the file) or temporarily (i.e., add the file changes to a future Commit).\n \nnote: If you have a file that you know you never want to Commit, then you should put the file in .gitignore\n \nThe process of choosing which files changes get added to the next Commit is called Staging.  Staging is done in the Staging Area, which is the place that lists all the file changes that have never been Committed.\n \nIn the second example I will Commit one change to the RStudio Project using Git:\n\ntest1.r renamed to test4.r\n\n\n6.1 The Staging Area\nAll uncommitted file changes (i.e., changes not written to a chapter yet) to files not in .gitignore will appear in the Staging Area. The Staging Area lists all uncommitted changes to your project files and is located in two places in RStudio:\n\nThe Git tab\nThe Review Changes window after you click Commit in the Git tab\n\n \nThese two Staging Areas are the same. You can work from either one  – changes to one are reflected in the other.\n \nThis Staging Area shows two files:\n\ntest2.r was edited (i.e.,  it was previously Committed and recently modified)\ntest3.r was created (i.e., it has never been Committed)\n \n\n\n\n\n\n\n\nFigure 3: The duplicate Staging Areas above both reflect the fact that there are two files with uncommitted changes: test2.r and test3.r\n\n\n\n\n\n6.2 File codes\nEvery file in the Staging Area will have a code next to it that gives its status.  The most common codes are:\n\nA (green): file has been added\nD (red): file has been deleted\nM (blue): file has been modified\nR (purple): file has been renamed\n? (yellow): unknown because file has never been indexed (i.e., it is a new file) or is in a conflict state (we will deal with this in a later lesson)\n\n\n\n6.3 Pre-staged and staged codes (right/left-side)\nThe files listed in the Staging Area have changes not reflected in the repository (i.e., the book). Checking the file means you are going to include it in this Commit (i.e., chapter).  This is called Staging.  You do not have to Stage every file change (i.e., you do not have to check every file).\n \nFor each file in the Staging Area, there are two sets of codes:\n\none on the right-side – this is Git’s best guess for the status of the pre-staged file\none on the left – this is the status of the staged file\n \n\nThe ? is the only code to appear on both sides at once (this is something I find confusing).  However, once the file is checked (i.e., the file is staged), the ? will change to one of the other codes. \n\n\n6.4 Staging Example 1: A modified file and an added file\nIn Figure 4, Git shows that test2.r has been modified and test3.r is unknown; however, checking the files (i.e., Staging) changes the status of test3.r to a green A (added).  The status of test2.r remains the same after checking.\n\n\n\n\n\n\nFigure 4: Checking the files Stages them for the next Commit (i.e., chapter)\n\n\n\nThe reason that test3.r initially had a status of unknown, is that the file did not exist in the index of the book (because it is a new file).  So, Git is not sure of the exact status of the file until it is Staged.  In the next example, we will see a file go from unknown to renamed.\n \nIf you Commit the changes to both files then they will both disappear from the Staging Area. If you Commit the changes to only one file then the other file will remain in the Staging Area – and you can Commit it later.\n\n\n6.5 Staging example 2: Renaming a file\nFor this example, I renamed test1.r to test4.r. In the Staging Area, Git labels test1.r as deleted and test4.r as unknown.\n\n\n\n\n\n\nFigure 5: The Staging Area after test1.r was renamed test4.r\n\n\n\nIf you stage both files, Git will realize that the two changes were really only one change – a renamed file:\n\n\n\n\n\n\nFigure 6: After Staging the changes, Git changes the status to one file that has been renamed\n\n\n\nThe renamed status only applies when the file names changes and the file content stays the same. If you edit test4.r in any way before Staging then Git will think that you deleted test1.r and added a new file called test4.r.\n\n\n6.6 The uncommitted files &lt;in lesson 1- sec8.1&gt;\nJust a reminder that the file .gitignore contains an editable list of files that do not get committed (i.e., these files never get indexed in the book).\n \nA .gitignore file:\n.Rproj.user\n.Rhistory\n.RData\n.Ruserdata\ndoNotShare/ \n*.tmp \ntest1/*.jpg \n/test2/data/weatherData.csv\nweatherData2.csv\nThe top four files are added by RStudio because they only have meaning to the local user.  The others I have added: \n\n*: file names that start with ( ~ ), these are temporary files\ndoNotCommit/:  Everything in the folder doNotCommit – not necessary but it helps me to have this folder\nall files will extension .tmp\nall .jpg files inside the test1 folder\nthe weatherData.csv file inside the test2/data folder\n\n \nExtension: Ignoring a Committed file",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#pushing-commits-to-github",
    "href": "tutorials/Git/04-Commits.html#pushing-commits-to-github",
    "title": "04: Commits",
    "section": "7 Pushing Commits to GitHub",
    "text": "7 Pushing Commits to GitHub\nJust as a reminder – when you create a Commit (i.e., a chapter in the book), the Commit exists only on your computer.  To send the new Commits to GitHub (and, hence, the outside world), you need to Push the Commits by clicking the green up arrow.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#folder-paths-and-git",
    "href": "tutorials/Git/04-Commits.html#folder-paths-and-git",
    "title": "04: Commits",
    "section": "8 Folder paths and Git",
    "text": "8 Folder paths and Git\nIf you move a file to a new folder in your project then Git will also see this as a file being renamed (assuming you did not edit the file’s content).  This is because Git sees the folder path as part of the file name.\n \nAs reflected in the Staging Areas above, Git does not see files named test1.r, test2.r, etc… Git sees file paths named scripts/test1.r, scripts/test2.r, etc…  From Git’s perspective, moving a file to a new folder just changes the path name, hence the file gets the renamed status.\n \nSo if you create a new folder called oldScripts and move test1.r to that folder then Git sees a file that has been renamed:\nscripts/test1.r  -&gt;  oldScripts/test1.r\n \nOr, if you create a folder within scripts called oldStuff and move test2.r to that folder then Git sees this renamed situation:\nscripts/test2.r  -&gt;  scripts/oldStuff/test2.r\n \nLastly, you can rename the file and move it to a new folder and Git will still see it as a renamed situation:\nscripts/test3.r  -&gt;  oldscripts/2021/January/oldTest3.r\n…as long as the content of oldTest3.r and test3.r are the same",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#application",
    "href": "tutorials/Git/04-Commits.html#application",
    "title": "04: Commits",
    "section": "9 Application",
    "text": "9 Application\nA) Create 4 new Commits in your RStudio Project:\n\nA Commits where four files are added to your scripts folder: test1.r, test2.r, test3.r, and test4.r\n\nmake sure each file has content but the content does not matter (e.g., it does not have to be a working script)\n\nA Commit where the content in test2.r and test4.r is modified\nA Commit where test3.r is deleted\nA Commit where test1.r is renamed to test5.r and moved to the folder scripts/oldStuff\n \n\nB) Make sure you put an informative Commit Message for each Commit!\n \nC) Create an Issue in GitHub and add belinskyc as an assignee (Figure 7). In the issue text say that you have completed the application.  This will only work if you have already added belinskyc as a collaborator and belinskyc accepted.\n\n\n\n\n\n\nFigure 7: Creating an Issue in GitHub and adding an assignee",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#extension-why-git-is-bad-for-media-files",
    "href": "tutorials/Git/04-Commits.html#extension-why-git-is-bad-for-media-files",
    "title": "04: Commits",
    "section": "10 Extension: Why Git is bad for media files",
    "text": "10 Extension: Why Git is bad for media files\nGit does not store files, instead it stores the changes to the files. Script files are not very big to begin with…often measuring kilobytes in size. When you make changes to a script file, you are often just changing a few lines – so, the changes often measure less than one kilobyte in size.\n \nMedia (e.g., images and videos), on the other hand, is much larger than script files and when you change the media, you are effectively rewriting the whole file. So, if you are using Git to write the media changes to a chapter (i.e., Commit), then each time there is a change you are essentially rewriting the whole media file to the chapter.  In other words, each time you are adding an entry to a chapter that is the size of the media file.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/04-Commits.html#extension-ignoring-a-committed-file",
    "href": "tutorials/Git/04-Commits.html#extension-ignoring-a-committed-file",
    "title": "04: Commits",
    "section": "11 Extension: Ignoring a Committed file",
    "text": "11 Extension: Ignoring a Committed file\nGit will not ignore a file in .gitignore if the file has already been indexed (i.e., was added to a previous Commit/Chapter). If you want to remove a file from your book, then you need to use the Terminal tab.\ngit rm \"data/doNotWantThis.R\" -f\nThis command deletes the file from the index.  This means future changes to the file will be ignored if the file is in .gitignore.\n \nHowever, there are still references to the file in the previous Commits and the file could be reconstructed by a collaborator.  If you want to remove all references to the file (e..g, the file contain sensitive information) then you have to do something like this:\nhttps://stackoverflow.com/questions/43762338/how-to-remove-file-from-git-history",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "04: Commits"
    ]
  },
  {
    "objectID": "tutorials/Git/06-Project_History.html",
    "href": "tutorials/Git/06-Project_History.html",
    "title": "06: Project History",
    "section": "",
    "text": "include GitHub History view",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "06: Project History"
    ]
  },
  {
    "objectID": "tutorials/Git/06-Project_History.html#purpose",
    "href": "tutorials/Git/06-Project_History.html#purpose",
    "title": "06: Project History",
    "section": "1 Purpose",
    "text": "1 Purpose\nTo learn how to read the Project History and use the history to revert a file or the whole project to an earlier state.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "06: Project History"
    ]
  },
  {
    "objectID": "tutorials/Git/06-Project_History.html#project-history",
    "href": "tutorials/Git/06-Project_History.html#project-history",
    "title": "06: Project History",
    "section": "2 Project History",
    "text": "2 Project History\nThe Project History shows all of the Commits and changes between the Commits (i.e., the Diff).  You can view the Project History by clicking on the clock button in the Git tab:\n\n\n\n\n\n\nFigure 1: The Project History button in the Git tab\n\n\n\nThe opens up the Review Changes window in history mode.  There is a lot going on in this page – but we are at the point where we can understand most of it… so let’s break it down.\n\n\n\n\n\n\nFigure 2: The Project History window – it can be a bit intimidating at first!\n\n\n\n\n2.1 Sections of the Project History window\nIn Figure 2, I labeled the fours sections of the window with blue letters. \nThe four sections are:\n\nOptions to filter which Commits you want to look at\nAll the Commits in the Project (there are 74 in total in this project)\nSpecific information about the Commit that is highlighted in section B\nA Summary of the Diff from the Commit highlighted in section B\n\n\n\n2.2 Components in the sections\nFollowing are the 11 components in Figure 2 .  The description of the component will start will the section/sections it is in:\n1) (A) Dropdown to choose the branch you want to look at – we will cover branches in a future lesson\n \n2) (A) Dropdown to filter the Commit by which files have been changed – we will see this used later in this lesson\n \n3) (A,B) Subject of the Commit is the same as Commit Message (I wish they just called it Commit Message)\n \n4) (A,B) The Author and email are the values entered when you typed these lines into the Terminal:\ngit config --global user.name \"&lt;NameHere&gt;\"\ngit config --global user.email \"&lt;EmailHere&gt;\"\nThis information is only used in the Commit to list the author and email.\n \n5) (A,B) The Date is the date and time the Commit was created\n \n6) (B,C) The SHA is a unique identifier for the Commit.  In section A, only the first 8 characters of the SHA are shown, in section B, all 40 characters of the SHA are shown.  You use the SHA to refer to a Commit (e.g., if you want to recover the files from a specific Commit) and you only need to use the first 8 characters. We will use this later in this lesson to recovery an old project state.\nNote: SHA stands for Secured Hack Algorithm and deals with cryptography that we do not need to know here\n \n7) (B) Parent is the parent Commit of the Commit highlighted.  If all the Commits are linear, then it is simply the Commit right before the highlighted Commit.  When we deal with branches and merges, you will see that a Commit can have more than one parent.\n \n8) (B) The most advanced part of this page and something we will cover when we get to branching.\n \n9) (C) The files that were added, deleted, or modified in this Commit.  This is not complete!  In this Commit, test1.r was renamed to test5.r, but a rename is not reflected here.  This is because this is RStudio’s visual representation of a Git Commit and it is not a perfect representation.  If you want to see the complete (but gory) details of all the changes in the Commit, then you need to type in the Terminal\ngit show &lt;SHA_of_Commit&gt;\nSo, in this case:\ngit show c8022b6e\nThis will give you all the information about changes in the Commit including the renamed file (highlighted) – albeit in a less-friendly format:\n\n\n\n\n\n\nFigure 3: Using the Terminal to see the changes in a Commit\n\n\n\n \n10) (D) A summary of the Diff for each changed file.  If the file was added then it will show all lines in green. If the file was removed then it will show all lines in red.   The Terminal version of the summary (Figure 3) specifically says when files are added and deleted whereas the RStudio version does not.  There is a file added and one file deleted – I will let you find those lines in the Terminal if you want…\n \n11) (D) A link to view the file – this will be used later in this lesson to recover an older version of a file.  Notice that the file at the bottom of section D (test file.txt) has no link – this is because the file was deleted.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "06: Project History"
    ]
  },
  {
    "objectID": "tutorials/Git/06-Project_History.html#file-recovery",
    "href": "tutorials/Git/06-Project_History.html#file-recovery",
    "title": "06: Project History",
    "section": "3 File recovery",
    "text": "3 File recovery\nAny file within your project can be restored (technically, reverted) to an older version.  The file can be reverted to any previous version of the file that was put into a Commit.\n \nThe process for reverting a file is:\n\nOpen the Project History\nFilter the Commits by the file you want to revert\nOpen the file from the previous Commit and save it\nCommit the reverted file\n\n \nTechnically, what Git is doing is reversing all the changes made between the older version of the file and the current version. The Diff consists of all the revisions (additions, deletions, etc.) and this is saved each time you commit. So the reverted version of the file becomes the newest version, but all the previous versions of the file are still in the history including the most recent one.\n\n3.1 Use Project History to find file\nWe need to first get to the Project History – this is in the same Review Changes window as the Diff and the Commits.  Just click History when you are in the window to get to the Project History.\n\n\n\n\n\n\nFigure 4: The Project History tab in the Review Changes window\n\n\n\nIn the top part of the window is a listing of every Commit in the project along with the comment attached to the Commit, the person who Committed it, date, and the SHA which will be important later.\n\n\n3.2 Filtering Commits by a file\nWe do not want to see all Commits, we only really want to see the Commits that are relevant to the file we want to revert.  We can filter the Commit to only show those that reflect changes to a specific file (in this case, scripts/test4.r) by\n\nClicking on (all commits)\nClick on Filter by File…\nChoose the file in the File Explorer window (or Finder window on Mac) and click Open\n\n\n\n\n\n\n\nFigure 5: Filtering Commits by a single file\n\n\n\n\n\n3.3 Reverting file to older version\nAfter filtering we see that, in this example, 5 Commits had changes to test4.r.  I am going to revert the file back to the first Commit.  This particular Commit had changes to two files: data/test3.r and scripts/test4.r (but we only care about the latter).\n\n\n\n\n\n\nFigure 6: Choosing which Commit you want to revert the file back to\n\n\n\nWe can view the file test4.r as it was in the Commit by clicking on the View file @ text.  This will bring the file up in a separate window:\n\n\n\n\n\n\nFigure 7: The old version of the file appears in a new Window.\n\n\n\nNote: A Commit only has changes to the file so, to show the file as it was for that Commit, Git goes through all the intermediate Commits and calculates the content of the file using the Diffs. \n\n\n3.4 Recommitting the previous version of the file\nYou can save the file into your project by clicking the Save As button.  You can save the file under a new name or under the same name (thereby overwriting the file).  We are going to save it under the same name, test4.r – this will give you a warning that you are overwriting a file, that is OK.\n \nNow that we have saved changes to the test4.r file, let’s Commit this change.  We will put in a Commit Message that says, “Restored test4.r”.  In the Diff section of the Commit window notice that Git just sees this as a file that got edited and it just happens that the edits put the file back to a previous state.\n\n\n\n\n\n\nFigure 8: Commit the test4.r file reversion\n\n\n\nAfter you Commit the changes, close the Review Changes window, open it back up (the close and open is needed to force a refresh) in the History tab, filter by the test4.r file and you will see that there is a new Commit that reflected the Commit message just written:\n\n\n\n\n\n\nFigure 9: The Project History tab reflects the new Commit just created\n\n\n\nWhat this means is that you can still restore test4.r to any previous state – including the one you just deleted.  Git, by default, never erased any history on your Project.  Every file can be restored to any state from a previous Commit and Commit, by default, are not deleted.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "06: Project History"
    ]
  },
  {
    "objectID": "tutorials/Git/06-Project_History.html#project-recovery",
    "href": "tutorials/Git/06-Project_History.html#project-recovery",
    "title": "06: Project History",
    "section": "4 Project recovery",
    "text": "4 Project recovery\nIn the last section we revert one file back to its state in a previous Commit.  You can also restore the whole Project (i.e., every file in a Commit) to a previous state.  This is similar to reverting a file back to a previous Commit except that it reverts all files back to that Commit.\n \nJust like the File Recovery, a Project Recovery creates a new Commit that reflects all the changes but you do not lose the previous state of your project – that still exists in the previous Commits.\n \nNote: make sure the dropdown filter is set back to (all commits).\n\n4.1 Choosing a Commit to revert to\nTo revert to a previous version of the project, we need to have the identifier of the Commit we want to revert to.  That identifier is called the SHA and it is in the last column of the Project History.\n\n\n\n\n\n\nFigure 10: The identifier for the Commit – an 8-digit string called the SHA\n\n\n\nIn the figure above, we are choosing the Commit that was 5 Commits previous to the current.  But, in order to revert back to that Commit, Git must revert all the changes made in the Commits in between the two Commits.  This is more advanced and a little more dangerous than reverting a file so there is no button clicks that will do it – you need to use the Terminal.\n \nThe Terminal command is:\ngit revert --no-commit &lt;SHA&gt;..HEAD\nwhere, in my case, the SHA is 0f15ecf7 so…\ngit revert --no-commit 0f15ecf7...HEAD\n\n\n\n\n\n\nFigure 11: Terminal command to revert the project to a previous Commit\n\n\n\nWhat this does it is revert the file changes in all of the Commits in between the current one and the one you revert to.  The file changed will be reflected in your Project and the Staging Area – the changes have not be Committed at this point.\n \nWhen we open up the Commit window, we see that 6 files were changed, meaning that these 6 files changed between the current Commit and the Commit we are reverting to.\n\n\n\n\n\n\nFigure 12: 6 files were changed when we reverted to the older Commit – Committing the reversions\n\n\n\nLet’s Commit the changes (i.e., reversions) and look at the new Project History:\n\n\n\n\n\n\nFigure 13: The Project history after the Project was reverted to a previous Commit\n\n\n\nNotice that the newest Commit has a Diff section that reflects changes to 6 files – the 6 files that got reverted.  Also, notice that no Commits were deleted – so, if you decided that you were wrong to revert the project, you can restore (or, re-revert) the Project to the previous Commit.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "06: Project History"
    ]
  },
  {
    "objectID": "tutorials/Git/06-Project_History.html#application",
    "href": "tutorials/Git/06-Project_History.html#application",
    "title": "06: Project History",
    "section": "5 Application",
    "text": "5 Application\nIn your RStudio Project:\n1) one file to a previous state\n2) Set your Project back to a previous state\n \nMake sure your Commit Messages accurately reflect what is happening.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "06: Project History"
    ]
  },
  {
    "objectID": "tutorials/Git/08-Branches.html",
    "href": "tutorials/Git/08-Branches.html",
    "title": "08: Branches",
    "section": "",
    "text": "Show how to create a branch of your project.\n– start with branches within one repository\n - talk about origin/master/other branch names\n - head (checkout branch/remote branch/ end of branch – unless detached)\n\n\nNote that history from the origin is based on the last time you Pulled.\n \n- switching branches switches your project\n- PUSH and PULL only work on the branch you are on\n- When project is new you will Pull only Master (but can see other branches)\n- PULL will inform you that a new branch exists and list the branch under Origin – it will not get the files",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "08: Branches"
    ]
  },
  {
    "objectID": "tutorials/Git/08-Branches.html#purpose",
    "href": "tutorials/Git/08-Branches.html#purpose",
    "title": "08: Branches",
    "section": "",
    "text": "Show how to create a branch of your project.\n– start with branches within one repository\n - talk about origin/master/other branch names\n - head (checkout branch/remote branch/ end of branch – unless detached)\n\n\nNote that history from the origin is based on the last time you Pulled.\n \n- switching branches switches your project\n- PUSH and PULL only work on the branch you are on\n- When project is new you will Pull only Master (but can see other branches)\n- PULL will inform you that a new branch exists and list the branch under Origin – it will not get the files",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "08: Branches"
    ]
  },
  {
    "objectID": "tutorials/Git/08-Branches.html#terminology",
    "href": "tutorials/Git/08-Branches.html#terminology",
    "title": "08: Branches",
    "section": "2 Terminology",
    "text": "2 Terminology\nMaster: the main branch of your project.  If you create no branches in your project then you only have the master branch\nOrigin: the location of the remote repository (you can change the name but origin is default and typically what is used)\nNote: You can have multiple remote repositories – but this is rare.  If you did have multiple remote repositories then Origin is the location of the original remote repository\nHead: the current working Commit (usually at the tip of a branch – the last Commit on the branch)\n- more advanced: you can “checkout” an older Commit and this Commit would have HEAD attached to it\n \n– Is there a HEAD to each branch or just one HEAD?  Just one.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "08: Branches"
    ]
  },
  {
    "objectID": "tutorials/Git/08-Branches.html#user-created-branches",
    "href": "tutorials/Git/08-Branches.html#user-created-branches",
    "title": "08: Branches",
    "section": "3 User-created branches",
    "text": "3 User-created branches\nIn the previous lesson, we saw how Git crates a branch whenever two different people work are editing the same Commit – let’s say it is Commit #15.  Git will then attempt to merge the branched Commit (16a and 16b) into one Commit (16).  As long as the two people are editing different files or editing different places in the same file, Git will most likely be successful at merging the Commits.  If not, then the second user to create Commit #16 needs to manually merge the branched Commit by fixing the conflicts.\n \nHowever, there are times where people want to create and maintain new branches of their project. \n \nSome of these reasons are:\n- You want to test out code and do not want to interfere with the main project\n- You are starting a new version of your project but still want to maintain the old version\n- Multiple people want to try multiple solutions to the same problem\n\n3.1 Branches and Commits\nBranches within a project essentially create a project within a project\n \n&lt;image of branched project with Commit numbers&gt;\n \nNote: Branches can be merged back into the main project",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "08: Branches"
    ]
  },
  {
    "objectID": "tutorials/Git/08-Branches.html#new-branches",
    "href": "tutorials/Git/08-Branches.html#new-branches",
    "title": "08: Branches",
    "section": "4 New Branches",
    "text": "4 New Branches\n\nYour RStudio Project can only reflect one branch at a time, you can change the branch using the branch drop-down (show image):\n \nBranch Name: Name of the branch you created – this will appear as an option in the branch drop-down\nRemote: The name of the online repository – you can connect different branches to different repository\n – typical, the “main” repository is called origin – although this is not necessary\nAdd Remote: Link to a repository not currently on your list\nSync branch with Remote: if uncheck then this branch will only exist on your computer\n&lt;do not do anything with Remote – this will open a Pandora’s Box!&gt;",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "08: Branches"
    ]
  },
  {
    "objectID": "tutorials/Git/08-Branches.html#branch-drop-down",
    "href": "tutorials/Git/08-Branches.html#branch-drop-down",
    "title": "08: Branches",
    "section": "5 Branch drop-down",
    "text": "5 Branch drop-down\n\nThe branch drop-down lists all of the branches in your project.  The original branch was called master &lt;is this always true?&gt; and the original repository is called origin &lt;does not have to be true&gt;.  The dropdown menu also organizes the branches by which remote they are attached to…\n \nNote: notRemote is not listed in the sections underneath because it is not attached to a repository (it is local only)\n \nMy questions:\nAre the branches listed with the repository the exact same as the branches listed with the local computer (maybe?!? - you can checkout branches and also have changes not Pushed/Pulled – check this – does not seem to matter).  Perhaps there will be a difference if you have checked out a Commit.  But, why give the option to work with the Remote branch instead of the local branch?",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "08: Branches"
    ]
  },
  {
    "objectID": "tutorials/Git/08-Branches.html#git-concepts",
    "href": "tutorials/Git/08-Branches.html#git-concepts",
    "title": "08: Branches",
    "section": "6 Git concepts",
    "text": "6 Git concepts\nBefore we get into the error messages, we will start with the Git concepts that are involved in these issues: branches, merges, and conflicts.\n\n6.1 Branches\nUp until this point in this class, every Commit belonged to one branch, called the master branch.  This meant that the Commits were all linear – like chapters in a book.  In Git parlance, every Commit has exactly one child Commit and one parent Commit (except the first and last Commit).\n \nHowever, in Git a project can have multiple branches.  In other words, a Commit can have more than one child Commit – think of it as a fork in the project.\n \nThere are two types of branches in Git:\n\nUser-created branches: The main reason for someone to create a branch in a project is to test out new features without including them in the main (master) branch until they have been tested.  We will talk more about creating your own branches in the next lesson.\n\nGit-created branches: When multiple people are working on the same project, they essentially are all working off of the same book – and they are all writing the next chapter.  So, if the book has 15 chapter (i.e., Commits), then everyone is writing a 16th chapter.  Effectively, everyone is creating a branch.  Most of the time, Git will merge those branches together behind-the-scenes.",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "08: Branches"
    ]
  },
  {
    "objectID": "tutorials/Git/notes.html",
    "href": "tutorials/Git/notes.html",
    "title": "notes",
    "section": "",
    "text": "Push and Pull only operate on the branch you are currently working on\nDetached Head: when the Head is not pointing to the end of a branch\nrefs: list all head/master\norigin: remote repository (as of last Pull)\nHEAD: point to the currently checked out branch – usually the end unless the head is detached\n- can have multiple (worktree) – this is advanced!\nmaster: end of main branch\n&lt;name of branch&gt; - end of another branch\norigin/master - end of remote master branch\norigin/&lt;name of branch&gt; - end of another remote branch\nNote: origin is the name typically used for the remote repo – it does not have to be that name\norigin/HEAD - remote checkedout branch\nHEAD -&gt; refs/head/master (similar to folder linking?)",
    "crumbs": [
      "<b>QFC Assets and Tutorials</b>",
      "notes"
    ]
  },
  {
    "objectID": "tutorials/Quarto/Quarto.html",
    "href": "tutorials/Quarto/Quarto.html",
    "title": "Quarto Installation and help",
    "section": "",
    "text": "This document was created and is maintained by Charlie Belinsky and lives here: https://qfcatmsu.github.io/tutorials/Quarto.html. It is meant to be a living document so expect to see changes on it. Feel free to email me with questions and/or suggestions.\n\n\n\nexplanation of the two types of Quarto editors (visual and source)\nusing headers in quarto\nbetter organization of the document and presentation types\nrendering doucments"
  },
  {
    "objectID": "tutorials/Quarto/Quarto.html#info",
    "href": "tutorials/Quarto/Quarto.html#info",
    "title": "Quarto Installation and help",
    "section": "",
    "text": "This document was created and is maintained by Charlie Belinsky and lives here: https://qfcatmsu.github.io/tutorials/Quarto.html. It is meant to be a living document so expect to see changes on it. Feel free to email me with questions and/or suggestions.\n\n\n\nexplanation of the two types of Quarto editors (visual and source)\nusing headers in quarto\nbetter organization of the document and presentation types\nrendering doucments"
  },
  {
    "objectID": "tutorials/Quarto/Quarto.html#install-quarto",
    "href": "tutorials/Quarto/Quarto.html#install-quarto",
    "title": "Quarto Installation and help",
    "section": "2 Install Quarto",
    "text": "2 Install Quarto\nYou need to download and install Quarto version 1.4, which, as of November 16, 2023, is the pre-release version.\nhttps://quarto.org/docs/download/prerelease.html\nThe released version of Quarto (1.3) will not work.\n\n2.1 RStudio\nQuarto has worked for me on every 2023 version of RStudio, however it is recommended to get the latest RStudio because RStudio is constantly updating its Quarto interface (both Quarto and RStudio are developed by the same company, posit)\n\n\n2.2 Packages needed\nYou need to install RmarkDown:\ninstall.packages(\"rmarkdown\")"
  },
  {
    "objectID": "tutorials/Quarto/Quarto.html#installation-of-latex-on-windows-tinytex",
    "href": "tutorials/Quarto/Quarto.html#installation-of-latex-on-windows-tinytex",
    "title": "Quarto Installation and help",
    "section": "3 Installation of LaTex on Windows (tinyTeX)",
    "text": "3 Installation of LaTex on Windows (tinyTeX)\nThis is only needed if you plan to render a Quarto document directly to PDF format.\nInstall the tinytex package (from CRAN):\ninstall.packages(\"tinytex\")\nUse the tinytex package to install the tinytex application:\ntinytex::install_tinytex()\n\n3.1 Update issue with tinyTeX\nWhen rendering a PDF Quarto might prompt you to update tlmgr, which is your LaTeX distribution. You will not be able to render a PDF until the update has occurred but following Quarto’s prompts will NOT be successful.\nYou need to update tlmgr manually by running:\ntinytex::tlmgr_update()"
  },
  {
    "objectID": "tutorials/Quarto/Quarto.html#starting-a-new-quarto-document",
    "href": "tutorials/Quarto/Quarto.html#starting-a-new-quarto-document",
    "title": "Quarto Installation and help",
    "section": "4 Starting a new Quarto document",
    "text": "4 Starting a new Quarto document\nIn RStudio, click File -&gt; New File -&gt; Quarto document…\n\n\n4.1 Quarto document options\nThere are three types of documents you can create in Quarto:\n\nHTML document\nPDF document (requires a LaTex installation)\nWord document\n\n\n\n4.2 HTML and PDF documents\nIf you want a document that can be both HTML and PDF then:\n\nCreate an HTML document.\nOpen the HTML document in any browser\nUse the Print dialog and Print to a PDF\n\nNote: This method does not require a LaTeX installation."
  },
  {
    "objectID": "tutorials/Quarto/Quarto.html#starting-a-new-quarto-presentation",
    "href": "tutorials/Quarto/Quarto.html#starting-a-new-quarto-presentation",
    "title": "Quarto Installation and help",
    "section": "5 Starting a new Quarto presentation",
    "text": "5 Starting a new Quarto presentation\nIn RStudio, click File -&gt; New File -&gt; Quarto presentation…\n\n\n5.1 Quarto presentation options\n\nReveal JS presentation (a webpage designed like PowerPoint)\nBeamer presentation (a PDF designed like PowerPoint)\nPowerPoint\n\n\n\n5.2 HTML and PDF presentations\nIf you want a PowerPoint-like presentation that can be both HTML and PDF then:\n\nCreate an Reveal JS document.\nOpen the HTML document in Chrome\nClick “E” on the webpage\nUse the Print dialog and Print to a PDF\n\nNote: This method does not require a LaTeX installation."
  }
]