---
title: "06: Project History"
short: "06"
# special characters for highlighting code : «»
---

## Purpose

To learn how to read the Project History and use the history to revert a file or the whole project to an earlier state.

## Project History

The Project History shows all of the Commits and changes between the Commits (i.e., the Diff).  You can view the Project History by clicking on the clock button in the ***Git*** tab:

![The Project History button in the Git tab](images/GH-GoToProjeHist.jpg){#fig-ProjHist-Git .fs}

The opens up the ***Review Changes*** window in ***history*** mode.  There is a lot going on in this page -- but we are at the point where we can understand most of it... so let's break it down.

![The Project History window -- it can be a bit intimidating at first!](images/GH_ProectjHistory.jpg){#fig-ProjHist_Window .fs}

### Sections of the Project History window

In @fig-ProjHist_Window, I labeled the fours sections of the window with blue letters. 

The four sections are:

1.  Options to filter which Commits you want to look at

2.  All the Commits in the Project (there are 74 in total in this project)

3.  Specific information about the Commit that is highlighted in section B

4.  A Summary of the Diff from the Commit highlighted in section B

### Components in the sections

Following are the 11 components in @fig-ProjHist_Window .  The description of the component will start will the section/sections it is in:

1\) (A) Dropdown to choose the branch you want to look at -- we will cover this in a future lesson

 

2\) (A) Dropdown to filter the Commit by which files have been changed -- we will see this used later in this lesson

 

3\) (A,B) The Subject of the Commit is the same as the Commit Message (I wish they just called it the same thing in both places...)

 

4\) (A,B) The Author and email are the values entered when you typed these lines into the Terminal:

``` bash
git config --global user.name "<NameHere>"
git config --global user.email "<EmailHere>"
```

This information is only used in the Commit to list the author and email -- it is not login information. 

 

5\) (A,B) The Date is the date and time the Commit was created

 

6\) (B,C) The SHA is a unique identifier for the Commit.  In section A, only the first 8 characters of the SHA are shown, in section B, all 40 characters of the SHA are shown.  You use the SHA to refer to a Commit (e.g., if you want to recover the files from a specific Commit) and you only need to use the first 8 characters. We will use this later in this lesson to recovery an old project state.

[Note: SHA stands for Secured Hack Algorithm and deals with cryptography that we do not need to know here]{.note}

 

7\) (B) Parent is the parent Commit of the Commit highlighted.  If all the Commits are linear, then it is simply the Commit right before the highlighted Commit.  When we deal with branches and merges, you will see that a Commit can have more than one parent.

 

8\) (B) The most advanced part of this page and something we will cover when we get to branching.

 

9\) (C) The files that were added, deleted, or modified in this Commit.  This is not complete!  In this Commit, ***test1.r*** was renamed to ***test5.r***, but a rename is not reflected here.  This is because this is RStudio's visual representation of a Git Commit and it is not a perfect representation.  If you want to see the complete (but gory) details of all the changes in the Commit, then you need to type in the Terminal

``` bash
git show <SHA_of_Commit>
```

So, in this case:

``` {.bash tab="Terminal"}
git show c8022b6e
```

This will give you all the information about changes in the Commit including the renamed file (highlighted) -- albeit in a less-friendly format:

![Using the Terminal to see the changes in a Commit](images/GH-Show.jpg){#fig-terminal-commit-changes .fs}

 

10\) (D) A summary of the Diff for each changed file.  If the file was added then it will show all lines in green. If the file was removed then it will show all lines in red.   The Terminal version of the summary ( (@fig-terminal-commit-changes) specifically says when files are added and deleted whereas the RStudio version does not.  There is a file added and one file deleted -- I will let you find those lines in the Terminal if you want...

 

11\) (D) A link to view the file -- this will be used later in this lesson to recover an older version of a file.  Notice that the file at the bottom of section D (***test file.txt***) has no link -- this is because the file was deleted.

## File recovery

Any file within your project can be restored (technically, reverted) to an older version.  The file can be reverted to any previous version of the file that was put into a Commit.

 

The process for reverting a file is:

-   Open the Project History

-   Filter the Commits by the file you want to revert

-   Open the file from the previous Commit and save it

-   Commit the reverted file

 

Technically, what Git is doing is reversing all the changes made between the older version of the file and the current version. The Diff consists of all the revisions (additions, deletions, etc.) and this is saved each time you commit. So the reverted version of the file becomes the newest version, but [all the previous versions of the file are still in the history]{.hl} including the most recent one.

### Use Project History to find file

We need to first get to the Project History -- this is in the same ***Review Changes*** window as the Diff and the Commits.  Just click ***History*** when you are in the window to get to the Project History.

![The Project History tab in the Review Changes window](images/GH_1-4_ProjectHistory.jpg){#fig-Proj_hist_tab .fs}

In the top part of the window is a listing of every Commit in the project along with the comment attached to the Commit, the person who Committed it, date, and the SHA which will be important later.

### Filtering Commits by a file

We do not want to see all Commits, we only really want to see the Commits that are relevant to the file we want to revert.  We can filter the Commit to only show those that reflect changes to a specific file (in this case, ***scripts/test4.r***) by

-   Clicking on ***(all commits)***

-   Click on ***Filter by File...***

-   Choose the file in the File Explorer window (or Finder window on Mac) and click ***Open***

![Filtering Commits by a single file](images/GH_1-4_FileFilter.jpg){#fig-filterCommits-file .fs}

### Reverting file to older version

After filtering we see that, in this example, 5 Commits had changes to ***test4.r***.  I am going to revert the file back to the first Commit.  This particular Commit had changes to two files: ***data/test3.r*** and ***scripts/test4.r*** (but we only care about the latter).

![Choosing which Commit you want to revert the file back to](images/GH_1-4_FileVersions.jpg){#fig-file_versions .fs}

We can view the file ***test4.r*** as it was in the Commit by clicking on the ***View file \@*** text.  This will bring the file up in a separate window:

![The old version of the file appears in a new Window.](images/GH_1-4_OldFile.jpg){#fig-old-version-file .fs}

[Note: A Commit only has changes to the file so, to show the file as it was for that Commit, Git goes through all the intermediate Commits and calculates the content of the file using the Diffs. ]{.note}

### Recommitting the previous version of the file

You can save the file into your project by clicking the ***Save As*** button.  You can save the file under a new name or under the same name (thereby overwriting the file).  We are going to save it under the same name, ***test4.r*** -- this will give you a warning that you are overwriting a file, that is OK.

 

Now that we have saved changes to the ***test4.r*** file, let's Commit this change.  We will put in a Commit Message that says, "Restored test4.r".  In the Diff section of the Commit window notice that Git just sees this as a file that got edited and it just happens that the edits put the file back to a previous state.

![Commit the test4.r file reversion](images/GH_1-4_CommitOldFile.jpg){#fig-commitOldFile .fs}

After you Commit the changes, close the ***Review Changes*** window, open it back up (the close and open is needed to force a refresh) in the ***History*** tab, filter by the ***test4.r*** file and you will see that there is a new Commit that reflected the Commit message just written:

![The Project History tab reflects the new Commit just created](images/GH_1-4_NewCommit.jpg){#fig-afterCommit .fs}

What this means is that you can still restore ***test4.r*** to any previous state -- including the one you just deleted.  Git, by default, never erased any history on your Project.  Every file can be restored to any state from a previous Commit and Commit, by default, are not deleted.

## Project recovery

In the last section we revert one file back to its state in a previous Commit.  You can also restore the whole Project (i.e., every file in a Commit) to a previous state.  This is similar to reverting a file back to a previous Commit except that it reverts all files back to that Commit.

 

Just like the File Recovery, a Project Recovery creates a new Commit that reflects all the changes but you do not lose the previous state of your project -- that still exists in the previous Commits.

 

[Note: make sure the dropdown filter is set back to ***(all commits)***.]{.note}

### Choosing a Commit to revert to

To revert to a previous version of the project, we need to have the identifier of the Commit we want to revert to.  That identifier is called the ***SHA*** and it is in the last column of the Project History.

![The identifier for the Commit -- an 8-digit string called the SHA](images/GH_1-4_SHA_Commit-01.jpg){#fig-sha .fs}

In the figure above, we are choosing the Commit that was 5 Commits previous to the current.  But, in order to revert back to that Commit, [Git must revert all the changes made in the Commits in between the two Commits]{.hl}.  This is more advanced and a little more dangerous than reverting a file so there is no button clicks that will do it -- you need to use the ***Terminal***.

 

The Terminal command is:

``` bash
git revert --no-commit <SHA>..HEAD
```

where, in my case, the SHA is 0f15ecf7 so...

``` bash
git revert --no-commit 0f15ecf7...HEAD
```

![Terminal command to revert the project to a previous Commit](images/GH_1-4_ProjectRevert.jpg){#fig-TermCommand_Revert .fs}

What this does it is revert the file changes in all of the Commits in between the current one and the one you revert to.  The file changed will be reflected in your Project and the Staging Area -- the changes have not be Committed at this point.

 

When we open up the Commit window, we see that 6 files were changed, meaning that these 6 files changed between the current Commit and the Commit we are reverting to.

![6 files were changed when we reverted to the older Commit -- Committing the reversions](images/GH_1-4_RevertProjCommit.jpg){#fig-CommitReversions .fs}

Let's Commit the changes (i.e., reversions) and look at the new Project History:

![The Project history after the Project was reverted to a previous Commit](images/GH_1-4_ProjectREvertCommit-01.jpg){#fig-newProjHist .fs}

Notice that the newest Commit has a Diff section that reflects changes to 6 files -- the 6 files that got reverted.  Also, notice that no Commits were deleted -- so, if you decided that you were wrong to revert the project, you can restore (or, re-revert) the Project to the previous Commit.

## Application

In your RStudio Project:

1\) one file to a previous state

2\) Set your Project back to a previous state

 

Make sure your Commit Messages accurately reflect what is happening.
