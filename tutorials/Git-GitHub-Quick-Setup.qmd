---
title: "Quick Setup"
short: "00"
# special characters for highlighting code : «»
---

### notes

-   Git/GitHub works a little bit better if the project is not on a cloud folder (e.g., OneDrive, Google Drive)

-   You can create a project in a empty folder and then add the files afterwards

-   Previously installed Git software (e.g., GitHub Desktop) could cause issues

-   [This lesson assumes that you have an RStudio Project and a GitHub repository URL]{.hl}

-   Include how to email when a Post is sent to the repository

### Tasks

1.  Install Git

2.  Get a GitHub account

    -   Email your GitHub ID to [belinsky\@msu.edu](mailto:belinsky@msu.edu)

3.  Configure Git on your computer (using RStudio Terminal)

4.  Add Git to an RStudio Project

5.  Link an RStudio Project to a GitHub repository

6.  Authenticate GitHub

7.  [Sending (Push) the changes to GitHub](#sending-push-the-changes-to-github)

## Install Git on your computer

Make sure [RStudio is closed]{.hl} while ***Git*** is being installed.

 

**Windows installation**: [go to this page](https://git-scm.com/downloads) and click on ***Download 2.XX.X for Windows***

**Mac installation**: [go to this page](https://git-scm.com/download/mac) and download the ***Binary Installer***

 

You can use the default installation settings.

## Get a GitHub account

Go to <https://github.com> and sign up for an account.  Email your account ID to [belinsky\@msu.edu](mailto:belinsky@msu.edu).

## Configure Git on your computer

We will use the RStudio ***Terminal*** tab, located in the bottom-left corner next to the ***Console*** tab (@fig-TerminalTab) to set up the username and email that Git attaches to the metadata of your project.  You can choose any (valid or invalid) username and email -- they are not related to a login.

![The Terminal Tab in RStudio](images/GH-TerminalTab-01.jpg){#fig-TerminalTab .fs}

In the ***Terminal*** tab put in two commands:

``` {.bash tab="Terminal"}
git config --global user.name "your_userName" 
```

``` {.bash tab="Terminal"}
git config --global user.email "your_email"
```

## Add Git to your RStudio Project

To add ***Git*** to your RStudio Project

1.  Open your project in RStudio

2.  Click ***Tools*** -\> ***Version Control*** -\> ***Project Setup***

3.  In the ***Version control system*** dropdown menu, select ***Git***

![Adding Git to your RStudio Project](images/GH_Repo_ProjectSetup-01.png){#fig-git-rstudioProj .fs}

4.  Say ***Yes*** to initializing a new repository for the project

5.  Restart R by clicking ***Session -\> Restart R***

## Link your RStudio Project to the GitHub repository

For this section, you can use your own GitHub repository URL or one supplied to you by the instructor.

 

[Note: In Windows, **Control-V** does not paste in a **Terminal** but **right-click** -\> **Paste** works]{.note}

 

In the RStudio ***Terminal*** tab, type or copy/paste, and press ***enter*** after each line.  Make sure you put in your GitHub repository URL in the second line:

``` bash
git add -A && git commit -m "added Git"
```

``` bash
git remote add origin "https://github.com/myUserName/myRepository.git"
```

::: {#fig-linkRSPRoj}
``` bash
git push -u origin master
```

Three lines to type in Terminal that links your RStudio Project to a GitHub repository
:::

### If you made a mistake...

If you made a mistake with typing the three lines above then type the following line in the ***Terminal***:

``` bash
git remote rm origin
```

and then repeat the three lines.

## Authenticating with GitHub

After you enter the third line, there is a chance you will have to authenticate with GitHub:

![GitHub asking for authentication](images/GitHubLogin-new-01.png){#fig-auth .fs}

When you click ***Sign in with your browser***, your default browser will open to the GitHub login page.

 

After you login you will get an Authentication Successful window:

![The Authentication Successful window](images/GH_Repo_AuthSuccess-01.jpg){#fig-authSuccess .fs}

## Sending project changes to GitHub

Changes to your Project on your computer are not automatically saved to GitHub.  You have to accept (Commit) and send (Push) the changes to GitHub.  Before doing these steps, you have to make changes to your project -- this means add, remove, or modify files in your Project.

 

The images below show an example project where three files were modified: ***test1.r***, ***test2.r***, and ***testData.csv***

### Accept (Commit) changes to your project

1\) Press the ***Commit*** button in the ***Git*** tab. In the tab you will see all the project files that have been modified (added/removed/changed):

![Git tab and the Commit button](images/GitHub-CommitButton-01.PNG){#fig-tab-commit .fs}

\
 

2\) The ***Review Changes*** window appears. Select every file (@fig-tab-commit) in the left window. Be patient, the checkboxes sometimes take a few seconds to switch states.\

3\) Add a Commit message. This is a short description of the changes you made to the RStudio Project in this Commit.\
 

4\) Press the ***Commit*** button.  You have now accepted the changes to your Project.

![Accepting the changes (i.e., creating a new Commit) for your project](images/GitHub-Commit-01.PNG){#fig-newCommit .fs}

5\) Close the ***Git Commit*** window (that appears after you press the ***Commit*** button)\
 

6\) Close the ***Review Changes*** Window

### Sending (Push) the changes to GitHub {#sending-push-the-changes-to-github}

To send the changes to GitHub, you need to perform a ***Push***. You can ***Push*** in the ***Git*** tab by clicking on the green up arrow:

![The green up-arrow that sends changes to GitHub](images/GitHub-Push-01.PNG){#fig-push .fs}

 

A window will come up giving the results of the ***Push*** with a brief description of the changes. You can close the window.

## Getting email notification when a Push occurs

In the GitHub repository for your project:

-   click on ***Settings***

-   click on ***Email notifications*** (left side, near bottom, under ***Integrations***) 

 

You can only put in 2 email addresses -- make one of them belinsky\@msu.edu.

![Adding email notifications when a new Commit is Pushed to the repository](images/GH-EmailNotifications.jpg){#fig-email_notifications .fs}

## Sending an message (using Issues)

GitHub is not designed to be a messaging system.  In fact, it is designed to avoid giving members too many messages -- so, there is no direct way to send a message.

 

The best way to send a message is to start an ***Issue*** and add the person's GitHub ID to the ***Issue.*** This will send a email to the user.

 

In the GitHub repository for your project:

-   click on ***Issues***

-   click on ***\@*** to add a GitHub ID to the message

 

You can only the GitHub ID of people who are members of the repository.

![Sending a message to a GitHub user using Issues](images/GH-Issues-Message.jpg){#fig-github_issues .fs}

## Downloading a project from GitHub

If you are not collaborating on a project and do not care about update, then the easiest way to get a project is to download directly from the GitHub page.

 

In the GitHub repository for your project:

-   click on ***Code***

-   click on green ***Code*** button

-   click ***Download Zip***

 

Of course, you will have to unzip the project!

![Download the project from GitHub](images/GH-DownloadProject.jpg){#fig-downloadProject .fs}

## Inviting users to your repository

To invite a user (or, as GitHub calls them, ***collaborator***) to your repository:

1.  Go to the GitHub home page for your repository and click ***Settings***

2.  Click ***Manage Access***

3.  Click ***Invite a Collaborator***

    -   You can use either the person's GitHub ID or their email address associated with their GitHub ID

 

![Inviting a user to your GitHub Repository](images/GH-addUser1-01.PNG){#fig-inviteUser .fs}

An email will be sent to the collaborator, and they can click on ***Accept Invitation*** in the email.  They will also get a notification in GitHub and they call accept the invitation there.

## Issue: Cannot Push Commits until you Pull

This issue happens when:

-   You try to ***Push*** your new ***Commits*** to the GitHub repository *but*

-   the GitHub repository has ***Commits*** that you have not ***Pulled***

 

In other words, Git will not allow you to upload (***Push***) your updates to the GitHub repository until you have downloaded (***Pull***) the latest ***Commits*** from the GitHub Repository.  [You need to have the all the current chapter in the project before you can add a new one.]{.hl}

### Error Messages

::: {#fig-error}
``` bash
>>> C:/Program Files/Git/bin/git.exe push origin HEAD:refs/heads/master
To https://github.com/qfcatmsu/githubstarter
! [rejected] HEAD -> master (fetch first)
error: failed to push some refs to 'https://github.com/qfcatmsu/githubstarter'
hint: Updates were rejected because the «remote contains work that you do»
hint: «not have locally». This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
```

The error message when you try to Push when there are Commits you need to Pull first
:::

The message is telling you that there are Commits on the GitHub Repository that you do not have yet. In other words, someone else has Pushed Commits to the repository since you last Pulled the project.

 

[Note: typing `git pull`in the Terminal does the same thing as pressing the down blue arrow in the Git tab]{.note}

### Solution

The solution here is to ***Pull*** the changes from the repository.  And when you ***Pull*** you could get a conflict issue...
