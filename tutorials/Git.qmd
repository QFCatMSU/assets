---
title: "Git and Git Credential Manager Setup"

# format:
#   html:
#     page-layout: full
#     css: "https://qfcatmsu.github.io/assets/quarto/qfc_styles.css"
#     toc: true
#     toc-title: "<b>Content</b>"
#     toc-location: left
#     fig-align: left
#     theme: default
#     fontsize: 15px
#     number-sections: true
#     grid: 
#       body-width: 1000px
#     include-in-header:
#       - text: |
#           <link rel = "shortcut icon" href = "https://qfcatmsu.github.io/assets/quarto/qfc_icon.png" />
#           <script>mod=true; menuCollapse=true;</script>
#           <script src="https://qfcatmsu.github.io/assets/quarto/qfc_styles.js"></script>
           
editor: visual
---

## Git and Git Credential Manager

The [Git Credential Manager](https://github.com/git-ecosystem/git-credential-manager) (***GCM***) supports Windows, Linux , and Mac and handles the authentication between Git and the GitHub (and other online places that handle Git repositories like Azure and Bitlocker). There are deprecated Git Credential Managers (one for Windows, and one for Mac/Linux) that still often come up in searches.

## Windows

Windows has the easiest installation as Git Credential Manager is install with Git and there is no configuration necessary for the Git Credential Manager

### Install Git and GCM

[Click here to download and install Git](https://git-scm.com/downloads) -- click on ***Download for Windows*** (version as of March 2025 is **2.48.1**)

-   You can use all the default installation settings

### Setup Git

In the Command Prompt or PowerShell, set the Git user name and password (you will not be able to Commit until you do this):

``` bash
git config --global user.name "userName"
git config --global user.email "userEmail"
```

This username and email is attached to the Git Commits – they are not part of any login or authorization. It makes sense to use your GitHub username and email but you can use any username and email you want.

### Setup Git Credentials

The first time you Push to a repository, you will be asked for your GitHub username and password. After this, your credentials are stored on the computer.

## Mac

Before you install Git on Mac, you need to install Homebrew, which is a very useful tool for programmers as it gives easy access to packages not included with Mac.

### Install Homebrew:

Go to the homebrew page: <https://brew.sh/>

Copy the command under Install Homebrew in the Terminal and execute.

 

The command as of March 2025 is:

``` bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

But this could change. It is safest to just go to the Homebrew page and copy the link.

### Git and GCM installation

Install Git in the Terminal:

``` bash
brew install Git
```

Install Git Credential Manager in the Terminal:

``` bash
brew install --cask git-credential-manager
```

### Setup Git

In the Terminal, set the Git user name and password (you will not be able to Commit until you do this):

``` bash
git config --global user.name "userName" 
git config --global user.email "userEmail"
```

This username and email is attached to the Git Commits – they are not part of any login or authorization. It makes sense to use your GitHub username and email but you can use any username and email you want.

### Setup Git Credentials

The first time you Push to a repository, you will be asked for your GitHub username and password. After this, your credentials are stored on the computer.

## Linux Mint/ Ubuntu (GUI)

These instructions work on Ubuntu and Linux Mint that have a GUI interface. They probably work on most Debian-based machines.

### Install Git

The first line links you to the repository that has the newest version of Git – as opposed to the version that comes with your Linux distribution.

``` bash
sudo add-apt-repository ppa:git-core/ppa
apt update
apt install git
```

### Install Git Credential Manager:

Download the Debian (\*.deb) Git-Credential-Manager:

<https://github.com/git-ecosystem/git-credential-manager/releases/latest>

 

Unpack the deb file:

``` bash
sudo dpkg -i <path/to/*.deb>
```

If the download went to the ***Downloads*** folder then this command will work:

``` bash
sudo dpkg -i ~/Downloads/gcm-linux*.deb
```

### Setup Git

In the Terminal, set the Git user name and password (you will not be able to Commit until you do this):

``` bash
git config --global user.name "userName"  
git config --global user.email "userEmail"
```

This username and email is attached to the Git Commits – they are not part of any login or authorization. It makes sense to use your GitHub username and email but you can use any username and email you want.

### Setup Git Credentials

Configure the Git Credential Manager for Git

``` bash
git-credential-manager configure
```

Store your authentication with secretservice

```         
git config --global credential.credentialStore secretservice
```

The first time you Push to a repository, you will be asked for your GitHub username and password. After this, your credentials are stored on the computer.

 

You might also be asked to setup a password to the keyring that stores your Git credentials. It adds security but if you do this then you will have to type in this password every time you Push to a GitHub repository.

## Linux Mint/ Ubuntu (headless)

The standard way to setup Git Credential requires a GUI interface. These instructions provide a way to set up the GCM through only a Terminal. These instructions probably work on most Debian-based machines.

### Install Git

The first line links you to the repository that has the newest version of Git – as opposed to the version that comes with your Linux distribution.

``` bash
sudo add-apt-repository ppa:git-core/ppa 
apt update 
apt install git
```

### Install Git Credential Manager

You are going to directly download the GCM tar file from the GitHub page. The instruction below are for version 2.6.1, which is the newest version as of March 2025. Adjust the numbers for newer version.

 

Download Git Credential Manager

``` bash
wget https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.6.1/gcm-linux_amd64.2.6.1.tar.gz
```

Go to the folder where you downloaded the GCM and unzip GCM to a folder of your choice:

``` bash
tar xavf gcm-linux_amd64.2.6.1.tar.gz -C /path/to/install/folder
```

Go to the folder where you unzipped GCM and make the file executable:

``` bash
chmod +x git-credential-manager
```

In the same folder, execute the GCM:

``` bash
./git-credential-manager configure
```

### Setup Git Credentials

Configure the Git Credential Manager for Git

``` bash
git-credential-manager configure
```

Keep your authentication in cache

```         
git config --global credential.credentialStore cache
```

When you Push to GitHub you will be asked to authenticate on another device:

-   Use Authentication Method #1: Device Code

-   On another device, go to <https://github.com/login/device>

-   Login if you need to

-   You will get an 8-digit code on the other device – type that code in the Terminal

 

You GitHub authentication will be stored in cache for a certain amount of time (i.e., you will need to reauthenticate when that time is up). The default amount of time is 15 minutes. You can change default time:

``` bash
git config --global credential.helper "cache --timeout=3600"
```

[note: time is in seconds so this is 1 hour]{.note}
