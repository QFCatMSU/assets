---
title: "Git Setup"
---

### To-do

-   Add terminology section

-   Section Links

-   configuring GCM and test (after first Push) are separated

-   Add extension about delete GitHub credentials in Windows

-   Something about Terminals at the beggining

## Purpose

To link an RStudio Project to a GitHub repository using Git

### Prerequisites

-   You have installed a recent version of R and RStudio
    -   For RStudio it is highly recommended to have at least version 2025.04 as RStudio fixed a major bug in their Git interface on Windows in that version

<!-- -->

-   You have an RStudio Project

-   You can view hidden files and folders and see all file extensions (not required, but helpful)

-   Terminal usage \<??? – is this already in RStudio Projects\> 

### Tasks

1.  Install Git on your computer (*sect \##*)

2.  Install Git Credential Manager

3.  Configure Git username and email in RStudio Terminal (*sect \##*)

4.  Create a Git repository in your RStudio Project folder (*sect \##*)

5.  (optional) Exclude files from the Git repository using gitignore (*sect \##*)

6.  Get a GitHub ID (*sect \##*)

7.  Create a GitHub repository (*sect \##*)

8.  Get your GitHub URL (*sect \##*)

9.  Sync your RStudio Project with GitHub (*sect \##*)

10. Invite a user to your repository and give him ***Write*** access (*sect \##*)

## Git vs. GitHub

***Git*** and ***GitHub*** are two terms that are often conflated. [Git]{.hl} is versioning software -- you use Git on your computer to create a history of your project.  With this project history, you can bring back previous versions of files or your entire Project.  Git calls this complete history a [repository]{.hl}.   [GitHub]{.hl} is an online software development platform where you can store, sync, and share your Git repository.  When combined, Git and GitHub make a very powerful project-management system.

 

While Git and GitHub are very powerful tools, they are not intuitive and there is a pretty high-barrier to entry -- especially if you want to use them safely.

 

[Note: Git and GitHub can be used independent of each-other, but this is rare.]{.note}

## RStudio Terminal tab to configure Git

The RStudio ***Terminal*** tab, located in the bottom-left corner next to the ***Console*** tab (*fig \##*), is a very useful tool that is used to send system commands. The ***Terminal*** tab is the same as the Terminal app in Mac and the Command Prompt in Windows.  [Trap: The Console Tab and Terminal Tab]

 

We are going to use the ***Terminal*** tab multiple times when installing, setting up, and using Git.

## Installing Git and the Git Configuration Manager (GCM)

Git is software that you install on your computer that allows you to version, and create a history of, your project.  For this class, we will use Git with an RStudio Project but Git can be used with any project.

 

The [Git Credential Manager](https://github.com/git-ecosystem/git-credential-manager) (***GCM***) supports Windows, Linux , and Mac and handles the authentication between Git and the GitHub (and other online places that handle Git repositories like Azure and Bitlocker). There are deprecated Git Credential Managers (one for Windows, and one for Mac/Linux) that still often come up in searches.

 

The section provides instructions for installing Git and GCM and configuring the GCM for multiple computers.

### Windows

[Click here to download and install Git](https://git-scm.com/downloads), with the Git Configuration Manager built-in -- click on ***Download for Windows*** (version as of March 2025 is **2.49.0**)

-   Make sure [RStudio is closed]{.hl} while Git is being installed.

-   You can use all the default installation settings 

 

The Git installer also installs and configures the Git Configuration Manager.

### Mac

Before you install Git on Mac, you need to install Homebrew, which is a very useful tool for programmers as it gives easy access to packages not included with Mac.

 

Go to the homebrew page: <https://brew.sh/>

Copy the command under Install Homebrew in the Terminal and execute.

 

The command as of March 2025 is:

``` bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

But this could change. It is safest to just go to the Homebrew page and copy the link.

#### Install Git and GCM using Homebrew

Install Git in the Terminal:

``` bash
brew install Git
```

Install Git Credential Manager in the Terminal:

``` bash
brew install --cask git-credential-manager
```

#### Alternate installation for Git on Mac

If you cannot get ***Homebrew*** to work then as a kluge, you can install the [***Binary Installer***](https://git-scm.com/download/mac "Binary Installer")***.*** The ***Binary Installer*** is outdated should only be considered a temporary solution.

### Linux Mint/ Ubuntu (GUI)

These instructions work on Ubuntu and Linux Mint that have a GUI interface. They probably work on most Debian-based machines.

#### Install Git

The first line links you to the repository that has the newest version of Git – as opposed to the version that comes with your Linux distribution.

``` bash
sudo add-apt-repository ppa:git-core/ppa apt update apt install git
```

#### Install Git Credential Manager:

Download the Debian (\*.deb) Git-Credential-Manager:

<https://github.com/git-ecosystem/git-credential-manager/releases/latest>

 

Unpack the deb file:

``` bash
sudo dpkg -i <path/to/*.deb>
```

If the download went to the ***Downloads*** folder then this command will work:

``` bash
sudo dpkg -i ~/Downloads/gcm-linux*.deb
```

#### Setup Git Credentials

Configure the Git Credential Manager for Git

``` bash
git-credential-manager configure
```

Store your authentication with ***secretservice***

```         
git config --global credential.credentialStore secretservice
```

The first time you Push to a repository, you will be asked for your GitHub username and password. After this, your credentials are stored on the computer.

 

You might also be asked to setup a password to the keyring that stores your Git credentials.

-   Advantage: It adds security

-   Disadvantage: you will have to type in this password every time you Push to a GitHub repository.

### Linux Mint/ Ubuntu (headless)

The standard way to setup Git Credential requires a GUI interface. These instructions provide a way to set up the GCM through only a Terminal. Authentication will require another device where you can access a browser or the GitHub app. These instructions probably work on most Debian-based machines.

#### Install Git

The first line links you to the repository that has the newest version of Git – as opposed to the version that comes with your Linux distribution.

``` bash
sudo add-apt-repository ppa:git-core/ppa  apt update  apt install git
```

#### Install Git Credential Manager

You are going to directly download the GCM tar file from the GitHub page. The instructions below are for version 2.6.1, which is the newest version as of March 2025. Adjust the numbers for newer version.

 

Download Git Credential Manager

``` bash
wget https://github.com/git-ecosystem/git-credential-manager/releases/download/v2.6.1/gcm-linux_amd64.2.6.1.tar.gz
```

Go to the folder where you downloaded the GCM and unzip GCM to a folder of your choice:

``` bash
tar xavf gcm-linux_amd64.2.6.1.tar.gz -C /path/to/install/folder
```

Go to the folder where you unzipped GCM and make the file executable:

``` bash
chmod +x git-credential-manager
```

Now execute the GCM:

``` bash
./git-credential-manager configure
```

#### Setup Git Credentials

Configure the Git Credential Manager for Git

``` bash
git-credential-manager configure
```

Keep your authentication in cache

```         
git config --global credential.credentialStore cache
```

When you Push to GitHub you will be asked to authenticate on another device:

-   Use Authentication Method #1: Device Code

-   On another device, go to <https://github.com/login/device>

-   Login if you need to

-   You will get an 8-digit code on the other device – type that code in the Terminal

 

You GitHub authentication will be stored in cache for a certain amount of time (i.e., you will need to reauthenticate when that time is up). The default amount of time is 15 minutes. You can change the default time:

``` bash
git config --global credential.helper "cache --timeout=3600"
```

[note: time is in seconds so this is 1 hour]{.note}

## Configure Git in RStudio

To use Git for your project, you need to configure Git on your computer with a username and email. The username and email are only used to identify who made what changes in the project history. You should use your GitHub ID as the username and the email associated with your GitHub account.

 

In the Terminal, set the Git user name and password – replace ***userName*** and ***userEmail*** with your username and email:

``` bash
git config --global user.name "userName"   
git config --global user.email "userEmail"
```

![The Terminal Tab in RStudio with the two commands above (your prompt might look different)](images/GH-TerminalTab.jpg){#fig-user-email .fs}

### Viewing the configured values (optional)

You can check the username and email by executing these lines in the ***Terminal*** tab:

``` {.bash tab="Terminal"}
git config user.name
git config user.email
```

After executing the two above command, your **Terminal** tab should look similar to this:

::: {#fig-testGitConfig}
``` {.bash tab="Terminal"}
Charlie@Charlie-QFC MINGW64 /c/Users/Charlie/Desktop/GitHub Tests/FundProgUsingR
$ git config user.name
belinskyc

Charlie@Charlie-QFC MINGW64 /c/Users/Charlie/Desktop/GitHub Tests/FundProgUsingR
$ git config user.email
belinsky@msu.edu
```

Testing the git configuration using the RStudio Terminal tab
:::

## Add Git to your RStudio Project folder

We are now going to add a Git repository to the same folder as your RStudio Project.  The Git repository exists locally on your computer -- later on we will sync it to GitHub.

 

First, [make sure you are in your RStudio Project!]{.hl}

 

To add Git to your RStudio Project folder, type in the Terminal:

``` r
git init
```

And then restart RStudio

 

This only works if the Terminal is currently at your project folder directory. The only it would not be is if you changed the folder in the Terminal in this RStudio session (if you do not understand this this then you did not do this). If you did change the directory, you can get back to the correct directory by clicking: ***Tools -\> Terminal -\> Go to Current Directory***

### RStudio and Git

When you add Git to an RStudio Project folder, a ***Git*** tab will appear in the upper-right window. RStudio's built-in Git interface handles the most commonly performed Git functions.

![The Git tab has been added to the RStudio Project](images/GH_02_GitTab.png){#fig-gitTab .fs}

### Project folders and Git Repositories

Let's look inside the project folder in the RStudio ***Files*** tab ([note: you can see the same thing in your operating system's file explorer]{.span}).  By default, the ***Files*** tab will not show hidden files, we can change that by clicking on ***More -\> Show Hidden Files*** (*fig \##*).

 

RStudio adds a folder (***.RProj.user***) and a file (***\*.RProj***) to your project folder.  This is what makes this project folder an RStudio Project.

 

Similarly, [Git adds files to the project folder to make it a Git repository.]{.hl}

 

The two objects that get added by Git are:

-   .***gitignore***: this file is used to indicate files you do not want to be a part of the repository (i.e., files that are not shared nor versioned)

-   ***.git***: this folder is hidden and contains the history of your project -- do not edit or delete this!

 

Your project folder is now both an RStudio Project and a Git Repository.

![Files added to the project folder by RStudio and Git](images/GH_AddedFiles.png){#fig-git-added-files .fs}

### Files in a Git repository

A Git repository is attached to a folder, just like an RStudio Project.  In an RStudio Project, everything inside the project folder (and its subfolders) is a part of the RStudio Project.  This is not true of Git repositories.  Everything inside the project folder can be a part of the repository, but files inside the project folder are not part of the repository until they are explicitly added to the repository (more details in future lessons).

 

***.gitignore*** is used to declare the files inside the project folder that you do not want to be a part of the Git repository.

 

If you are creating a Git repository in a working project, then you need to read [Choosing files you do not want to share (.gitignore)](#choosing-files-you-do-not-want-to-share-.gitignore).  If you are just testing then you will learn more about ***.gitignore*** later.

## GitHub repository

A GitHub repository is an online storage location that syncs with the Git repository on your computer.  We will create a GitHub repository that links to the Git repository just created.

[Note: The GitHub repository does not contain an exact copy of your project -- we will get to this in later lessons.]{.note}

 

To link your existing Git repository to a GitHub repository:

1.  Get a GitHub account (if you do not have one)

2.  Create a GitHub repository -- this is your online project folder

3.  Get the URL from the GitHub repository you just created

### Get a GitHub account

If you do not have a GitHub account then go to <http://github.com> and sign up for an account. For this class, it is OK to just use a free account. Educators, students, and non-profit workers can get a professional account for free.

### Creating a GitHub repository

When logged in to GitHub (fig ##):

1.  Click on the ***+*** at the top-right and choose ***New Repository***

2.  Choose a repository name

3.  Choose whether you want the repository to be **Public** or **Private** (this can be changed later)

    -   **Public** means that anyone with the repository link can view (but not edit) your files

    -   **Private** means that only users you add in **Settings -\> Manage Access** can view the repository (more in [Inviting users to your repository])

4.  Click ***Create Repository***

![Creating a new repository in GitHub](images/GitHub%20Intro.PNG){#fig-newRepo .fs}

### Getting the URL for the repository

To link a Git repository with this GitHub repository, you will need the URL for the GitHub repository. After you create the new repository, a window will appear (fig ##) with the URL at the top in the ***Quick Setup*** section. [Copy this URL and save it]{.hl} -- you will use it in the next section.

![The URL for the GitHub repository you just created](images/GitHub%20Repository%20URL.PNG){#fig-githubURL .fs}

### GitHub repository format

If you lose the Quick Setup page then the URL is going to be the part of the URL circled below:

![The URL for your GitHub repository](images/GH_02_URL.png){#fig-url_alt .fs}

The GitHub repository link is the URL that takes you directory to the online project.  A GitHub repository link is always in this format:

```         
https://github.com/<github_user_or_team_name>/<github_repository_name>.git
```

So, if my GitHub username is ***QFCatMSU*** and my repository name is ***gitHubTest*** then the link is (yes, this repository exists):

```         
https://github.com/qfcatmsu/githubtest.git
```

[Notes: .git is optional and capital/lowercase does not matter]{.note}

## Linking your Git repository to a GitHub repository

In this section we are going to link a Git repository on your computer with an online GitHub Repository.  The GitHub repository will be the online version of your Git repository and can be shared. 

 

[Warning: This only works if the GitHub repository is empty -- we will deal with linking to a non-empty repository in a future lesson.]{.hl}

### Terminal commands to link to a GitHub repository

There are three lines in the RStudio ***Terminal*** tab you need to type in (or copy) to link your Git repository to the GitHub repository.  Don't forget to press enter after each line...

 

1\) The first adds (***add***) the first version of your project and writes **(c*ommit)*** the version to your repository with the message "added Git".

[Note: In Windows, **Control-V** does not paste in a Terminal window, but **right-click** -\> **Paste** works]{.note}

``` {tab="Terminal"}
git add -A && git commit -m "added Git"
```

2\) The second line connects (***remote add***) your Git repository to your GitHub repository (***origin***).  [Replace the URL in quotes with the URL for your GitHub repository.]{.hl}

```         
git remote add origin "https://github.com/myUserName/myRepository.git"
```

3\) The third line sends (***Push***) your project to the GitHub repository (***origin***).  There is a good chance that GitHub will ask you to authenticate at this point using the settings for your GCM (*section \##*)

```         
git push -u origin master
```

If you get an error in these steps, you probably need to reset the link shown here: [Fixing an incorrect link to a GitHub repository]

### Authenticating with GitHub

\<need to extend the authentication section... or just link to this section??\>

 

GitHub asks for authentication [the first time you connect to a GitHub repository]{.hl} on each computer:

![GitHub asking for authentication](images/GitHubLogin-new.png){#fig-auth .fs}

When you click ***Sign in with your browser***, your default browser will open to the GitHub login page. T

 

After you login you will get an Authentication Successful window:

![The Authentication Successful window](images/GH_Repo_AuthSuccess.jpg){#fig-auth-success .fs}

#### Authenticating on headless machines

\<will ask for an authentication on another machine\>

## Opening your RStudio Project \<just link to lesson??\>

As a reminder, whenever you are working on scripts within an RStudio Project, [you need to open the RStudio Project first]{.hl} and then open the script file from within the RStudio Project.

 

Three ways to open your RStudio Project are mentioned in the RStudio Projects tutorial \<relink\>

 

[Note: you can open up multiple RStudio Projects in RStudio by clicking **Session -\> New Session**.]{.note}This will open up a new, and separate, RStudio window.

## Verifying the change on GitHub

Let's go to your GitHub account to verify that the project files are there (fig ##):

1.  Log in to GitHub

2.  On the left side, there is a section called ***Repositories***. 

3.  Click on the repository called ***\<your-user-name\>***/**\<your-repository-name\>**

4.  Choose the ***Code*** tab (you are probably already on it)

 

You should notice that the files changed in the newest Commit have your Commit message attached (my Commit message: "A description you made...") and the last commit for these files is recent (in this case: 7 minutes).

![GitHub after a new Commit was pushed](images/GitHub-GitHub.PNG){#fig-github-after-push .fs}

### Editing files in GitHub (a warning...)

You can edit/create/delete folders and files in GitHub.[ I would strongly recommend against this at this point.]{.hl} This can have consequences that require a better understanding of Git and GitHub than this class provides.  Make all edits to your project on your computer and send (***Push***) it to GitHub -- this is covered in the next lesson. 

## Inviting users to your repository

To invite a user (or, as GitHub calls them, ***collaborator***) to your repository:

1.  Go to the GitHub home page for your repository and click ***Settings***

2.  Click ***Collaborators and teams***

3.  Click ***Add people***

    -   You can use either the person's GitHub ID or their email address associated with their GitHub ID

![Inviting a user to your GitHub Repository](images/GH-addUser1.PNG){#fig-github-invite .fs}

An email will be sent to the collaborator, and they can click on ***Accept Invitation*** in the email. \<alternatively, can they go the page directly and accept?\>

### Responding to the GitHub repository invite

What happens after you send an invite to another GitHub user can be a bit strange because:

-   GitHub will email an invite to the collaborator, but will not notify the user on their GitHub account

-   If the user clicks the invite link on the email and they are not logged in to GitHub, they will see a ***404 error*** and be prompted to log in -- then they can accept the invitation

### Access rights on GitHub Repositories

Personal (i.e., free) GitHub repositories have limited access options. On a personal account, [everyone you invite as a collaborator has editing rights on your repository]{.hl}.

 

If you want more control over access rights then you either need to:

-   Create a GitHub repository under an organization account. [Educational institutions](https://education.github.com/schools) and [non-profit organizations](https://github.com/nonprofit) can get a free organization account -- for instance, the [QFC has a GitHub account](https://github.com/QFCatMSU). The process, however, is not simple.

-   Upgrade your account, which [you can do as a student for free](https://education.github.com/students) as part of the Student Developer Kit -- this includes a lot of software you probably will not use

-   Pay for GitHub Pro

## Application

Add the instructor (GitHub user: ***belinskyc***) to the GitHub repository you just created and give belinskyc ***Write*** access.

## Trap: The Console Tab and Terminal Tab

Just a warning: The ***Console*** tab and the ***Terminal*** tab are next to each other and look very similar. It is very easy to confuse the two and put commands into the wrong tab.

 

-   The ***Console*** tab is an R Console -- for commands that are specific to your R scripts.

-   The ***Terminal*** tab is the same as the Terminal in Mac or the Command Prompt in Windows -- it is for sending system commands.

## Choosing files you do not want to share (.gitignore) {#choosing-files-you-do-not-want-to-share-.gitignore}

***.gitignore*** is a text document that lists all folders and files that are ignored when versioning/sharing your project.  In other words, the folders and files in ***.gitignore*** exist in your project folder but [they do not exist in your Git repository and they will not be uploaded to GitHub]{.hl}.

 

Some reasons for not sharing folders and files are that they:

-   are temporary files

-   are put in by RStudio or the operating system and do not affect the project

-   are files generated by the scripts

-   are large files that you do not want uploaded (e..g., simulated data, images)

 

***.gitignore*** starts with four files (fig ##). 

``` {.bash tab=".gitignore"}
.Rproj.user
.Rhistory
.RData
.Ruserdata
```

![The .gitignore file](images/GitHub-GitIgnoreInit.PNG){#fig-gitignore .fs}

### Editing .gitignore

You can edit ***.gitignore*** in RStudio (or any other text-editor).

 

Here is an example ***.gitignore*** (*Note: \* is a wildcard character):*

``` {tab=".gitignore"}
.Rproj.user
.Rhistory
.RData
.Ruserdata
~*
doNotSync/
*.o
test1/*.jpg
test2/data/weatherData.csv
```

The above .gitignore is ignoring:

-   ***\~\*:*** filenames that start with a tilde  ( **\~** )

-   ***doNotSync:*** if you have a ***doNotSync*** folder that will remain local-only

-   ***\*.o***: all files with extension ***.o*** -- these are intermediate files generated by C and C++ scripts

-   ***test1/\*.jpg***: all ***jpg*** files inside the ***test1*** folder (and subfolders)

-   ***test2/data/weatherData.csv***: ignore a single file (***weatherData.csv***) inside the folders ***test2/data***

 

[.gitignore is a Git repository file]{.hl} and everyone who syncs a project uses the same ***.gitignore*** – and, no, you cannot use .gitignore to ignore .gitignore.

### gitignore only works on unversioned files

Once you have versioned a file, it becomes a part of your Git repository and will be shared on GitHub.  This cannot be undone using ***.gitignore***.  This means you need to consider ***.gitignore*** before you start creating versions of your project (i.e., now).

 

[note: there are other ways to remove files from GitHub but they are complicated]{.note}

## Fixing an incorrect link to a GitHub repository

[This section is only needed if the URL for the GitHub Repository was incorrectly typed or got changed.]{.hl}

 

If after you typed in the three lines in the ***Terminal,*** you received this message:

``` {.bash tab="Terminal"}
fatal: remote origin already exists
```

Then you first need to remove the current GitHub repository (i.e., the ***origin***):

``` {.bash tab="Terminal"}
git remote rm origin
```

This cleans up the whole operation so you can start fresh.  After this, you need to redo the steps in *section \##*.

## Extension: Alternate way to add git to RStudio Project

 

To add a Git repository to your RStudio Project folder

1.  Open your project in RStudio

2.  Click ***Tools*** -\> ***Version Control*** -\> ***Project Setup*** 

```         
-   This opens the ***Project Options*** window
```

3.  In the ***Version control system*** dropdown menu, select ***Git***

4.  Adding Git to your RStudio Project

5.  Say ***Yes*** to initializing a new repository for the project

6.  You will be prompted torestart RStudio -- click ***Yes***.

```         
-   You can also manually restart by clicking ***Session -\> Restart R***
```

![Add Git to your RStudio Project](images/GH_Repo_ProjectSetup.png){#fig-addGit .fs}
