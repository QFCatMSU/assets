---
title: "03: Commits"
short: "03"
# special characters for highlighting code : «»
---

### To-do

-   show Terminal commands

-   Terminology section – separate QMD

-   Collab with self section

## Purpose

To understand how repositories get synced between Git and GitHub.  To do this we are going to create a copy of your repository so you can quickly and easily test out the collaboration feature.

## Tasks

-   **Push changes to your GitHub repository**

    -   Modify (add, remove, edit) any file in your RStudio Project (*sect \##*)

    -   Commit changes to Project (*sect \##* to *sect \##*)

    -   Push changes to GitHub (*sect \##*)

    -   Verify changes on GitHub (*sect \##*)

-   **Pull changes from a GitHub repository**

    -   Get URL of your GitHub repository (*sect \##*)

    -   Create a new RStudio Project and link it to your GitHub Repository (*sect \##*)

    -   Make change to the original Git repository and Push to GitHub (*sect \##*)

    -   Pull changes from GitHub to the copy of your repository (*sect \##*)

## RStudio Projects, Git repositories, and GitHub repositories

It is important to distinguish the difference between these three objects that are all related to your project

 

-   ***RStudio Project***:  A ***\*.RProj*** file is attached to an RStudio Project folder.  This makes the project folder the Working Directory in R and every file inside the project folder (and subfolders) is a part of the RStudio Project.

-   ***Git repository:*** A Git repository is attached to a project folder but not every file inside the folder has to be a part of the repository.  A ***.gitignore*** file is placed in the folder and it list all files that are excluded from the repository.  There is also a hidden ***.git*** folder added that contains the history of your project (don't touch this!)

-   ***GitHub repository:*** A Git repository that is put on GitHub.  A GitHub repository is used to both share your Git repository and to collaborate with others (i.e., they can clone your GitHub repository to a Git repository on their computer)

## Sending changes to GitHub {#sec-commit_push}

The first thing we are going to do is change the files in your Git repository (which is in the same folder as RStudio Project) and sync those changes to the GitHub repository created in the last lesson.

 

This process is much more complicated than syncing to a cloud folders (e.g., Google Drive, OneDrive), which automate the syncing of your folders and files.  Git does not automate anything -- you need to explicitly tell Git to sync your project.

 

This might seem painful at first but it is because Git  is a powerful program with advanced versioning capabilities that go far beyond cloud folders.  [Extension: Versioning]

 

The steps for syncing your project change to a GitHub are ([note: the bold terms are Git-specific terms]{.note}):

1.  Make changes (add/modify/delete) to files in your project 

2.  Approve the changes you have made (***Staging***)

3.  Add information about the changes you have made (***Commit Message***)

4.  Save the approved changes to the Git repository (***Commit***)

5.  Send changes to the GitHub repository (***Push***)

6.  Verify the changes on GitHub

### Make changes to your project (add, delete, or modify)

The images below (@fig-GitTab) shows an example project in which the following ~~folders and~~ files were added:

-   ~~a ***data*** and ***scripts*** folder was added to the Project Folder\<done last lesson?\>~~

-   ***test1.r*** and ***test2.r*** was added to the scripts folder

-   ***testData.csv*** was added to the data folder  

     

Looking at the ***Git*** tab, you will see the three files that have been modified:

![Git tab and the Commit button](images/GitHub-CommitButton.PNG){#fig-GitTab .fs}

#### Git and folders

One thing to notice is that the three files modified in the Git tab (@fig-GitTab) have their folder name attached. [In Git, folders are part of the file name]{.hl}.

 

In other words, Git does not see a folder named ***scripts*** that has two files named ***test1.r*** and ***test2.r***.

Instead, Git sees two files named ***scripts/test1.r*** and ***scripts/test2.r***

### Approve changes \<be careful about what is called Staging\>

To approve all of the changes you have made, press the ***Commit*** button in the ***Git*** tab and the ***Review Changes*** window appears. Check all the files (@fig-newCommit) in the left window. Be patient, the checkboxes sometimes take a few seconds to switch states. [Extension: Approving (staging) a large number of files](#extension-approving-staging-a-large-number-of-files)

 

Git calls the approval process ***staging***.  You do not have to approve every file change.  In future lessons, we will talk about the many reasons you might have to not approve changes you have made to files.

![Creating a new Commit for your project](images/GitHub-Commit.PNG){#fig-newCommit .fs}

### Add information about these change 

Information about the changes is put into the ***Commit message*** textbox (@fig-newCommit).  The message should be a short description of the changes you have made and this message gets saved along with the file changes.  The Commit message act as documentation, like script comments, and can be viewed when looking at the history of the project (something we will do in a later lesson).

 

You should not skip this step when you are working on a large project as it can be really helpful to see this documentation later on.

### Save the approved changes (Commit)

Everything in Git is centered around the ***Commit*** and in the next lesson we will go in great detail about what a Commit is.  Right now your RStudio Project has changes that your Git repository does not.  The Commit brings your Git repository up-to-date.

 

Click the ***Commit*** button in the ***Review Changes*** window (@fig-newCommit) and a Git Commit window similar to this (@fig-CommitWindow) will appear that gives a summary of the changes:

![The Git Commit window that appears after you click Commit.](images/GitCommit_Window.png){#fig-CommitWindow .fs}

You can close the ***Git Commit*** and ***Review Changes*** windows

 

[Extension: Using the Terminal to send Commits to GitHub]

### Sending the newest Commits to GitHub (Push)

At this point, the changes to your Git repository (i.e., the ***Commit***) [exists only on your computer]{.hl}. Your GitHub repository and your Git repository are not in ***sync*** (i.e., they do not have the same version of your project). To sync your Git repository to GitHub, you need to send the latest ***Commit***.  This is done with a ***Push***. You can ***Push*** in the ***Git*** tab by clicking on the green up arrow:

![Pushing to GitHub](images/GitHub-Push.PNG){#fig-push .fs}

A window will come up giving the results of the ***Push*** with a brief description of the changes. You can close the window.

 

You will usually ***Push*** new project Commits right after you create them; however, this is sometimes not possible (e.g., you don't have an internet connection), or not desirable (e.g., you have changes you do not want to share with collaborators). You can ***Push*** new project Commits at a later time.

 

[Extension: Broken Authentication (Git Push hangs)](#extension-broken-authentication-git-push-hangs)

### Verifying the change on GitHub

Just like we did last lesson, go to your GitHub account to verify that the new ***Commit*** is up (@fig-gitHubNewCommit):

1.  Log in to GitHub

2.  On the left side, there is a section called ***Repositories***. 

3.  Click on the repository called ***\<your-user-name\>***/**\<your-repository-name\>**

4.  Choose the ***Code*** tab (you are probably already on it)

 

You should notice that the files changed in the newest Commit have your Commit message attached. 

![GitHub after a new Commit was pushed](images/GitHub-GitHub-01.PNG){#fig-gitHubNewCommit .fs}

## Linking RStudio Projects and GitHub repositories

The main reason to link a Git repository to a GitHub Repository is to sync your project between multiple locations using the GitHub Repository as the central location (e.g., your ***hub***).  The best way to understand how this works is to practice syncing between locations.

 

Since most people reading this are working on their own, we are going to sync your project to two different locations on your own computer.  Creating two copies of your project allows you to test Git's collaboration features by yourself. As far as Git and GitHub are concerned, the two copies of your Project might as well be on two separate computers that are 10,000 miles apart.

 

\< You can put the second copy of your RStudio Project anywhere on your computer [except inside the first RStudio Project]{.hl}. – move later \>

### Syncing your project from GitHub

In the last lesson, we synced an ***existing RStudio Project*** to a ***new GitHub Repository***. To do that, we needed to send Git commands through the command-line interface and we did that using the ***Terminal*** in RStudio.

``` bash
git add -A && git commit -m "added Git"
git remote add origin "https://github.com/myUserName/myRepository.git"
git push -u origin master
```

In this lesson, we are going to create a ***new RStudio Project*** and sync it to an ***existing GitHub repository***.  It is actually easier to do this!

 

For this to work, you need the URL of your GitHub repository, which is always in this form:

***https://github.com/\<myUserName\>/\<myRepository\>.git***

### Link to an existing GitHub Repository 

We are going to create an RStudio Project that is also a Git repository and link it to a GitHub repository.  This process can be used to link any GitHub repository in RStudio.

 

To create a new RStudio Project/Git repository and sync your existing GitHub repository to it:

-   Open up RStudio

-   Click ***File -\> New Project...*** (a ***Create Project*** window appears)

-   Click ***Version Control***

-   Click ***Git*** (a ***Clone Git Repository*** window appears)

![Git Version Control option in RStudio](images/GH_Setup_GHRepo.png){#fig-RStudio_Git_Setup .fs}

-   In the ***Clone Git Repository*** Window

    -   **Repository URL**: paste your GitHub URL here

    -   **Project directory name**: the [local project]{.hl} name, it defaults to the name of the repository and becomes the name of the Project Folder for your RStudio Project

        -   [note: You can change the name -- Git does not care if your RStudio Project and Git repository have different names]{.note}

    -   **Create project as subdirectory of**: click ***Browse*** and select the folder location for the Project Folder that will contain the repository.

        -   In @fig-cloneGitRepo, I put it on my ***Desktop/GitHub*** folder.

        -   [This is not your project folder]{.hl}*,* this is the folder that contains your project folder.

    -   click ***Create Project***

 

![The Clone Git Repository window](images/GH_Setup_CloneGitRepo.jpg){#fig-cloneGitRepo .fs}

After you click ***Create Project***, a window will appear that tells you all the files that are being synced (it will flash by quickly) and then RStudio will open to the new RStudio Project.

### Two copies of your RStudio Project

At this point you should have two copies of your Git repository on your computer.  Both of these copies are linked to the same GitHub repository.  Again, you would not normally do this but it allows you to practice syncing to-and-from a GitHub repository on your own.

## Updating your Git and GitHub repositories

In this section you are going to make changes to one copy of your Git repository, send the changes (***Push***) to GitHub, and the receive the changes (***Pull***) at the other copy of your Git repository.

 

To make changes to your project (add, delete or, modify files), repeat the first five steps in @sec-commit_push

 

After step 5, the new Commit with the changes you have made to your Git repository have been sent to GitHub.

 

[Note: in the following section we will update your second project with the changes on GitHub.  This process would be exactly the same if the project folder was on another computer.]{.note}

### Getting updates (Pull) from GitHub

[When a GitHub repository gets updated, the updates are not automatically downloaded to your local repository]{.hl}*.*  In Git, actions like requesting updates need to be explicitly stated.*\
*

Open up the copy of your Git repository, which currently has an older version of your project.

 

To get the updates (i.e., latest ***Commits***), you need to send a request.  Git calls this request a ***Pull*** and you perform a ***Pull*** by clicking on the blue down arrow in the ***Git*** tab:

![Pulling from GitHub](images/GitHub-Pull.PNG){#fig-Pull .fs}

### Results of a Pull request

A window will come up giving the results of the ***Pull.*** If there are no updates, the window will say: Already up to date. You can close the window.

 

In @fig-pull_results, the results show that 3 files were changed as a result of the ***Pull***.  The number after the file name is how many lines were changed and ***+*** and ***-*** tell you whether something was added or deleted.  You can click ***Close***.

![The results of a Pull command](images/GH_PullResults.png){#fig-pull_results .fs}

### Importance of pulling project changes

When you are working collaboratively on a project in a GitHub repository, it is best to to get the latest version of the project by doing a Pull [before you make any changes]{.hl}.  You (almost always) want to make sure you are working on the latest version of the project.

## Downloading GitHub repositories \<extension-??\>

If you just want to download a Project that is in a GitHub repository and[you do not care about updates]{.hl} then you can:

-   Go to the page of the GitHub repository

    -   You can use the GitHub repository you just creates or go to <https://github.com/qfcatmsu/githubtest>

-   Click on the green ***Code*** button and choose ***Download ZIP***

-   Save the Zip file to your computer and unzip

-   If it is an RStudio Project, then double click on the ***.Rproj*** file to open (in this case, ***gitHubTest.Rproj***)

     

[This is a simple way to share your GitHub repository]{.hl} with people who are not your collaborators and do not care about the history/versions of your project.

## The complexity of Git

The first few lesson were designed to get you using Git and GitHub.  The next few lesson will take a deeper dive into what is going on behind the scenes.  One of the main goals of Git is to isolate the problems that occur when multiple people are working asynchronously on the same file.  If you working collaboratively on a project then understanding how Git works will keep you out of a lot of trouble.

## Application

A\) Create a new RStudio Project/Git repository on your computer and link it to the GitHub repository:

<https://github.com/QFCatMSU/GitHubTest>

 

B\) On the GitHubTest Git repository on your computer:

-   delete one file from the repository

-   modify another file in the repository

-   rename a file

-   add a file

 

C\) Commit the changes to your repository with a Commit message[that clearly states all the changes you made]{.hl}.

 

D\) ***Push*** the changes to GitHub

[note: if **Push** fails, it is probably because the instructor forgot to add you the repository.  Politely email him a reminder of this fact...]{.note}

## Extension: Approving (staging) a large number of files {#extension-approving-staging-a-large-number-of-files}

RStudio's ***Git*** tab can be very slow with staging a large number of files.  If all you want to do is stage every single changed file and there are a lot of files then it is probably quicker to go into the ***Terminal*** tab and type:

``` {.bash tab="Terminal"}
$ git All -A
```

This will quickly stage every changed file in your ***Git*** tab.

 

As of June 2023, there is also a bug in RStudio in which staging a large number of files can cause RStudio to hang in Windows.  If this happens, you need to delete the ***index.lock*** file inside the ***.git*** folder in your project folder.  The .git folder is hidden.  You can view it in RStudio's ***Files*** tab by clicking ***More -\> Show hidden files***.  After deleting ***index.lock***, you can go to the ***Terminal*** and type ***git All -A*** to avoid the problem.

## Files added to RStudio Projects by Git

When you create an RStudio Project and add Git to it, two files are created in the Project Folder (@fig-file_viewers): ***.gitignore*** and ***\*.RProj*** (RProj was explained in \<lesson1??\>)

 

[Note: If your File Manager is set to view hidden files and folders then you will also see two folders: **.git** and **.RProj.user** -- you do not need to do anything with these folders.]{.note}

![.gitignore and \*.RProj -- in RStudio Files tab and Windows folder viewer](images/GitHub-ClassFolderAndProjectViews.png){#fig-file_viewers .fs}

### .gitignore (added by Git)

***.gitignore*** is a text document that lists all folders and files that are ignored when syncing your RStudio Project to the GitHub Repository. In other words, folders and files listed in ***.gitignore*** are not uploaded to the GitHub repository.

 

Some reasons for not sharing folders and files are that they:

-   only have meaning on the local computer (e.g., history files or temporary files)

-   are generated by the scripts and do not need to be synced (e.g., images or simulated data -- you do not want to keep uploading and downloading simulated data).

     

***.gitignore*** starts with four files (@fig-gitignore). 

``` {.text tab=".gitignore"}
.Rproj.user
.Rhistory
.RData
.Ruserdata
```

![The .gitignore file](images/GitHub-GitIgnoreInit-01.PNG){#fig-gitignore .fs}

#### Editing .gitignore

You can edit ***.gitignore*** in RStudio (or any other text-editor).

 

I recommend adding two lines to ***.gitignore*** ([Note: \* is a wildcard character]{.note}*):*

``` {.text tab=".gitignore"}
.Rproj.user
.Rhistory
.RData
.Ruserdata
~*
doNotSync/
```

-   ***\*:*** filenames that start with a tilde  ( **\~** ) -- these are temporary files

***doNotSync:*** anyone who syncs this project can create a ***doNotSync*** folder that will remain local-only

 

Other files you might want to include:

-   images and videos: ***\*.jpg***, ***\*.png***, ***\*.mp4*** (especially if your code generates these files)

     

[Note: .gitignore is a project file -- so everyone who sync a project uses the same .gitignore.]{.note}  

[ignoring files on one instance of your project]

## Extension: Broken Authentication (Git Push hangs) {#extension-broken-authentication-git-push-hangs}

The ***Push*** can only happen if you have successfully authenticated your computer with GitHub (from last lesson).

 

[It is rare but this authentication can break]{.hl} and the only sign that the authentication is broken is that the ***Push*** will just hang without an error message.

 

The easiest solution to fix a broken authentication is to:

1.  close RStudio completely

2.  reinstall Git and Git Configuration Manager (GCM)

3.  open your RStudio Project and retry the ***Push***

     

This should reset the authentication and ask you for your GitHub password.

## Extension: Using the Terminal to send Commits to GitHub

The process to send project changes to GitHub is somewhat convoluted due to there being many options that are beyond this lesson.

 

So, most of the time you just want to:

1.  Create a new Commit of your project with all the file and folder changes

2.  Send the new Commit to GitHub

 

This can also be done by typing the following in RStudio's Terminal tab:

``` {.bash tab="Terminal"}
git add -A && git commit -m "Put a commit message here"
```

### Create the shortcut (only need to do once per computer)

You can create a shortcut, which I call ***acpush***

 

In the ***Terminal*** tab of RStudio type (or copy/paste). 

``` {.bash tab="Terminal"}
git config --global alias.acpush '!f() { git add -A && git commit -m "$@" && git push; }; f'
```

### Using the **acpush** shortcut

The above command created an alias in Git called ***acpush.  acpush*** creates a new Commit of your project with all file changes, attaches the commit message,  and pushes the new Commit to GitHub.

 

To use ***acpush***, in the Terminal tab type:

``` {.bash tab="Terminal"}
git acpush "Your new commit message"
```

and you can skip using the Git tab whenever you just want to Commit all changes and send the Commit to GitHub

## ignoring files on one instance of your project

***.gitignore*** is meant to be the same for every instance of your project, whether it is on GitHub or other computers. For this reason, [Git will not allow you to ignore .gitignore.]{.hl} When you change ***.gitignore***, you are changing it for every instance of your project.

 

If you want to ignore files specific to your instance of the project beyond what is in ***.gitignore*** then you need to edit the file:

**\<Root Folder\>/.git/info/exclude**

 

***.git*** is a hidden folder -- you can see it in the RStudio ***Files*** tab by clicking ***More -\> Show Hidden Files***

 

You can add folders and files to the end of the ***exclude*** file just like you would in ***.gitignore***:

::: {#fig-exclude_gitignore}
``` {.bash tab="exclude"}
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
```

exclude file before it is edited -- you can add folders and files starting at line 7
:::

## Extension: Versioning

Behind the scenes of both GitHub is Git. Git is a powerful version control system. Versions are like snapshots of your project, and these snapshots both provide a retrievable history for your project and can be shared between multiple platforms.

 

Git does not store a copy of each version of your project, *Git stores the changes between the versions*. This is a subtle point to keep in the back of your head -- it becomes increasingly important as you get more advanced with Git.

## Extension: Pulls

Up until now, all changes to your project have occurred on your computer. If new Commits were made elsewhere and pushed to GitHub then you need to ***Pull*** the newest Commit(s) from GitHub.

 

***Pull*** gets the newest Commits from your project from your GitHub repository and saves it to your RStudio Project.

 

You need to do a ***Pull*** when:

-   Somebody else sent a new Commit to the GitHub repository (e.g., your instructor might add some comments)

-   You sent a new project Commit from another computer

-    

[Note: Even if neither of the above is true, it is a good idea to get into the habit of doing a **Pull** before you start working. If you are working in a team, this is imperative.]{.note}
