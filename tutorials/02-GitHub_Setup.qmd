---
title: "02: GitHub Repositories"
short: "02"
# special characters for highlighting code : «»
---

## Purpose

-   To link an RStudio Project to a GitHub repository using Git

### Prerequisites

-   An RStudio Project with Git
-   GitHub account

### Tasks

1.  Create a GitHub repository (@sec-githubRepo)

2.  Sync your Git repository to GitHub (@sec-link)

3.  [\<do a SACP here?\>]{.hl}

4.  Invite a user to your repository and give them ***Write*** access (@sec-invite)

## Git vs. GitHub

***Git*** and ***GitHub*** are two terms that are often conflated.

 

[Git]{.hl} is versioning software -- you use Git on your computer to create a history of your project, which we will so in the next lesson.

 

[GitHub]{.hl} is an online software development platform where you can store, sync, and share your Git repository.  When combined, Git and GitHub make a very powerful project-management system.

 

[Note: Git and GitHub can be used independent of each-other.]{.note}

## GitHub repository

A GitHub repository is an online storage location that syncs with the Git repository on your computer.  We will create a GitHub repository that links to the Git repository created in last lesson.

[Note: The GitHub repository does not contain an exact copy of your project -- we will get to this in later lessons.]{.note}

 

To link your existing Git repository to a GitHub repository:

1.  Get a GitHub account (if you do not have one)

2.  Create a GitHub repository -- this is your online project folder

3.  Get the URL from the GitHub repository you just created

### Get a GitHub account {#sec-githubID}

If you do not have a GitHub account then go to <http://github.com> and sign up for an account. For this class, it is OK to just use a free account. Educators, students, and non-profit workers can get a professional account for free.

### Creating a GitHub repository {#sec-githubRepo}

When logged in to GitHub (@fig-newRepo):

1.  Click on the ***+*** at the top-right and choose ***New Repository***

2.  Choose a repository name

3.  Choose whether you want the repository to be **Public** or **Private** (this can be changed later)

    -   **Public** means that anyone with the repository link can view (but not edit) your files

    -   **Private** means that only users you add in **Settings -\> Manage Access** can view the repository (more in [Inviting users to your repository](#sec-invite))

4.  Click ***Create Repository***

![Creating a new repository in GitHub](images/GitHub%20Intro.PNG){#fig-newRepo .fs}

### Getting the URL for the repository

To link a Git repository with this GitHub repository, you will need the URL for the GitHub repository. After you create the new repository, a window will appear (@fig-githubURL) with the URL at the top in the ***Quick Setup*** section. [Copy this URL and save it]{.hl} -- you will use it in the next section.

![The URL for the GitHub repository you just created](images/GitHub%20Repository%20URL.PNG){#fig-githubURL .fs}

### GitHub repository format

If you lose the Quick Setup page then the URL is going to be the part of the URL circled below:

![The URL for your GitHub repository](images/GH_02_URL.png){#fig-url_alt .fs}

The GitHub repository link is the URL that takes you to the online project.  A GitHub repository link is always in this format:

-   https://github.com/<github_user_or_team_name>/<github_repository_name>.git

 

So, if my GitHub username is ***QFCatMSU*** and my repository name is ***gitHubTest*** then the link is (yes, this repository exists):

-   https://github.com/qfcatmsu/githubtest.git

 

[Notes: .git is optional and capital/lowercase does not matter]{.note}

## Linking your Git repository to a GitHub repository {#sec-link}

In this section we are going to link a Git repository (attached to an RStudio Project) on your computer with an online GitHub Repository.  The GitHub repository will be the online version of your Git repository and can be shared or used to collaborate.

 

[Warning: The following only works if the GitHub repository is empty.]{.hl}

### Terminal commands to link to a GitHub repository

There are three lines in the RStudio ***Terminal*** tab you need to type in (or copy) to link your Git repository to the GitHub repository. [Note: In Windows, **Control-V** does not paste inside the Terminal, but **right-click** -\> **Paste** works]{.note}

 

1\) The first adds (***add***) the first version of your project and writes **(c*ommit)*** the version to your repository with the message "added Git".

``` {.bash tab="Terminal"}
git add -A && git commit -m "added Git"
```

2\) The second line connects (***remote add***) your Git repository to your GitHub repository (***origin***).  [Replace the URL in quotes with the URL for your GitHub repository.]{.hl}

``` bash
git remote add origin "https://github.com/myUserName/myRepository.git"
```

3\) The third line sends (***Push***) your project to the GitHub repository (***origin***).  There is a good chance that GitHub will ask you to authenticate at this point using the GCM (@sec-auth)

``` bash
git push -u origin master
```

If you get an error in these steps, you probably need to reset the link shown here: [Fixing an incorrect link to a GitHub repository]

### Authenticating with GitHub (all GUI machines) {#sec-auth}

GitHub asks for authentication [the first time you modify a GitHub repository]{.hl} on each computer:

![GitHub asking for authentication](images/GitHubLogin-new.png){#fig-auth .fs}

When you click ***Sign in with your browser***, your default browser will open to the GitHub login page.

 

After you login you will get an Authentication Successful window:

![The Authentication Successful window](images/GH_Repo_AuthSuccess.jpg){#fig-auth-success .fs}

#### Authenticating on Linux (GUI)

You might also be asked to setup a password to the keyring that stores your Git credentials.

-   Advantage: It adds security

-   Disadvantage: you will have to type in this password every time you Push to a GitHub repository

#### Authenticating on Linux (headless)

When you Push to GitHub you will be asked to authenticate on another device:

-   Use Authentication Method #1: Device Code

-   On another device, go to <https://github.com/login/device>

-   Login if you need to

-   You will get an 8-digit code on the other device – type that code in the Terminal

 

You GitHub authentication will be stored in cache for a certain amount of time (i.e., you will need to reauthenticate when that time is up). The default amount of time is 15 minutes. You can change the default time:

``` bash
git config --global credential.helper "cache --timeout=3600"
```

[note: time is in seconds so this is 1 hour]{.note}

## Verifying the change on GitHub {#sec-verifyGitHub}

Let's go to your GitHub account to verify that the project files are there (@fig-github-after-push):

1.  Log in to GitHub

2.  On the left side, there is a section called ***Repositories***. 

3.  Click on the repository called ***\<your-user-name\>***/**\<your-repository-name\>**

4.  Choose the ***Code*** tab (you are probably already on it)

 

You should notice that the files changed in the newest Commit have your Commit message attached (my Commit message: "A description you made...") and the last commit for these files is recent (in this case: 7 minutes).

![GitHub after a new Commit was pushed](images/GitHub-GitHub.PNG){#fig-github-after-push .fs}

### Editing files in GitHub (a warning...)

You can edit/create/delete folders and files in GitHub.[ I would strongly recommend against this at this point.]{.hl} This can have consequences that require a better understanding of Git and GitHub than this class provides.  Instead, make all edits to your project on your computer and send (***Push***) it to GitHub -- this is covered in the next lesson. 

## Inviting users to your repository {#sec-invite}

To invite a user (or, as GitHub calls them, ***collaborator***) to your repository:

1.  Go to the GitHub home page for your repository and click ***Settings***

2.  Click ***Collaborators and teams***

3.  Click ***Add people***

    -   You can use either the person's GitHub ID or their email address associated with their GitHub ID

![Inviting a user to your GitHub Repository](images/GH-addUser1.PNG){#fig-github-invite .fs}

An email will be sent to the collaborator, and they can click on ***Accept Invitation*** in the email. \<alternatively, can they go the page directly and accept? Yes\>

### Responding to the GitHub repository invite

What happens after you send an invite to another GitHub user can be a bit strange because:

-   GitHub will email an invite to the collaborator, but will not notify the user on their GitHub account

-   If the user clicks the invite link on the email and they are not logged in to GitHub, they will see a ***404 error*** and be prompted to log in -- then they can accept the invitation

### Access rights on GitHub Repositories

Personal (i.e., free) GitHub repositories have limited access options. On a personal account, [everyone you invite as a collaborator has editing rights on your repository]{.hl}.

 

If you want more control over access rights then you either need to:

-   Create a GitHub repository under an organization account. [Educational institutions](https://education.github.com/schools) and [non-profit organizations](https://github.com/nonprofit) can get a free organization account -- for instance, the [QFC has a GitHub account](https://github.com/QFCatMSU). The process, however, is not simple.

-   Upgrade your account, which [you can do as a student for free](https://education.github.com/students) as part of the Student Developer Kit -- this includes a lot of software you probably will not use

-   Pay for GitHub Pro

## Application

Add the instructor (GitHub user: ***belinskyc***) to the GitHub repository you just created and give belinskyc ***Write*** access.

## Fixing an incorrect link to a GitHub repository {data-link="Fixing an incorrect link to a GitHub repository"}

[This section is only needed if the URL for the GitHub Repository was incorrectly typed or got changed.]{.hl}

 

If after you typed in the three lines in the ***Terminal,*** you received this message:

``` {.bash tab="Terminal"}
fatal: remote origin already exists
```

Then you first need to remove the current GitHub repository (i.e., the ***origin***):

``` {.bash tab="Terminal"}
git remote rm origin
```

This cleans up the whole operation so you can start fresh.  After this, you need to redo the steps in @sec-link.
